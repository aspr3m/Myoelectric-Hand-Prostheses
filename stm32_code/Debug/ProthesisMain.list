
ProthesisMain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000920c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a8  080093a0  080093a0  0000a3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac48  0800ac48  0000c1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac48  0800ac48  0000bc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac50  0800ac50  0000c1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0000bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0000bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800ac58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e4  2**0
                  CONTENTS
 10 .bss          00000858  200001e4  200001e4  0000c1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20000a3c  20000a3c  0000c1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f9c  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed2  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00023088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  000242d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002259e  00000000  00000000  0002513f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185f3  00000000  00000000  000476dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d174c  00000000  00000000  0005fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013141c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dbc  00000000  00000000  00131460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0013721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009384 	.word	0x08009384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009384 	.word	0x08009384

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <MX_ADC1_Init+0x9c>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <MX_ADC1_Init+0xa0>)
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000efa:	f001 fd7f 	bl	80029fc <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fe46 	bl	8001b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000f1a:	f001 fdb3 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fe36 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000200 	.word	0x20000200
 8000f34:	40012000 	.word	0x40012000
 8000f38:	0f000001 	.word	0x0f000001

08000f3c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <MX_ADC2_Init+0x9c>)
 8000f52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <MX_ADC2_Init+0xa0>)
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f9e:	f001 fd2d 	bl	80029fc <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 fdf4 	bl	8001b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fac:	2306      	movs	r3, #6
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000fbe:	f001 fd61 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fc8:	f000 fde4 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000248 	.word	0x20000248
 8000fd8:	40012100 	.word	0x40012100
 8000fdc:	0f000001 	.word	0x0f000001

08000fe0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <MX_ADC3_Init+0x98>)
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <MX_ADC3_Init+0x9c>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <MX_ADC3_Init+0x98>)
 8000ffa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_ADC3_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_ADC3_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <MX_ADC3_Init+0xa0>)
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_ADC3_Init+0x98>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_ADC3_Init+0x98>)
 800103c:	2201      	movs	r2, #1
 800103e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001040:	480d      	ldr	r0, [pc, #52]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001042:	f001 fcdb 	bl	80029fc <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800104c:	f000 fda2 	bl	8001b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001050:	230b      	movs	r3, #11
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001062:	f001 fd0f 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800106c:	f000 fd92 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000290 	.word	0x20000290
 800107c:	40012200 	.word	0x40012200
 8001080:	0f000001 	.word	0x0f000001

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001220 <HAL_ADC_MspInit+0x19c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d142      	bne.n	800112c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	4b57      	ldr	r3, [pc, #348]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a56      	ldr	r2, [pc, #344]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b54      	ldr	r3, [pc, #336]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA2     ------> ADC1_IN2
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MYO_1_Pin;
 80010fa:	2301      	movs	r3, #1
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MYO_1_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4846      	ldr	r0, [pc, #280]	@ (8001228 <HAL_ADC_MspInit+0x1a4>)
 800110e:	f002 f87b 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MYO_3_Pin|MYO_2_Pin;
 8001112:	2384      	movs	r3, #132	@ 0x84
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4841      	ldr	r0, [pc, #260]	@ (800122c <HAL_ADC_MspInit+0x1a8>)
 8001126:	f002 f86f 	bl	8003208 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800112a:	e074      	b.n	8001216 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a3f      	ldr	r2, [pc, #252]	@ (8001230 <HAL_ADC_MspInit+0x1ac>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d142      	bne.n	80011bc <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a39      	ldr	r2, [pc, #228]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a32      	ldr	r2, [pc, #200]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a2b      	ldr	r2, [pc, #172]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin|CM3_Pin|CM4_Pin;
 800118a:	233c      	movs	r3, #60	@ 0x3c
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	4822      	ldr	r0, [pc, #136]	@ (8001228 <HAL_ADC_MspInit+0x1a4>)
 800119e:	f002 f833 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CM5_Pin;
 80011a2:	2340      	movs	r3, #64	@ 0x40
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(CM5_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	481d      	ldr	r0, [pc, #116]	@ (800122c <HAL_ADC_MspInit+0x1a8>)
 80011b6:	f002 f827 	bl	8003208 <HAL_GPIO_Init>
}
 80011ba:	e02c      	b.n	8001216 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <HAL_ADC_MspInit+0x1b0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_ADC_MspInit+0x1a0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin;
 80011fe:	2302      	movs	r3, #2
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(V_BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_ADC_MspInit+0x1a4>)
 8001212:	f001 fff9 	bl	8003208 <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3740      	adds	r7, #64	@ 0x40
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012000 	.word	0x40012000
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020000 	.word	0x40020000
 8001230:	40012100 	.word	0x40012100
 8001234:	40012200 	.word	0x40012200

08001238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b83      	ldr	r3, [pc, #524]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a82      	ldr	r2, [pc, #520]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b80      	ldr	r3, [pc, #512]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b7c      	ldr	r3, [pc, #496]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a7b      	ldr	r2, [pc, #492]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b79      	ldr	r3, [pc, #484]	@ (8001460 <MX_GPIO_Init+0x228>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <MX_GPIO_Init+0x228>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a74      	ldr	r2, [pc, #464]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b72      	ldr	r3, [pc, #456]	@ (8001460 <MX_GPIO_Init+0x228>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b67      	ldr	r3, [pc, #412]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a66      	ldr	r2, [pc, #408]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b64      	ldr	r3, [pc, #400]	@ (8001460 <MX_GPIO_Init+0x228>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MD2_BIN2_Pin|MD3_AIN2_Pin|MD3_BIN1_Pin|MD3_BIN2_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 41b8 	mov.w	r1, #23552	@ 0x5c00
 80012e0:	4860      	ldr	r0, [pc, #384]	@ (8001464 <MX_GPIO_Init+0x22c>)
 80012e2:	f002 f945 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MD3_AIN1_Pin|MD1_BIN1_Pin|MD1_BIN2_Pin|MD2_AIN1_Pin
 80012e6:	2200      	movs	r2, #0
 80012e8:	21f9      	movs	r1, #249	@ 0xf9
 80012ea:	485f      	ldr	r0, [pc, #380]	@ (8001468 <MX_GPIO_Init+0x230>)
 80012ec:	f002 f940 	bl	8003570 <HAL_GPIO_WritePin>
                          |MD2_AIN2_Pin|MD2_BIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MD1_AIN1_Pin|MD1_AIN2_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80012f6:	485d      	ldr	r0, [pc, #372]	@ (800146c <MX_GPIO_Init+0x234>)
 80012f8:	f002 f93a 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGBIC_GPIO_Port, RGBIC_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2104      	movs	r1, #4
 8001300:	485b      	ldr	r0, [pc, #364]	@ (8001470 <MX_GPIO_Init+0x238>)
 8001302:	f002 f935 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MD2_BIN2_Pin|MD3_AIN2_Pin|MD3_BIN1_Pin|MD3_BIN2_Pin;
 8001306:	f44f 43b8 	mov.w	r3, #23552	@ 0x5c00
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4851      	ldr	r0, [pc, #324]	@ (8001464 <MX_GPIO_Init+0x22c>)
 8001320:	f001 ff72 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M4_Encoder_B_Pin|M1_Encoder_A_Pin|M2_Encoder_A_Pin|M2_Encoder_B_Pin
 8001324:	233b      	movs	r3, #59	@ 0x3b
 8001326:	617b      	str	r3, [r7, #20]
                          |M3_Encoder_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001328:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132e:	2302      	movs	r3, #2
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	484c      	ldr	r0, [pc, #304]	@ (800146c <MX_GPIO_Init+0x234>)
 800133a:	f001 ff65 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MD3_AIN1_Pin|MD1_BIN1_Pin|MD1_BIN2_Pin|MD2_AIN1_Pin
 800133e:	23f9      	movs	r3, #249	@ 0xf9
 8001340:	617b      	str	r3, [r7, #20]
                          |MD2_AIN2_Pin|MD2_BIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4844      	ldr	r0, [pc, #272]	@ (8001468 <MX_GPIO_Init+0x230>)
 8001356:	f001 ff57 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M1_Encoder_B_Pin|M4_Encoder_A_Pin|M5_Encoder_A_Pin|M5_Encoder_B_Pin
 800135a:	f647 4304 	movw	r3, #31748	@ 0x7c04
 800135e:	617b      	str	r3, [r7, #20]
                          |M6_Encoder_A_Pin|M6_Encoder_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001360:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	483d      	ldr	r0, [pc, #244]	@ (8001468 <MX_GPIO_Init+0x230>)
 8001372:	f001 ff49 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4836      	ldr	r0, [pc, #216]	@ (8001468 <MX_GPIO_Init+0x230>)
 800138e:	f001 ff3b 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3_Encoder_B_Pin;
 8001392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001398:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M3_Encoder_B_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	482e      	ldr	r0, [pc, #184]	@ (8001464 <MX_GPIO_Init+0x22c>)
 80013aa:	f001 ff2d 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MD1_AIN1_Pin|MD1_AIN2_Pin;
 80013ae:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4829      	ldr	r0, [pc, #164]	@ (800146c <MX_GPIO_Init+0x234>)
 80013c8:	f001 ff1e 	bl	8003208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RGBIC_Pin;
 80013cc:	2304      	movs	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGBIC_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4823      	ldr	r0, [pc, #140]	@ (8001470 <MX_GPIO_Init+0x238>)
 80013e4:	f001 ff10 	bl	8003208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2006      	movs	r0, #6
 80013ee:	f001 fe42 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013f2:	2006      	movs	r0, #6
 80013f4:	f001 fe5b 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2007      	movs	r0, #7
 80013fe:	f001 fe3a 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001402:	2007      	movs	r0, #7
 8001404:	f001 fe53 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2008      	movs	r0, #8
 800140e:	f001 fe32 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001412:	2008      	movs	r0, #8
 8001414:	f001 fe4b 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2009      	movs	r0, #9
 800141e:	f001 fe2a 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001422:	2009      	movs	r0, #9
 8001424:	f001 fe43 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	200a      	movs	r0, #10
 800142e:	f001 fe22 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001432:	200a      	movs	r0, #10
 8001434:	f001 fe3b 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2017      	movs	r0, #23
 800143e:	f001 fe1a 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001442:	2017      	movs	r0, #23
 8001444:	f001 fe33 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f001 fe12 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001452:	2028      	movs	r0, #40	@ 0x28
 8001454:	f001 fe2b 	bl	80030ae <HAL_NVIC_EnableIRQ>

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	@ 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020400 	.word	0x40020400
 800146c:	40020000 	.word	0x40020000
 8001470:	40020c00 	.word	0x40020c00

08001474 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f002 f88f 	bl	80035d4 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 fb6a 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200002d8 	.word	0x200002d8
 80014c8:	40005400 	.word	0x40005400
 80014cc:	00061a80 	.word	0x00061a80

080014d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_I2C_MspInit+0x84>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12c      	bne.n	800154c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001514:	2312      	movs	r3, #18
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001520:	2304      	movs	r3, #4
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	480c      	ldr	r0, [pc, #48]	@ (800155c <HAL_I2C_MspInit+0x8c>)
 800152c:	f001 fe6c 	bl	8003208 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 800153a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800153e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_I2C_MspInit+0x88>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005400 	.word	0x40005400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f001 f9b3 	bl	80028d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 fa4f 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f7ff fe63 	bl	8001238 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001572:	f7ff fc91 	bl	8000e98 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001576:	f7ff ff7d 	bl	8001474 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800157a:	f001 f905 	bl	8002788 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800157e:	f001 f80d 	bl	800259c <MX_TIM14_Init>
  MX_TIM3_Init();
 8001582:	f000 ff73 	bl	800246c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001586:	f000 fec5 	bl	8002314 <MX_TIM1_Init>
  MX_ADC2_Init();
 800158a:	f7ff fcd7 	bl	8000f3c <MX_ADC2_Init>
  MX_ADC3_Init();
 800158e:	f7ff fd27 	bl	8000fe0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  // Start PWMs for all motors
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Start PWM on PB1, PWM_M1
 8001592:	210c      	movs	r1, #12
 8001594:	4897      	ldr	r0, [pc, #604]	@ (80017f4 <main+0x294>)
 8001596:	f003 fbcb 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start PWM on PC6, PWM_M2
 800159a:	2100      	movs	r1, #0
 800159c:	4895      	ldr	r0, [pc, #596]	@ (80017f4 <main+0x294>)
 800159e:	f003 fbc7 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Start PWM on PC7, PWM_M3
 80015a2:	2104      	movs	r1, #4
 80015a4:	4893      	ldr	r0, [pc, #588]	@ (80017f4 <main+0x294>)
 80015a6:	f003 fbc3 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Start PWM on PC8, PWM_M4
 80015aa:	2108      	movs	r1, #8
 80015ac:	4891      	ldr	r0, [pc, #580]	@ (80017f4 <main+0x294>)
 80015ae:	f003 fbbf 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM on PA8, PWM_M5
 80015b2:	2100      	movs	r1, #0
 80015b4:	4890      	ldr	r0, [pc, #576]	@ (80017f8 <main+0x298>)
 80015b6:	f003 fbbb 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Start PWM on PA11, PWM_M6
 80015ba:	210c      	movs	r1, #12
 80015bc:	488e      	ldr	r0, [pc, #568]	@ (80017f8 <main+0x298>)
 80015be:	f003 fbb7 	bl	8004d30 <HAL_TIM_PWM_Start>

  // Start encoder interface
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015c2:	213c      	movs	r1, #60	@ 0x3c
 80015c4:	488b      	ldr	r0, [pc, #556]	@ (80017f4 <main+0x294>)
 80015c6:	f003 fc7b 	bl	8004ec0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 80015ca:	2100      	movs	r1, #0
 80015cc:	488a      	ldr	r0, [pc, #552]	@ (80017f8 <main+0x298>)
 80015ce:	f003 fc77 	bl	8004ec0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_4);
 80015d2:	210c      	movs	r1, #12
 80015d4:	4888      	ldr	r0, [pc, #544]	@ (80017f8 <main+0x298>)
 80015d6:	f003 fc73 	bl	8004ec0 <HAL_TIM_Encoder_Start>
*/



  // OLED WELCOME!
  SSD1306_Init();
 80015da:	f000 fae1 	bl	8001ba0 <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 80015de:	2100      	movs	r1, #0
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 fc47 	bl	8001e74 <SSD1306_GotoXY>
  SSD1306_Puts ("Myoelectric", &Font_11x18, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	4984      	ldr	r1, [pc, #528]	@ (80017fc <main+0x29c>)
 80015ea:	4885      	ldr	r0, [pc, #532]	@ (8001800 <main+0x2a0>)
 80015ec:	f000 fcd6 	bl	8001f9c <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 80015f0:	211e      	movs	r1, #30
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 fc3e 	bl	8001e74 <SSD1306_GotoXY>
  SSD1306_Puts ("Prosthesis", &Font_11x18, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	4980      	ldr	r1, [pc, #512]	@ (80017fc <main+0x29c>)
 80015fc:	4881      	ldr	r0, [pc, #516]	@ (8001804 <main+0x2a4>)
 80015fe:	f000 fccd 	bl	8001f9c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001602:	f000 fb91 	bl	8001d28 <SSD1306_UpdateScreen>
  HAL_Delay (1500);
 8001606:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800160a:	f001 f9d3 	bl	80029b4 <HAL_Delay>
  SSD1306_Clear();
 800160e:	f000 fcea 	bl	8001fe6 <SSD1306_Clear>
  */

   //ENCODER TEST Variables
   // Read initial states for encoders
   	   //Encoder for M1
   	   lastA_M1 = HAL_GPIO_ReadPin(GPIOA, M1_Encoder_A_Pin);
 8001612:	2102      	movs	r1, #2
 8001614:	487c      	ldr	r0, [pc, #496]	@ (8001808 <main+0x2a8>)
 8001616:	f001 ff93 	bl	8003540 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b7b      	ldr	r3, [pc, #492]	@ (800180c <main+0x2ac>)
 8001620:	601a      	str	r2, [r3, #0]
       lastB_M1 = HAL_GPIO_ReadPin(GPIOB, M1_Encoder_B_Pin);
 8001622:	2104      	movs	r1, #4
 8001624:	487a      	ldr	r0, [pc, #488]	@ (8001810 <main+0x2b0>)
 8001626:	f001 ff8b 	bl	8003540 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b79      	ldr	r3, [pc, #484]	@ (8001814 <main+0x2b4>)
 8001630:	601a      	str	r2, [r3, #0]
       //Encoder for M2

       lastA_M2 = HAL_GPIO_ReadPin(GPIOA, M2_Encoder_A_Pin);
 8001632:	2108      	movs	r1, #8
 8001634:	4874      	ldr	r0, [pc, #464]	@ (8001808 <main+0x2a8>)
 8001636:	f001 ff83 	bl	8003540 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b76      	ldr	r3, [pc, #472]	@ (8001818 <main+0x2b8>)
 8001640:	601a      	str	r2, [r3, #0]
       lastB_M2 = HAL_GPIO_ReadPin(GPIOB, M2_Encoder_B_Pin);
 8001642:	2110      	movs	r1, #16
 8001644:	4872      	ldr	r0, [pc, #456]	@ (8001810 <main+0x2b0>)
 8001646:	f001 ff7b 	bl	8003540 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b73      	ldr	r3, [pc, #460]	@ (800181c <main+0x2bc>)
 8001650:	601a      	str	r2, [r3, #0]
   	   //Encoder for M3
   	   lastA_M3 = HAL_GPIO_ReadPin(GPIOA, M3_Encoder_A_Pin);
 8001652:	2120      	movs	r1, #32
 8001654:	486c      	ldr	r0, [pc, #432]	@ (8001808 <main+0x2a8>)
 8001656:	f001 ff73 	bl	8003540 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <main+0x2c0>)
 8001660:	601a      	str	r2, [r3, #0]
       lastB_M3 = HAL_GPIO_ReadPin(GPIOB, M3_Encoder_B_Pin);
 8001662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001666:	486a      	ldr	r0, [pc, #424]	@ (8001810 <main+0x2b0>)
 8001668:	f001 ff6a 	bl	8003540 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b6c      	ldr	r3, [pc, #432]	@ (8001824 <main+0x2c4>)
 8001672:	601a      	str	r2, [r3, #0]
   	   //Encoder for M4
   	   lastA_M4 = HAL_GPIO_ReadPin(GPIOA, M4_Encoder_A_Pin);
 8001674:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001678:	4863      	ldr	r0, [pc, #396]	@ (8001808 <main+0x2a8>)
 800167a:	f001 ff61 	bl	8003540 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b69      	ldr	r3, [pc, #420]	@ (8001828 <main+0x2c8>)
 8001684:	601a      	str	r2, [r3, #0]
       lastB_M4 = HAL_GPIO_ReadPin(GPIOB, M4_Encoder_B_Pin);
 8001686:	2101      	movs	r1, #1
 8001688:	4861      	ldr	r0, [pc, #388]	@ (8001810 <main+0x2b0>)
 800168a:	f001 ff59 	bl	8003540 <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b66      	ldr	r3, [pc, #408]	@ (800182c <main+0x2cc>)
 8001694:	601a      	str	r2, [r3, #0]
   	   //Encoder for M5
   	   lastA_M5 = HAL_GPIO_ReadPin(GPIOA, M5_Encoder_A_Pin);
 8001696:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800169a:	485b      	ldr	r0, [pc, #364]	@ (8001808 <main+0x2a8>)
 800169c:	f001 ff50 	bl	8003540 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <main+0x2d0>)
 80016a6:	601a      	str	r2, [r3, #0]
       lastB_M5 = HAL_GPIO_ReadPin(GPIOB, M5_Encoder_B_Pin);
 80016a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ac:	4858      	ldr	r0, [pc, #352]	@ (8001810 <main+0x2b0>)
 80016ae:	f001 ff47 	bl	8003540 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <main+0x2d4>)
 80016b8:	601a      	str	r2, [r3, #0]
   	   //Encoder for M6
   	   lastA_M6 = HAL_GPIO_ReadPin(GPIOA, M6_Encoder_A_Pin);
 80016ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016be:	4852      	ldr	r0, [pc, #328]	@ (8001808 <main+0x2a8>)
 80016c0:	f001 ff3e 	bl	8003540 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001838 <main+0x2d8>)
 80016ca:	601a      	str	r2, [r3, #0]
       lastB_M6 = HAL_GPIO_ReadPin(GPIOB, M6_Encoder_B_Pin);
 80016cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016d0:	484f      	ldr	r0, [pc, #316]	@ (8001810 <main+0x2b0>)
 80016d2:	f001 ff35 	bl	8003540 <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b58      	ldr	r3, [pc, #352]	@ (800183c <main+0x2dc>)
 80016dc:	601a      	str	r2, [r3, #0]
       uint32_t last_switch_time = HAL_GetTick();
       uint32_t switch_interval = 30000; // Switch every 5000 ms
*/


	     int MotorPos = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
      // MIDDLE FINGER M3
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // MD2_AIN1(PB5) = High
 80016e2:	2201      	movs	r2, #1
 80016e4:	2120      	movs	r1, #32
 80016e6:	484a      	ldr	r0, [pc, #296]	@ (8001810 <main+0x2b0>)
 80016e8:	f001 ff42 	bl	8003570 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // MD2_AIN2(PB6) = Low
 80016ec:	2201      	movs	r2, #1
 80016ee:	2140      	movs	r1, #64	@ 0x40
 80016f0:	4847      	ldr	r0, [pc, #284]	@ (8001810 <main+0x2b0>)
 80016f2:	f001 ff3d 	bl	8003570 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1545); //M3
 80016f6:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <main+0x294>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f240 6209 	movw	r2, #1545	@ 0x609
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38

      //INDEX FINGER M4
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // MD2_BIN1(PB7) = High
 8001700:	2201      	movs	r2, #1
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	4842      	ldr	r0, [pc, #264]	@ (8001810 <main+0x2b0>)
 8001706:	f001 ff33 	bl	8003570 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // MD2_BIN2(PC14) = Low
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001710:	484b      	ldr	r0, [pc, #300]	@ (8001840 <main+0x2e0>)
 8001712:	f001 ff2d 	bl	8003570 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1545); //M4
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <main+0x294>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f240 6209 	movw	r2, #1545	@ 0x609
 800171e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);   // MD1_AIN1(PA12) = High

	  // PINKY MOTOR TEST


	      switch (MotorPos) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d8dd      	bhi.n	80016e2 <main+0x182>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <main+0x1cc>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	08001787 	.word	0x08001787
 8001734:	08001855 	.word	0x08001855
 8001738:	08001989 	.word	0x08001989
	      	  case 0:
	    		  SSD1306_GotoXY (0,0);
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f000 fb98 	bl	8001e74 <SSD1306_GotoXY>
	    		  SSD1306_Puts ("Resting position", &Font_7x10, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	493f      	ldr	r1, [pc, #252]	@ (8001844 <main+0x2e4>)
 8001748:	483f      	ldr	r0, [pc, #252]	@ (8001848 <main+0x2e8>)
 800174a:	f000 fc27 	bl	8001f9c <SSD1306_Puts>
	    		  SSD1306_GotoXY (0,45);
 800174e:	212d      	movs	r1, #45	@ 0x2d
 8001750:	2000      	movs	r0, #0
 8001752:	f000 fb8f 	bl	8001e74 <SSD1306_GotoXY>
	    		  SSD1306_Puts ("Battery: 23%", &Font_7x10, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	493a      	ldr	r1, [pc, #232]	@ (8001844 <main+0x2e4>)
 800175a:	483c      	ldr	r0, [pc, #240]	@ (800184c <main+0x2ec>)
 800175c:	f000 fc1e 	bl	8001f9c <SSD1306_Puts>
	              SSD1306_UpdateScreen();  // Refresh the screen to show the text
 8001760:	f000 fae2 	bl	8001d28 <SSD1306_UpdateScreen>
	              HAL_Delay(50);
 8001764:	2032      	movs	r0, #50	@ 0x32
 8001766:	f001 f925 	bl	80029b4 <HAL_Delay>
	              SSD1306_Clear();
 800176a:	f000 fc3c 	bl	8001fe6 <SSD1306_Clear>


	      		  if (HAL_GPIO_ReadPin(GPIOB, BTN_1_Pin) == GPIO_PIN_SET) {
 800176e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001772:	4827      	ldr	r0, [pc, #156]	@ (8001810 <main+0x2b0>)
 8001774:	f001 fee4 	bl	8003540 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 812f 	bne.w	80019de <main+0x47e>
	      			  MotorPos = 1;
 8001780:	2301      	movs	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
	      		  } else{
	      			  //Nothing ;)
	      		  }
	      		  break;
 8001784:	e12b      	b.n	80019de <main+0x47e>

	          case 1:
	    		  SSD1306_GotoXY (0,0);
 8001786:	2100      	movs	r1, #0
 8001788:	2000      	movs	r0, #0
 800178a:	f000 fb73 	bl	8001e74 <SSD1306_GotoXY>
	    		  SSD1306_Puts ("FIST", &Font_11x18, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	491a      	ldr	r1, [pc, #104]	@ (80017fc <main+0x29c>)
 8001792:	482f      	ldr	r0, [pc, #188]	@ (8001850 <main+0x2f0>)
 8001794:	f000 fc02 	bl	8001f9c <SSD1306_Puts>
	              SSD1306_UpdateScreen();  // Refresh the screen to show the text
 8001798:	f000 fac6 	bl	8001d28 <SSD1306_UpdateScreen>
	              HAL_Delay(50);
 800179c:	2032      	movs	r0, #50	@ 0x32
 800179e:	f001 f909 	bl	80029b4 <HAL_Delay>
	              SSD1306_Clear();
 80017a2:	f000 fc20 	bl	8001fe6 <SSD1306_Clear>



	              if (HAL_GPIO_ReadPin(GPIOB, BTN_1_Pin) == GPIO_PIN_SET) {
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	4819      	ldr	r0, [pc, #100]	@ (8001810 <main+0x2b0>)
 80017ac:	f001 fec8 	bl	8003540 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f000 8115 	beq.w	80019e2 <main+0x482>
	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // MD1_AIN2(PA15) = Low
	        		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4, 700); //M6
*/

	                  } else{
	    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0); //M1
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <main+0x294>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
	    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0); //M2
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <main+0x294>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34
	    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0); //M3
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <main+0x294>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38
	    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0); //M4
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <main+0x294>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	    	              __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0); //M5
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <main+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
	    	              __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4, 0); //M6
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <main+0x298>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40


	    	              //MotorPos = 2;

	    	              HAL_Delay(1000);
 80017e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ec:	f001 f8e2 	bl	80029b4 <HAL_Delay>
	                  }

	        	  break;
 80017f0:	e0f7      	b.n	80019e2 <main+0x482>
 80017f2:	bf00      	nop
 80017f4:	200007e4 	.word	0x200007e4
 80017f8:	2000079c 	.word	0x2000079c
 80017fc:	20000008 	.word	0x20000008
 8001800:	080093a0 	.word	0x080093a0
 8001804:	080093ac 	.word	0x080093ac
 8001808:	40020000 	.word	0x40020000
 800180c:	2000035c 	.word	0x2000035c
 8001810:	40020400 	.word	0x40020400
 8001814:	20000360 	.word	0x20000360
 8001818:	20000364 	.word	0x20000364
 800181c:	20000368 	.word	0x20000368
 8001820:	20000370 	.word	0x20000370
 8001824:	20000374 	.word	0x20000374
 8001828:	20000378 	.word	0x20000378
 800182c:	2000037c 	.word	0x2000037c
 8001830:	20000380 	.word	0x20000380
 8001834:	20000384 	.word	0x20000384
 8001838:	20000388 	.word	0x20000388
 800183c:	2000038c 	.word	0x2000038c
 8001840:	40020800 	.word	0x40020800
 8001844:	20000000 	.word	0x20000000
 8001848:	080093b8 	.word	0x080093b8
 800184c:	080093cc 	.word	0x080093cc
 8001850:	080093dc 	.word	0x080093dc

	          case 2:
	    		  SSD1306_GotoXY (0,0);
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f000 fb0c 	bl	8001e74 <SSD1306_GotoXY>
	    		  SSD1306_Puts ("REST", &Font_11x18, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	4962      	ldr	r1, [pc, #392]	@ (80019e8 <main+0x488>)
 8001860:	4862      	ldr	r0, [pc, #392]	@ (80019ec <main+0x48c>)
 8001862:	f000 fb9b 	bl	8001f9c <SSD1306_Puts>
	              SSD1306_UpdateScreen();  // Refresh the screen to show the text
 8001866:	f000 fa5f 	bl	8001d28 <SSD1306_UpdateScreen>
	              HAL_Delay(50);
 800186a:	2032      	movs	r0, #50	@ 0x32
 800186c:	f001 f8a2 	bl	80029b4 <HAL_Delay>
	              SSD1306_Clear();
 8001870:	f000 fbb9 	bl	8001fe6 <SSD1306_Clear>

	              if (HAL_GPIO_ReadPin(GPIOB, BTN_1_Pin) == GPIO_PIN_SET) {
 8001874:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001878:	485d      	ldr	r0, [pc, #372]	@ (80019f0 <main+0x490>)
 800187a:	f001 fe61 	bl	8003540 <HAL_GPIO_ReadPin>
 800187e:	4603      	mov	r3, r0
 8001880:	2b01      	cmp	r3, #1
 8001882:	d168      	bne.n	8001956 <main+0x3f6>
  	                  // THUMB M1
  	                  // Direction
  	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);   // MD3_BIN1(PC11) = High
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800188a:	485a      	ldr	r0, [pc, #360]	@ (80019f4 <main+0x494>)
 800188c:	f001 fe70 	bl	8003570 <HAL_GPIO_WritePin>
  	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); // MD3_BIN2(PC12) = Low
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001896:	4857      	ldr	r0, [pc, #348]	@ (80019f4 <main+0x494>)
 8001898:	f001 fe6a 	bl	8003570 <HAL_GPIO_WritePin>
  	                  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 700); //M1
 800189c:	4b56      	ldr	r3, [pc, #344]	@ (80019f8 <main+0x498>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40

  	                  //THUMB ROTATION M6
  	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);   // MD1_AIN1(PA12) = High
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ac:	4853      	ldr	r0, [pc, #332]	@ (80019fc <main+0x49c>)
 80018ae:	f001 fe5f 	bl	8003570 <HAL_GPIO_WritePin>
  	                  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // MD1_AIN2(PA15) = Low
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b8:	4850      	ldr	r0, [pc, #320]	@ (80019fc <main+0x49c>)
 80018ba:	f001 fe59 	bl	8003570 <HAL_GPIO_WritePin>
  	        		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4, 700); //M6
 80018be:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <main+0x4a0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40

  	        		  HAL_Delay(3000);
 80018c8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80018cc:	f001 f872 	bl	80029b4 <HAL_Delay>
  	        		  //PINKY M5
  	        		  // Direction
  	        		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // MD3_AIN1(PB0) = High
 80018d0:	2201      	movs	r2, #1
 80018d2:	2101      	movs	r1, #1
 80018d4:	4846      	ldr	r0, [pc, #280]	@ (80019f0 <main+0x490>)
 80018d6:	f001 fe4b 	bl	8003570 <HAL_GPIO_WritePin>
  	        		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // MD3_AIN2(PC10) = Low
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e0:	4844      	ldr	r0, [pc, #272]	@ (80019f4 <main+0x494>)
 80018e2:	f001 fe45 	bl	8003570 <HAL_GPIO_WritePin>
  	        		  //PWM
  	        		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 700); //M5
 80018e6:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <main+0x4a0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80018ee:	635a      	str	r2, [r3, #52]	@ 0x34

  	        		  // RING FINGER M2
  	        			              	                  // Direction
  	        			              	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);   // MD1_AIN1(PB3) = High
 80018f0:	2200      	movs	r2, #0
 80018f2:	2108      	movs	r1, #8
 80018f4:	483e      	ldr	r0, [pc, #248]	@ (80019f0 <main+0x490>)
 80018f6:	f001 fe3b 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // MD1_BIN2(PB4) = Low
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	483c      	ldr	r0, [pc, #240]	@ (80019f0 <main+0x490>)
 8001900:	f001 fe36 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	                  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 700); //M2
 8001904:	4b3c      	ldr	r3, [pc, #240]	@ (80019f8 <main+0x498>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34

  	        			              	                  // MIDDLE FINGER M3
  	        			              	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);   // MD1_AIN1(PB5) = High
 800190e:	2200      	movs	r2, #0
 8001910:	2120      	movs	r1, #32
 8001912:	4837      	ldr	r0, [pc, #220]	@ (80019f0 <main+0x490>)
 8001914:	f001 fe2c 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // MD1_BIN2(PB6) = Low
 8001918:	2201      	movs	r2, #1
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	4834      	ldr	r0, [pc, #208]	@ (80019f0 <main+0x490>)
 800191e:	f001 fe27 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	                  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 700); //M3
 8001922:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <main+0x498>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38

  	        			              	                  //INDEX FINGER M4
  	        			              	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);   // MD2_BIN1(PB7) = High
 800192c:	2200      	movs	r2, #0
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	482f      	ldr	r0, [pc, #188]	@ (80019f0 <main+0x490>)
 8001932:	f001 fe1d 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // MD2_BIN2(PC14) = Low
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800193c:	482d      	ldr	r0, [pc, #180]	@ (80019f4 <main+0x494>)
 800193e:	f001 fe17 	bl	8003570 <HAL_GPIO_WritePin>
  	        			              	        		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 700); //M4
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <main+0x498>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800194a:	63da      	str	r2, [r3, #60]	@ 0x3c

  	        			              	        		  HAL_Delay(2000);
 800194c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001950:	f001 f830 	bl	80029b4 <HAL_Delay>
	              if (HAL_GPIO_ReadPin(GPIOB, BTN_1_Pin) == GPIO_PIN_SET){
	            	  HAL_Delay(100);
	            	  MotorPos = 3;
	              }
	              */
	        	  break;
 8001954:	e047      	b.n	80019e6 <main+0x486>
    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0); //M1
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <main+0x498>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40
    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0); //M2
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <main+0x498>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0); //M3
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <main+0x498>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	639a      	str	r2, [r3, #56]	@ 0x38
    	              __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0); //M4
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <main+0x498>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	63da      	str	r2, [r3, #60]	@ 0x3c
    	              __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0); //M5
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <main+0x4a0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34
    	              __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4, 0); //M6
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <main+0x4a0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40
	        	  break;
 8001986:	e02e      	b.n	80019e6 <main+0x486>
	          case 3:
	    		  SSD1306_GotoXY (0,0);
 8001988:	2100      	movs	r1, #0
 800198a:	2000      	movs	r0, #0
 800198c:	f000 fa72 	bl	8001e74 <SSD1306_GotoXY>
	    		  SSD1306_Puts ("CASE 3", &Font_11x18, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	4915      	ldr	r1, [pc, #84]	@ (80019e8 <main+0x488>)
 8001994:	481b      	ldr	r0, [pc, #108]	@ (8001a04 <main+0x4a4>)
 8001996:	f000 fb01 	bl	8001f9c <SSD1306_Puts>
	              SSD1306_UpdateScreen();  // Refresh the screen to show the text
 800199a:	f000 f9c5 	bl	8001d28 <SSD1306_UpdateScreen>
	              HAL_Delay(50);
 800199e:	2032      	movs	r0, #50	@ 0x32
 80019a0:	f001 f808 	bl	80029b4 <HAL_Delay>
	              SSD1306_Clear();
 80019a4:	f000 fb1f 	bl	8001fe6 <SSD1306_Clear>

	        	  while (encoder_count_M2 > 5){
 80019a8:	e00e      	b.n	80019c8 <main+0x468>
	        		  // RING FINGER
	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);   // MD1_AIN1(PB3) = High
 80019aa:	2200      	movs	r2, #0
 80019ac:	2108      	movs	r1, #8
 80019ae:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <main+0x490>)
 80019b0:	f001 fdde 	bl	8003570 <HAL_GPIO_WritePin>
	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // MD1_AIN2 (PB4)
 80019b4:	2201      	movs	r2, #1
 80019b6:	2110      	movs	r1, #16
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <main+0x490>)
 80019ba:	f001 fdd9 	bl	8003570 <HAL_GPIO_WritePin>
	                  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1545); //M2
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <main+0x498>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f240 6209 	movw	r2, #1545	@ 0x609
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34
	        	  while (encoder_count_M2 > 5){
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <main+0x4a8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	dcec      	bgt.n	80019aa <main+0x44a>
	        		  //PINKY
	                  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // MD3_AIN1(PB0) = High
	                  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // MD3_AIN2(PC10) = Low
	                  //__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 1545); //M5
	        	  }
	        	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0); //M2
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <main+0x498>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	635a      	str	r2, [r3, #52]	@ 0x34
	        	  //__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0); //M5
	        	  MotorPos = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
	        	  break;
 80019dc:	e003      	b.n	80019e6 <main+0x486>
	      		  break;
 80019de:	bf00      	nop
 80019e0:	e67f      	b.n	80016e2 <main+0x182>
	        	  break;
 80019e2:	bf00      	nop
 80019e4:	e67d      	b.n	80016e2 <main+0x182>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // MD2_AIN1(PB5) = High
 80019e6:	e67c      	b.n	80016e2 <main+0x182>
 80019e8:	20000008 	.word	0x20000008
 80019ec:	080093e4 	.word	0x080093e4
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	200007e4 	.word	0x200007e4
 80019fc:	40020000 	.word	0x40020000
 8001a00:	2000079c 	.word	0x2000079c
 8001a04:	080093ec 	.word	0x080093ec
 8001a08:	2000036c 	.word	0x2000036c

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	@ 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2230      	movs	r2, #48	@ 0x30
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fe05 	bl	800762a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <SystemClock_Config+0xcc>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <SystemClock_Config+0xcc>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <SystemClock_Config+0xcc>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <SystemClock_Config+0xd0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <SystemClock_Config+0xd0>)
 8001a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <SystemClock_Config+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a80:	23a8      	movs	r3, #168	@ 0xa8
 8001a82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fc0f 	bl	80042b4 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a9c:	f000 f87a 	bl	8001b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2105      	movs	r1, #5
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fe70 	bl	80047a4 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aca:	f000 f863 	bl	8001b94 <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	@ 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <HAL_GPIO_EXTI_Callback>:
}

*/

// Interrupt callback handler encoder M2
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
    // Read the current state of A and B pins
    bool currentA_M2 = HAL_GPIO_ReadPin(GPIOB, M2_Encoder_A_Pin);
 8001aea:	2108      	movs	r1, #8
 8001aec:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001aee:	f001 fd27 	bl	8003540 <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
    bool currentB_M2 = HAL_GPIO_ReadPin(GPIOB, M2_Encoder_B_Pin);
 8001afe:	2110      	movs	r1, #16
 8001b00:	4820      	ldr	r0, [pc, #128]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001b02:	f001 fd1d 	bl	8003540 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]

    // Check which pin triggered the interrupt
    if (GPIO_Pin == M2_Encoder_A_Pin) {
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d114      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x62>
        // Determine direction by using the state of A and B
        if (currentA_M2 != lastA_M2) { // Only act on changes
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d026      	beq.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
            if (currentA_M2 == currentB_M2) {
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d105      	bne.n	8001b36 <HAL_GPIO_EXTI_Callback+0x56>
                encoder_count_M2--;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e01c      	b.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
            } else {
                encoder_count_M2++;
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e016      	b.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
            }
        }
    } else if (GPIO_Pin == M2_Encoder_B_Pin) {
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d113      	bne.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
        if (currentB_M2 != lastB_M2) { // Only act on changes
 8001b48:	7bba      	ldrb	r2, [r7, #14]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d00e      	beq.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
            if (currentA_M2 != currentB_M2) {
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d005      	beq.n	8001b66 <HAL_GPIO_EXTI_Callback+0x86>
                encoder_count_M2--;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_EXTI_Callback+0x90>
            } else {
                encoder_count_M2++;
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001b6e:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Update last states
    lastA_M2 = currentA_M2;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b74:	6013      	str	r3, [r2, #0]
    lastB_M2 = currentB_M2;
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020400 	.word	0x40020400
 8001b88:	20000364 	.word	0x20000364
 8001b8c:	2000036c 	.word	0x2000036c
 8001b90:	20000368 	.word	0x20000368

08001b94 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */


void Error_Handler(void) {
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <Error_Handler+0x8>

08001ba0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ba6:	f000 fa27 	bl	8001ff8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001baa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2178      	movs	r1, #120	@ 0x78
 8001bb2:	485b      	ldr	r0, [pc, #364]	@ (8001d20 <SSD1306_Init+0x180>)
 8001bb4:	f001 ff8c 	bl	8003ad0 <HAL_I2C_IsDeviceReady>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e0a9      	b.n	8001d16 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001bc2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001bc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bc8:	e002      	b.n	8001bd0 <SSD1306_Init+0x30>
		p--;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bd6:	22ae      	movs	r2, #174	@ 0xae
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2078      	movs	r0, #120	@ 0x78
 8001bdc:	f000 fa88 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001be0:	2220      	movs	r2, #32
 8001be2:	2100      	movs	r1, #0
 8001be4:	2078      	movs	r0, #120	@ 0x78
 8001be6:	f000 fa83 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bea:	2210      	movs	r2, #16
 8001bec:	2100      	movs	r1, #0
 8001bee:	2078      	movs	r0, #120	@ 0x78
 8001bf0:	f000 fa7e 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bf4:	22b0      	movs	r2, #176	@ 0xb0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2078      	movs	r0, #120	@ 0x78
 8001bfa:	f000 fa79 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bfe:	22c8      	movs	r2, #200	@ 0xc8
 8001c00:	2100      	movs	r1, #0
 8001c02:	2078      	movs	r0, #120	@ 0x78
 8001c04:	f000 fa74 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2078      	movs	r0, #120	@ 0x78
 8001c0e:	f000 fa6f 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001c12:	2210      	movs	r2, #16
 8001c14:	2100      	movs	r1, #0
 8001c16:	2078      	movs	r0, #120	@ 0x78
 8001c18:	f000 fa6a 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c1c:	2240      	movs	r2, #64	@ 0x40
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2078      	movs	r0, #120	@ 0x78
 8001c22:	f000 fa65 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c26:	2281      	movs	r2, #129	@ 0x81
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2078      	movs	r0, #120	@ 0x78
 8001c2c:	f000 fa60 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c30:	22ff      	movs	r2, #255	@ 0xff
 8001c32:	2100      	movs	r1, #0
 8001c34:	2078      	movs	r0, #120	@ 0x78
 8001c36:	f000 fa5b 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c3a:	22a1      	movs	r2, #161	@ 0xa1
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2078      	movs	r0, #120	@ 0x78
 8001c40:	f000 fa56 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c44:	22a6      	movs	r2, #166	@ 0xa6
 8001c46:	2100      	movs	r1, #0
 8001c48:	2078      	movs	r0, #120	@ 0x78
 8001c4a:	f000 fa51 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c4e:	22a8      	movs	r2, #168	@ 0xa8
 8001c50:	2100      	movs	r1, #0
 8001c52:	2078      	movs	r0, #120	@ 0x78
 8001c54:	f000 fa4c 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c58:	223f      	movs	r2, #63	@ 0x3f
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2078      	movs	r0, #120	@ 0x78
 8001c5e:	f000 fa47 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c62:	22a4      	movs	r2, #164	@ 0xa4
 8001c64:	2100      	movs	r1, #0
 8001c66:	2078      	movs	r0, #120	@ 0x78
 8001c68:	f000 fa42 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c6c:	22d3      	movs	r2, #211	@ 0xd3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2078      	movs	r0, #120	@ 0x78
 8001c72:	f000 fa3d 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2078      	movs	r0, #120	@ 0x78
 8001c7c:	f000 fa38 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c80:	22d5      	movs	r2, #213	@ 0xd5
 8001c82:	2100      	movs	r1, #0
 8001c84:	2078      	movs	r0, #120	@ 0x78
 8001c86:	f000 fa33 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c8a:	22f0      	movs	r2, #240	@ 0xf0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2078      	movs	r0, #120	@ 0x78
 8001c90:	f000 fa2e 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c94:	22d9      	movs	r2, #217	@ 0xd9
 8001c96:	2100      	movs	r1, #0
 8001c98:	2078      	movs	r0, #120	@ 0x78
 8001c9a:	f000 fa29 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c9e:	2222      	movs	r2, #34	@ 0x22
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2078      	movs	r0, #120	@ 0x78
 8001ca4:	f000 fa24 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ca8:	22da      	movs	r2, #218	@ 0xda
 8001caa:	2100      	movs	r1, #0
 8001cac:	2078      	movs	r0, #120	@ 0x78
 8001cae:	f000 fa1f 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001cb2:	2212      	movs	r2, #18
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2078      	movs	r0, #120	@ 0x78
 8001cb8:	f000 fa1a 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001cbc:	22db      	movs	r2, #219	@ 0xdb
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2078      	movs	r0, #120	@ 0x78
 8001cc2:	f000 fa15 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2078      	movs	r0, #120	@ 0x78
 8001ccc:	f000 fa10 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cd0:	228d      	movs	r2, #141	@ 0x8d
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2078      	movs	r0, #120	@ 0x78
 8001cd6:	f000 fa0b 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cda:	2214      	movs	r2, #20
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2078      	movs	r0, #120	@ 0x78
 8001ce0:	f000 fa06 	bl	80020f0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ce4:	22af      	movs	r2, #175	@ 0xaf
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2078      	movs	r0, #120	@ 0x78
 8001cea:	f000 fa01 	bl	80020f0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cee:	222e      	movs	r2, #46	@ 0x2e
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2078      	movs	r0, #120	@ 0x78
 8001cf4:	f000 f9fc 	bl	80020f0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f843 	bl	8001d84 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001cfe:	f000 f813 	bl	8001d28 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <SSD1306_Init+0x184>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <SSD1306_Init+0x184>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <SSD1306_Init+0x184>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002d8 	.word	0x200002d8
 8001d24:	20000790 	.word	0x20000790

08001d28 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	e01d      	b.n	8001d70 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	3b50      	subs	r3, #80	@ 0x50
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2078      	movs	r0, #120	@ 0x78
 8001d40:	f000 f9d6 	bl	80020f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2078      	movs	r0, #120	@ 0x78
 8001d4a:	f000 f9d1 	bl	80020f0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d4e:	2210      	movs	r2, #16
 8001d50:	2100      	movs	r1, #0
 8001d52:	2078      	movs	r0, #120	@ 0x78
 8001d54:	f000 f9cc 	bl	80020f0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <SSD1306_UpdateScreen+0x58>)
 8001d5e:	441a      	add	r2, r3
 8001d60:	2380      	movs	r3, #128	@ 0x80
 8001d62:	2140      	movs	r1, #64	@ 0x40
 8001d64:	2078      	movs	r0, #120	@ 0x78
 8001d66:	f000 f95d 	bl	8002024 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d9de      	bls.n	8001d34 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000390 	.word	0x20000390

08001d84 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <SSD1306_Fill+0x14>
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <SSD1306_Fill+0x16>
 8001d98:	23ff      	movs	r3, #255	@ 0xff
 8001d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <SSD1306_Fill+0x2c>)
 8001da2:	f005 fc42 	bl	800762a <memset>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000390 	.word	0x20000390

08001db4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	70fb      	strb	r3, [r7, #3]
	if (
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dca:	d848      	bhi.n	8001e5e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dd0:	d845      	bhi.n	8001e5e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <SSD1306_DrawPixel+0xb8>)
 8001dd4:	791b      	ldrb	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d11a      	bne.n	8001e24 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	b298      	uxth	r0, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	01db      	lsls	r3, r3, #7
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e70 <SSD1306_DrawPixel+0xbc>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b259      	sxtb	r1, r3
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	4603      	mov	r3, r0
 8001e18:	01db      	lsls	r3, r3, #7
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2c9      	uxtb	r1, r1
 8001e1e:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <SSD1306_DrawPixel+0xbc>)
 8001e20:	54d1      	strb	r1, [r2, r3]
 8001e22:	e01d      	b.n	8001e60 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e24:	88fa      	ldrh	r2, [r7, #6]
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	b298      	uxth	r0, r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	01db      	lsls	r3, r3, #7
 8001e30:	4413      	add	r3, r2
 8001e32:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <SSD1306_DrawPixel+0xbc>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	b25a      	sxtb	r2, r3
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b259      	sxtb	r1, r3
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	4603      	mov	r3, r0
 8001e52:	01db      	lsls	r3, r3, #7
 8001e54:	4413      	add	r3, r2
 8001e56:	b2c9      	uxtb	r1, r1
 8001e58:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <SSD1306_DrawPixel+0xbc>)
 8001e5a:	54d1      	strb	r1, [r2, r3]
 8001e5c:	e000      	b.n	8001e60 <SSD1306_DrawPixel+0xac>
		return;
 8001e5e:	bf00      	nop
	}
}
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000790 	.word	0x20000790
 8001e70:	20000390 	.word	0x20000390

08001e74 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	80fb      	strh	r3, [r7, #6]
 8001e80:	4613      	mov	r3, r2
 8001e82:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e84:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <SSD1306_GotoXY+0x28>)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <SSD1306_GotoXY+0x28>)
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	8053      	strh	r3, [r2, #2]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	20000790 	.word	0x20000790

08001ea0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eb0:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
	if (
 8001ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ebe:	dc07      	bgt.n	8001ed0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ec0:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ecc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ece:	dd01      	ble.n	8001ed4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e05d      	b.n	8001f90 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e04b      	b.n	8001f72 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	3b20      	subs	r3, #32
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	7849      	ldrb	r1, [r1, #1]
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	440b      	add	r3, r1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e030      	b.n	8001f60 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f1c:	885a      	ldrh	r2, [r3, #2]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	79ba      	ldrb	r2, [r7, #6]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7ff ff43 	bl	8001db4 <SSD1306_DrawPixel>
 8001f2e:	e014      	b.n	8001f5a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	b298      	uxth	r0, r3
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f3e:	885a      	ldrh	r2, [r3, #2]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	b299      	uxth	r1, r3
 8001f48:	79bb      	ldrb	r3, [r7, #6]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	f7ff ff2d 	bl	8001db4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d3c8      	bcc.n	8001efe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	461a      	mov	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d3ad      	bcc.n	8001eda <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <SSD1306_Putc+0xf8>)
 8001f8c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000790 	.word	0x20000790

08001f9c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001faa:	e012      	b.n	8001fd2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff73 	bl	8001ea0 <SSD1306_Putc>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d002      	beq.n	8001fcc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	e008      	b.n	8001fde <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e8      	bne.n	8001fac <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff feca 	bl	8001d84 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ff0:	f7ff fe9a 	bl	8001d28 <SSD1306_UpdateScreen>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <ssd1306_I2C_Init+0x28>)
 8002000:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002002:	e002      	b.n	800200a <ssd1306_I2C_Init+0x12>
		p--;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
	while(p>0)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	0003d090 	.word	0x0003d090

08002024 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b0c7      	sub	sp, #284	@ 0x11c
 8002028:	af02      	add	r7, sp, #8
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002032:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002036:	600a      	str	r2, [r1, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002042:	4622      	mov	r2, r4
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800204a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800204e:	4602      	mov	r2, r0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002056:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800205a:	460a      	mov	r2, r1
 800205c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800205e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002066:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800206a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002078:	e015      	b.n	80020a6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800207a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800207e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002082:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	441a      	add	r2, r3
 800208a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800208e:	3301      	adds	r3, #1
 8002090:	7811      	ldrb	r1, [r2, #0]
 8002092:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002096:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800209a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800209c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80020a0:	3301      	adds	r3, #1
 80020a2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80020a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80020b0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d8df      	bhi.n	800207a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80020ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020be:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b299      	uxth	r1, r3
 80020c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	200a      	movs	r0, #10
 80020da:	9000      	str	r0, [sp, #0]
 80020dc:	4803      	ldr	r0, [pc, #12]	@ (80020ec <ssd1306_I2C_WriteMulti+0xc8>)
 80020de:	f001 fbf9 	bl	80038d4 <HAL_I2C_Master_Transmit>
}
 80020e2:	bf00      	nop
 80020e4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	200002d8 	.word	0x200002d8

080020f0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	460b      	mov	r3, r1
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	4613      	mov	r3, r2
 8002100:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002106:	797b      	ldrb	r3, [r7, #5]
 8002108:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	b299      	uxth	r1, r3
 800210e:	f107 020c 	add.w	r2, r7, #12
 8002112:	230a      	movs	r3, #10
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2302      	movs	r3, #2
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <ssd1306_I2C_Write+0x38>)
 800211a:	f001 fbdb 	bl	80038d4 <HAL_I2C_Master_Transmit>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002d8 	.word	0x200002d8

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_MspInit+0x4c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <HAL_MspInit+0x4c>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002140:	6453      	str	r3, [r2, #68]	@ 0x44
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_MspInit+0x4c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_MspInit+0x4c>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_MspInit+0x4c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_MspInit+0x4c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 fbcf 	bl	8002974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}

080021da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M4_Encoder_B_Pin);
 80021de:	2001      	movs	r0, #1
 80021e0:	f001 f9e0 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_Encoder_A_Pin);
 80021ec:	2002      	movs	r0, #2
 80021ee:	f001 f9d9 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_Encoder_B_Pin);
 80021fa:	2004      	movs	r0, #4
 80021fc:	f001 f9d2 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_Encoder_A_Pin);
 8002208:	2008      	movs	r0, #8
 800220a:	f001 f9cb 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}

08002212 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_Encoder_B_Pin);
 8002216:	2010      	movs	r0, #16
 8002218:	f001 f9c4 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M3_Encoder_A_Pin);
 8002224:	2020      	movs	r0, #32
 8002226:	f001 f9bd 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M3_Encoder_B_Pin);
 800222a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800222e:	f001 f9b9 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <USART1_IRQHandler+0x10>)
 800223e:	f003 fc9f 	bl	8005b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000874 	.word	0x20000874

0800224c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M4_Encoder_A_Pin);
 8002250:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002254:	f001 f9a6 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M5_Encoder_A_Pin);
 8002258:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800225c:	f001 f9a2 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M5_Encoder_B_Pin);
 8002260:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002264:	f001 f99e 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M6_Encoder_A_Pin);
 8002268:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800226c:	f001 f99a 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M6_Encoder_B_Pin);
 8002270:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002274:	f001 f996 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8002278:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800227c:	f001 f992 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f005 fa1c 	bl	80076f0 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2001c000 	.word	0x2001c000
 80022e4:	00000400 	.word	0x00000400
 80022e8:	20000798 	.word	0x20000798
 80022ec:	20000a40 	.word	0x20000a40

080022f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <SystemInit+0x20>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <SystemInit+0x20>)
 80022fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b096      	sub	sp, #88	@ 0x58
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2220      	movs	r2, #32
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f005 f96c 	bl	800762a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002354:	4a44      	ldr	r2, [pc, #272]	@ (8002468 <MX_TIM1_Init+0x154>)
 8002356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8002358:	4b42      	ldr	r3, [pc, #264]	@ (8002464 <MX_TIM1_Init+0x150>)
 800235a:	2264      	movs	r2, #100	@ 0x64
 800235c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1680-1;
 8002364:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002366:	f240 628f 	movw	r2, #1679	@ 0x68f
 800236a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <MX_TIM1_Init+0x150>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002372:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <MX_TIM1_Init+0x150>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800237e:	4839      	ldr	r0, [pc, #228]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002380:	f002 fc2e 	bl	8004be0 <HAL_TIM_Base_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800238a:	f7ff fc03 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002392:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002394:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002398:	4619      	mov	r1, r3
 800239a:	4832      	ldr	r0, [pc, #200]	@ (8002464 <MX_TIM1_Init+0x150>)
 800239c:	f002 fee0 	bl	8005160 <HAL_TIM_ConfigClockSource>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023a6:	f7ff fbf5 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023aa:	482e      	ldr	r0, [pc, #184]	@ (8002464 <MX_TIM1_Init+0x150>)
 80023ac:	f002 fc67 	bl	8004c7e <HAL_TIM_PWM_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023b6:	f7ff fbed 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023c6:	4619      	mov	r1, r3
 80023c8:	4826      	ldr	r0, [pc, #152]	@ (8002464 <MX_TIM1_Init+0x150>)
 80023ca:	f003 faad 	bl	8005928 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80023d4:	f7ff fbde 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d8:	2360      	movs	r3, #96	@ 0x60
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e4:	2300      	movs	r3, #0
 80023e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4819      	ldr	r0, [pc, #100]	@ (8002464 <MX_TIM1_Init+0x150>)
 80023fe:	f002 fded 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002408:	f7ff fbc4 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800240c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002410:	220c      	movs	r2, #12
 8002412:	4619      	mov	r1, r3
 8002414:	4813      	ldr	r0, [pc, #76]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002416:	f002 fde1 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002420:	f7ff fbb8 	bl	8001b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4807      	ldr	r0, [pc, #28]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002448:	f003 faea 	bl	8005a20 <HAL_TIMEx_ConfigBreakDeadTime>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002452:	f7ff fb9f 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002456:	4803      	ldr	r0, [pc, #12]	@ (8002464 <MX_TIM1_Init+0x150>)
 8002458:	f000 f912 	bl	8002680 <HAL_TIM_MspPostInit>

}
 800245c:	bf00      	nop
 800245e:	3758      	adds	r7, #88	@ 0x58
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000079c 	.word	0x2000079c
 8002468:	40010000 	.word	0x40010000

0800246c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	@ 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800249c:	4b3d      	ldr	r3, [pc, #244]	@ (8002594 <MX_TIM3_Init+0x128>)
 800249e:	4a3e      	ldr	r2, [pc, #248]	@ (8002598 <MX_TIM3_Init+0x12c>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024a4:	2264      	movs	r2, #100	@ 0x64
 80024a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1680-1;
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024b0:	f240 628f 	movw	r2, #1679	@ 0x68f
 80024b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c2:	4834      	ldr	r0, [pc, #208]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024c4:	f002 fb8c 	bl	8004be0 <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024ce:	f7ff fb61 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024dc:	4619      	mov	r1, r3
 80024de:	482d      	ldr	r0, [pc, #180]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024e0:	f002 fe3e 	bl	8005160 <HAL_TIM_ConfigClockSource>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80024ea:	f7ff fb53 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ee:	4829      	ldr	r0, [pc, #164]	@ (8002594 <MX_TIM3_Init+0x128>)
 80024f0:	f002 fbc5 	bl	8004c7e <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80024fa:	f7ff fb4b 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002506:	f107 0320 	add.w	r3, r7, #32
 800250a:	4619      	mov	r1, r3
 800250c:	4821      	ldr	r0, [pc, #132]	@ (8002594 <MX_TIM3_Init+0x128>)
 800250e:	f003 fa0b 	bl	8005928 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002518:	f7ff fb3c 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	@ 0x60
 800251e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	4818      	ldr	r0, [pc, #96]	@ (8002594 <MX_TIM3_Init+0x128>)
 8002534:	f002 fd52 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800253e:	f7ff fb29 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2204      	movs	r2, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4812      	ldr	r0, [pc, #72]	@ (8002594 <MX_TIM3_Init+0x128>)
 800254a:	f002 fd47 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002554:	f7ff fb1e 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2208      	movs	r2, #8
 800255c:	4619      	mov	r1, r3
 800255e:	480d      	ldr	r0, [pc, #52]	@ (8002594 <MX_TIM3_Init+0x128>)
 8002560:	f002 fd3c 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800256a:	f7ff fb13 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	220c      	movs	r2, #12
 8002572:	4619      	mov	r1, r3
 8002574:	4807      	ldr	r0, [pc, #28]	@ (8002594 <MX_TIM3_Init+0x128>)
 8002576:	f002 fd31 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002580:	f7ff fb08 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002584:	4803      	ldr	r0, [pc, #12]	@ (8002594 <MX_TIM3_Init+0x128>)
 8002586:	f000 f87b 	bl	8002680 <HAL_TIM_MspPostInit>

}
 800258a:	bf00      	nop
 800258c:	3738      	adds	r7, #56	@ 0x38
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200007e4 	.word	0x200007e4
 8002598:	40000400 	.word	0x40000400

0800259c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <MX_TIM14_Init+0x44>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025a8:	22a7      	movs	r2, #167	@ 0xa7
 80025aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	@ (80025dc <MX_TIM14_Init+0x40>)
 80025c8:	f002 fb0a 	bl	8004be0 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80025d2:	f7ff fadf 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000082c 	.word	0x2000082c
 80025e0:	40002000 	.word	0x40002000

080025e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_TIM_Base_MspInit+0x8c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002612:	e026      	b.n	8002662 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <HAL_TIM_Base_MspInit+0x94>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6413      	str	r3, [r2, #64]	@ 0x40
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	e012      	b.n	8002662 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <HAL_TIM_Base_MspInit+0x98>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	4a09      	ldr	r2, [pc, #36]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_TIM_Base_MspInit+0x90>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	40023800 	.word	0x40023800
 8002678:	40000400 	.word	0x40000400
 800267c:	40002000 	.word	0x40002000

08002680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_TIM_MspPostInit+0xf0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d11f      	bne.n	80026e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a32      	ldr	r2, [pc, #200]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b30      	ldr	r3, [pc, #192]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80026be:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4827      	ldr	r0, [pc, #156]	@ (8002778 <HAL_TIM_MspPostInit+0xf8>)
 80026dc:	f000 fd94 	bl	8003208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e0:	e041      	b.n	8002766 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a25      	ldr	r2, [pc, #148]	@ (800277c <HAL_TIM_MspPostInit+0xfc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d13c      	bne.n	8002766 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6313      	str	r3, [r2, #48]	@ 0x30
 8002718:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <HAL_TIM_MspPostInit+0xf4>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002724:	2302      	movs	r3, #2
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002734:	2302      	movs	r3, #2
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4810      	ldr	r0, [pc, #64]	@ (8002780 <HAL_TIM_MspPostInit+0x100>)
 8002740:	f000 fd62 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002744:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002756:	2302      	movs	r3, #2
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4808      	ldr	r0, [pc, #32]	@ (8002784 <HAL_TIM_MspPostInit+0x104>)
 8002762:	f000 fd51 	bl	8003208 <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	@ 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40010000 	.word	0x40010000
 8002774:	40023800 	.word	0x40023800
 8002778:	40020000 	.word	0x40020000
 800277c:	40000400 	.word	0x40000400
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800

08002788 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <MX_USART1_UART_Init+0x50>)
 8002790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 8002794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <MX_USART1_UART_Init+0x4c>)
 80027c0:	f003 f980 	bl	8005ac4 <HAL_UART_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027ca:	f7ff f9e3 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000874 	.word	0x20000874
 80027d8:	40011000 	.word	0x40011000

080027dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_UART_MspInit+0x94>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d134      	bne.n	8002868 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_UART_MspInit+0x98>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_UART_MspInit+0x98>)
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_UART_MspInit+0x98>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_UART_MspInit+0x98>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a14      	ldr	r2, [pc, #80]	@ (8002874 <HAL_UART_MspInit+0x98>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_UART_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002848:	2307      	movs	r3, #7
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <HAL_UART_MspInit+0x9c>)
 8002854:	f000 fcd8 	bl	8003208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2100      	movs	r1, #0
 800285c:	2025      	movs	r0, #37	@ 0x25
 800285e:	f000 fc0a 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002862:	2025      	movs	r0, #37	@ 0x25
 8002864:	f000 fc23 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40011000 	.word	0x40011000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000

0800287c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800287c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002880:	f7ff fd36 	bl	80022f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002886:	490d      	ldr	r1, [pc, #52]	@ (80028bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800289c:	4c0a      	ldr	r4, [pc, #40]	@ (80028c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f004 ff27 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ae:	f7fe fe57 	bl	8001560 <main>
  bx  lr    
 80028b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028b4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80028c0:	0800ac58 	.word	0x0800ac58
  ldr r2, =_sbss
 80028c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80028c8:	20000a3c 	.word	0x20000a3c

080028cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC_IRQHandler>
	...

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_Init+0x40>)
 80028da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_Init+0x40>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002910 <HAL_Init+0x40>)
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ec:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a07      	ldr	r2, [pc, #28]	@ (8002910 <HAL_Init+0x40>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f000 fbb1 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fe:	200f      	movs	r0, #15
 8002900:	f000 f808 	bl	8002914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002904:	f7ff fc12 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800291c:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <HAL_InitTick+0x54>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_InitTick+0x58>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
 8002926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292a:	fbb3 f3f1 	udiv	r3, r3, r1
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fbc9 	bl	80030ca <HAL_SYSTICK_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e00e      	b.n	8002960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0f      	cmp	r3, #15
 8002946:	d80a      	bhi.n	800295e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002948:	2200      	movs	r2, #0
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f000 fb91 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002954:	4a06      	ldr	r2, [pc, #24]	@ (8002970 <HAL_InitTick+0x5c>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000010 	.word	0x20000010
 800296c:	20000018 	.word	0x20000018
 8002970:	20000014 	.word	0x20000014

08002974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_IncTick+0x20>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_IncTick+0x24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_IncTick+0x24>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000018 	.word	0x20000018
 8002998:	200008ec 	.word	0x200008ec

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200008ec 	.word	0x200008ec

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d005      	beq.n	80029da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_Delay+0x44>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029da:	bf00      	nop
 80029dc:	f7ff ffde 	bl	800299c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d8f7      	bhi.n	80029dc <HAL_Delay+0x28>
  {
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000018 	.word	0x20000018

080029fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e033      	b.n	8002a7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fb32 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a42:	f023 0302 	bic.w	r3, r3, #2
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f93a 	bl	8002cc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a6a:	e001      	b.n	8002a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e105      	b.n	8002cac <HAL_ADC_ConfigChannel+0x228>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d925      	bls.n	8002afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68d9      	ldr	r1, [r3, #12]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1e      	subs	r3, #30
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4403      	add	r3, r0
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	409a      	lsls	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e022      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	2207      	movs	r2, #7
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4403      	add	r3, r0
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d824      	bhi.n	8002b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b05      	subs	r3, #5
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b05      	subs	r3, #5
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b92:	e04c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d824      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b23      	subs	r3, #35	@ 0x23
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	400a      	ands	r2, r1
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b23      	subs	r3, #35	@ 0x23
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be4:	e023      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b41      	subs	r3, #65	@ 0x41
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	400a      	ands	r2, r1
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b41      	subs	r3, #65	@ 0x41
 8002c22:	fa00 f203 	lsl.w	r2, r0, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x234>)
 8002c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <HAL_ADC_ConfigChannel+0x238>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1cc>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d105      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <HAL_ADC_ConfigChannel+0x238>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d123      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x21e>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d003      	beq.n	8002c6a <HAL_ADC_ConfigChannel+0x1e6>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b11      	cmp	r3, #17
 8002c68:	d11b      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d111      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x23c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x240>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9a      	lsrs	r2, r3, #18
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40012300 	.word	0x40012300
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	431bde83 	.word	0x431bde83

08002cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd0:	4b79      	ldr	r3, [pc, #484]	@ (8002eb8 <ADC_Init+0x1f0>)
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	4a58      	ldr	r2, [pc, #352]	@ (8002ebc <ADC_Init+0x1f4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e00f      	b.n	8002dc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0202 	bic.w	r2, r2, #2
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
 8002de0:	005a      	lsls	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	035a      	lsls	r2, r3, #13
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e007      	b.n	8002e3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	051a      	lsls	r2, r3, #20
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e7e:	025a      	lsls	r2, r3, #9
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	029a      	lsls	r2, r3, #10
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40012300 	.word	0x40012300
 8002ebc:	0f000001 	.word	0x0f000001

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	@ (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	@ (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fc54 	bl	800299c <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d008      	beq.n	8003114 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e052      	b.n	80031ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0216 	bic.w	r2, r2, #22
 8003122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003132:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_DMA_Abort+0x62>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0208 	bic.w	r2, r2, #8
 8003152:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003164:	e013      	b.n	800318e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7ff fc19 	bl	800299c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b05      	cmp	r3, #5
 8003172:	d90c      	bls.n	800318e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e015      	b.n	80031ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e4      	bne.n	8003166 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	223f      	movs	r2, #63	@ 0x3f
 80031a2:	409a      	lsls	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2280      	movs	r2, #128	@ 0x80
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00c      	b.n	80031fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2205      	movs	r2, #5
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	@ 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e16b      	b.n	80034fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	f040 815a 	bne.w	80034f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d005      	beq.n	800325a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003256:	2b02      	cmp	r3, #2
 8003258:	d130      	bne.n	80032bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0201 	and.w	r2, r3, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d017      	beq.n	80032f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d123      	bne.n	800334c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80b4 	beq.w	80034f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <HAL_GPIO_Init+0x30c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	4a5f      	ldr	r2, [pc, #380]	@ (8003514 <HAL_GPIO_Init+0x30c>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339c:	6453      	str	r3, [r2, #68]	@ 0x44
 800339e:	4b5d      	ldr	r3, [pc, #372]	@ (8003514 <HAL_GPIO_Init+0x30c>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003518 <HAL_GPIO_Init+0x310>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_GPIO_Init+0x314>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <HAL_GPIO_Init+0x226>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	@ (8003520 <HAL_GPIO_Init+0x318>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d025      	beq.n	800342a <HAL_GPIO_Init+0x222>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	@ (8003524 <HAL_GPIO_Init+0x31c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <HAL_GPIO_Init+0x21e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003528 <HAL_GPIO_Init+0x320>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x21a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	@ (800352c <HAL_GPIO_Init+0x324>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x216>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003530 <HAL_GPIO_Init+0x328>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x212>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <HAL_GPIO_Init+0x32c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x20e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4b      	ldr	r2, [pc, #300]	@ (8003538 <HAL_GPIO_Init+0x330>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x20a>
 800340e:	2307      	movs	r3, #7
 8003410:	e00e      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003412:	2308      	movs	r3, #8
 8003414:	e00c      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003416:	2306      	movs	r3, #6
 8003418:	e00a      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800341a:	2305      	movs	r3, #5
 800341c:	e008      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800341e:	2304      	movs	r3, #4
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003422:	2303      	movs	r3, #3
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x228>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x228>
 800342e:	2300      	movs	r3, #0
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f002 0203 	and.w	r2, r2, #3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003440:	4935      	ldr	r1, [pc, #212]	@ (8003518 <HAL_GPIO_Init+0x310>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_GPIO_Init+0x334>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003472:	4a32      	ldr	r2, [pc, #200]	@ (800353c <HAL_GPIO_Init+0x334>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003478:	4b30      	ldr	r3, [pc, #192]	@ (800353c <HAL_GPIO_Init+0x334>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800349c:	4a27      	ldr	r2, [pc, #156]	@ (800353c <HAL_GPIO_Init+0x334>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034a2:	4b26      	ldr	r3, [pc, #152]	@ (800353c <HAL_GPIO_Init+0x334>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c6:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_GPIO_Init+0x334>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_GPIO_Init+0x334>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f0:	4a12      	ldr	r2, [pc, #72]	@ (800353c <HAL_GPIO_Init+0x334>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f ae90 	bls.w	8003224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40013800 	.word	0x40013800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40021400 	.word	0x40021400
 8003534:	40021800 	.word	0x40021800
 8003538:	40021c00 	.word	0x40021c00
 800353c:	40013c00 	.word	0x40013c00

08003540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	e001      	b.n	8003562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800358c:	e003      	b.n	8003596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	619a      	str	r2, [r3, #24]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ba:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fa8c 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40013c00 	.word	0x40013c00

080035d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e171      	b.n	80038ca <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d12c      	bne.n	800364c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a77      	ldr	r2, [pc, #476]	@ (80037dc <HAL_I2C_Init+0x208>)
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a77      	ldr	r2, [pc, #476]	@ (80037e0 <HAL_I2C_Init+0x20c>)
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a76      	ldr	r2, [pc, #472]	@ (80037e4 <HAL_I2C_Init+0x210>)
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a76      	ldr	r2, [pc, #472]	@ (80037e8 <HAL_I2C_Init+0x214>)
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a75      	ldr	r2, [pc, #468]	@ (80037ec <HAL_I2C_Init+0x218>)
 8003616:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a75      	ldr	r2, [pc, #468]	@ (80037f0 <HAL_I2C_Init+0x21c>)
 800361c:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a74      	ldr	r2, [pc, #464]	@ (80037f4 <HAL_I2C_Init+0x220>)
 8003622:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a74      	ldr	r2, [pc, #464]	@ (80037f8 <HAL_I2C_Init+0x224>)
 8003628:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a73      	ldr	r2, [pc, #460]	@ (80037fc <HAL_I2C_Init+0x228>)
 800362e:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a73      	ldr	r2, [pc, #460]	@ (8003800 <HAL_I2C_Init+0x22c>)
 8003634:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a70      	ldr	r2, [pc, #448]	@ (8003804 <HAL_I2C_Init+0x230>)
 8003642:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003684:	f001 fa84 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a5e      	ldr	r2, [pc, #376]	@ (8003808 <HAL_I2C_Init+0x234>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d807      	bhi.n	80036a4 <HAL_I2C_Init+0xd0>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a5d      	ldr	r2, [pc, #372]	@ (800380c <HAL_I2C_Init+0x238>)
 8003698:	4293      	cmp	r3, r2
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e006      	b.n	80036b2 <HAL_I2C_Init+0xde>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003810 <HAL_I2C_Init+0x23c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e107      	b.n	80038ca <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a55      	ldr	r2, [pc, #340]	@ (8003814 <HAL_I2C_Init+0x240>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a47      	ldr	r2, [pc, #284]	@ (8003808 <HAL_I2C_Init+0x234>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d802      	bhi.n	80036f4 <HAL_I2C_Init+0x120>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	e009      	b.n	8003708 <HAL_I2C_Init+0x134>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	4a46      	ldr	r2, [pc, #280]	@ (8003818 <HAL_I2C_Init+0x244>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	3301      	adds	r3, #1
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	430b      	orrs	r3, r1
 800370e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800371a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4939      	ldr	r1, [pc, #228]	@ (8003808 <HAL_I2C_Init+0x234>)
 8003724:	428b      	cmp	r3, r1
 8003726:	d819      	bhi.n	800375c <HAL_I2C_Init+0x188>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e59      	subs	r1, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fbb1 f3f3 	udiv	r3, r1, r3
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800373c:	400b      	ands	r3, r1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_I2C_Init+0x184>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e59      	subs	r1, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003756:	e071      	b.n	800383c <HAL_I2C_Init+0x268>
 8003758:	2304      	movs	r3, #4
 800375a:	e06f      	b.n	800383c <HAL_I2C_Init+0x268>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <HAL_I2C_Init+0x1b4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e58      	subs	r0, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e012      	b.n	80037ae <HAL_I2C_Init+0x1da>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	0099      	lsls	r1, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Init+0x1e2>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e042      	b.n	800383c <HAL_I2C_Init+0x268>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d12e      	bne.n	800381c <HAL_I2C_Init+0x248>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1e58      	subs	r0, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	440b      	add	r3, r1
 80037cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037da:	e02f      	b.n	800383c <HAL_I2C_Init+0x268>
 80037dc:	08003d2d 	.word	0x08003d2d
 80037e0:	08003d41 	.word	0x08003d41
 80037e4:	08003d55 	.word	0x08003d55
 80037e8:	08003d69 	.word	0x08003d69
 80037ec:	08003d99 	.word	0x08003d99
 80037f0:	08003dad 	.word	0x08003dad
 80037f4:	08003dc1 	.word	0x08003dc1
 80037f8:	08003dd5 	.word	0x08003dd5
 80037fc:	08003de9 	.word	0x08003de9
 8003800:	08003d7d 	.word	0x08003d7d
 8003804:	080014d1 	.word	0x080014d1
 8003808:	000186a0 	.word	0x000186a0
 800380c:	001e847f 	.word	0x001e847f
 8003810:	003d08ff 	.word	0x003d08ff
 8003814:	431bde83 	.word	0x431bde83
 8003818:	10624dd3 	.word	0x10624dd3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	6809      	ldr	r1, [r1, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800386a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6911      	ldr	r1, [r2, #16]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	4311      	orrs	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop

080038d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	461a      	mov	r2, r3
 80038e0:	460b      	mov	r3, r1
 80038e2:	817b      	strh	r3, [r7, #10]
 80038e4:	4613      	mov	r3, r2
 80038e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff f858 	bl	800299c <HAL_GetTick>
 80038ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	f040 80e0 	bne.w	8003abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2319      	movs	r3, #25
 8003902:	2201      	movs	r2, #1
 8003904:	4970      	ldr	r1, [pc, #448]	@ (8003ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fafa 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
 8003914:	e0d3      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2C_Master_Transmit+0x50>
 8003920:	2302      	movs	r3, #2
 8003922:	e0cc      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d007      	beq.n	800394a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2221      	movs	r2, #33	@ 0x21
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2210      	movs	r2, #16
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	893a      	ldrh	r2, [r7, #8]
 800397a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a50      	ldr	r2, [pc, #320]	@ (8003acc <HAL_I2C_Master_Transmit+0x1f8>)
 800398a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa32 	bl	8003dfc <I2C_MasterRequestWrite>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e08d      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039b8:	e066      	b.n	8003a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6a39      	ldr	r1, [r7, #32]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fbb8 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d107      	bne.n	80039e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06b      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d11b      	bne.n	8003a5c <HAL_I2C_Master_Transmit+0x188>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d017      	beq.n	8003a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fbaf 	bl	80041c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d107      	bne.n	8003a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e01a      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d194      	bne.n	80039ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000

08003ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	460b      	mov	r3, r1
 8003ade:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7fe ff5c 	bl	800299c <HAL_GetTick>
 8003ae4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	f040 8111 	bne.w	8003d1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2319      	movs	r3, #25
 8003afe:	2201      	movs	r2, #1
 8003b00:	4988      	ldr	r1, [pc, #544]	@ (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f9fc 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e104      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2C_IsDeviceReady+0x50>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0fd      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d007      	beq.n	8003b46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2224      	movs	r2, #36	@ 0x24
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a70      	ldr	r2, [pc, #448]	@ (8003d28 <HAL_I2C_IsDeviceReady+0x258>)
 8003b68:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f9ba 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba0:	d103      	bne.n	8003baa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0b6      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe feed 	bl	800299c <HAL_GetTick>
 8003bc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bf2:	e025      	b.n	8003c40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe fed2 	bl	800299c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <HAL_I2C_IsDeviceReady+0x13a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22a0      	movs	r2, #160	@ 0xa0
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c4a:	d005      	beq.n	8003c58 <HAL_I2C_IsDeviceReady+0x188>
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <HAL_I2C_IsDeviceReady+0x188>
 8003c52:	7dbb      	ldrb	r3, [r7, #22]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0cd      	beq.n	8003bf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d129      	bne.n	8003cc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4921      	ldr	r1, [pc, #132]	@ (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f92e 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e036      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e02c      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2319      	movs	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	490f      	ldr	r1, [pc, #60]	@ (8003d24 <HAL_I2C_IsDeviceReady+0x254>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f90a 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e012      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f4ff af32 	bcc.w	8003b6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d006      	beq.n	8003e26 <I2C_MasterRequestWrite+0x2a>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d003      	beq.n	8003e26 <I2C_MasterRequestWrite+0x2a>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e24:	d108      	bne.n	8003e38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e00b      	b.n	8003e50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3c:	2b12      	cmp	r3, #18
 8003e3e:	d107      	bne.n	8003e50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f84f 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	d103      	bne.n	8003e80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e035      	b.n	8003ef0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e8c:	d108      	bne.n	8003ea0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]
 8003e9e:	e01b      	b.n	8003ed8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ea0:	897b      	ldrh	r3, [r7, #10]
 8003ea2:	11db      	asrs	r3, r3, #7
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 0306 	and.w	r3, r3, #6
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f063 030f 	orn	r3, r3, #15
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	490e      	ldr	r1, [pc, #56]	@ (8003ef8 <I2C_MasterRequestWrite+0xfc>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f898 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e010      	b.n	8003ef0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4907      	ldr	r1, [pc, #28]	@ (8003efc <I2C_MasterRequestWrite+0x100>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f888 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	00010008 	.word	0x00010008
 8003efc:	00010002 	.word	0x00010002

08003f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f10:	e048      	b.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d044      	beq.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fe fd3f 	bl	800299c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d139      	bne.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	0c1b      	lsrs	r3, r3, #16
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10d      	bne.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	e00c      	b.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d116      	bne.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e023      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10d      	bne.n	8003fca <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	e00c      	b.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d093      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004002:	e071      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004012:	d123      	bne.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004022:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800402c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e067      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d041      	beq.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fe fc9a 	bl	800299c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d136      	bne.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10c      	bne.n	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e00b      	b.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e021      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10c      	bne.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e00b      	b.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f af6d 	bne.w	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004140:	e034      	b.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f886 	bl	8004254 <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e034      	b.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d028      	beq.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fc1f 	bl	800299c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d016      	beq.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b6:	2b80      	cmp	r3, #128	@ 0x80
 80041b8:	d1c3      	bne.n	8004142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	e034      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f83e 	bl	8004254 <I2C_IsAcknowledgeFailed>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e034      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d028      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ea:	f7fe fbd7 	bl	800299c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11d      	bne.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d016      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d1c3      	bne.n	80041d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426a:	d11b      	bne.n	80042a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e267      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d075      	beq.n	80043be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d2:	4b88      	ldr	r3, [pc, #544]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b85      	ldr	r3, [pc, #532]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d112      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b82      	ldr	r3, [pc, #520]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f6:	d10b      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	4b7e      	ldr	r3, [pc, #504]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d05b      	beq.n	80043bc <HAL_RCC_OscConfig+0x108>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d157      	bne.n	80043bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e242      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x74>
 800431a:	4b76      	ldr	r3, [pc, #472]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a75      	ldr	r2, [pc, #468]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e01d      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b70      	ldr	r3, [pc, #448]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6f      	ldr	r2, [pc, #444]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b6d      	ldr	r3, [pc, #436]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6c      	ldr	r2, [pc, #432]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 800434c:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a68      	ldr	r2, [pc, #416]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b66      	ldr	r3, [pc, #408]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe fb16 	bl	800299c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe fb12 	bl	800299c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e207      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b5b      	ldr	r3, [pc, #364]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0xc0>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fb02 	bl	800299c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe fafe 	bl	800299c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1f3      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0xe8>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d063      	beq.n	8004492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ca:	4b4a      	ldr	r3, [pc, #296]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b47      	ldr	r3, [pc, #284]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b44      	ldr	r3, [pc, #272]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1c7      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4937      	ldr	r1, [pc, #220]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b34      	ldr	r3, [pc, #208]	@ (80044f8 <HAL_RCC_OscConfig+0x244>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe fab7 	bl	800299c <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fe fab3 	bl	800299c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1a8      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b28      	ldr	r3, [pc, #160]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4925      	ldr	r1, [pc, #148]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b24      	ldr	r3, [pc, #144]	@ (80044f8 <HAL_RCC_OscConfig+0x244>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe fa96 	bl	800299c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe fa92 	bl	800299c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e187      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d036      	beq.n	800450c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <HAL_RCC_OscConfig+0x248>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe fa76 	bl	800299c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fe fa72 	bl	800299c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e167      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x200>
 80044d2:	e01b      	b.n	800450c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <HAL_RCC_OscConfig+0x248>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044da:	f7fe fa5f 	bl	800299c <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	e00e      	b.n	8004500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe fa5b 	bl	800299c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d907      	bls.n	8004500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e150      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	42470000 	.word	0x42470000
 80044fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004500:	4b88      	ldr	r3, [pc, #544]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ea      	bne.n	80044e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8097 	beq.w	8004648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b81      	ldr	r3, [pc, #516]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b7d      	ldr	r3, [pc, #500]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	4a7c      	ldr	r2, [pc, #496]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	@ 0x40
 800453a:	4b7a      	ldr	r3, [pc, #488]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b77      	ldr	r3, [pc, #476]	@ (8004728 <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b74      	ldr	r3, [pc, #464]	@ (8004728 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a73      	ldr	r2, [pc, #460]	@ (8004728 <HAL_RCC_OscConfig+0x474>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fe fa1b 	bl	800299c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fe fa17 	bl	800299c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e10c      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <HAL_RCC_OscConfig+0x474>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x2ea>
 8004590:	4b64      	ldr	r3, [pc, #400]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	4a63      	ldr	r2, [pc, #396]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	@ 0x70
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x324>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x30c>
 80045a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x324>
 80045c0:	4b58      	ldr	r3, [pc, #352]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	4a57      	ldr	r2, [pc, #348]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80045cc:	4b55      	ldr	r3, [pc, #340]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a54      	ldr	r2, [pc, #336]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe f9dc 	bl	800299c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe f9d8 	bl	800299c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0cb      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b49      	ldr	r3, [pc, #292]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x334>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe f9c6 	bl	800299c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe f9c2 	bl	800299c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0b5      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	4b3e      	ldr	r3, [pc, #248]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ee      	bne.n	8004614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b39      	ldr	r3, [pc, #228]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	4a38      	ldr	r2, [pc, #224]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004646:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80a1 	beq.w	8004794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004652:	4b34      	ldr	r3, [pc, #208]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b08      	cmp	r3, #8
 800465c:	d05c      	beq.n	8004718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d141      	bne.n	80046ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b31      	ldr	r3, [pc, #196]	@ (800472c <HAL_RCC_OscConfig+0x478>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe f996 	bl	800299c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe f992 	bl	800299c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e087      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	491b      	ldr	r1, [pc, #108]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046bc:	4b1b      	ldr	r3, [pc, #108]	@ (800472c <HAL_RCC_OscConfig+0x478>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe f96b 	bl	800299c <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fe f967 	bl	800299c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e05c      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x416>
 80046e8:	e054      	b.n	8004794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ea:	4b10      	ldr	r3, [pc, #64]	@ (800472c <HAL_RCC_OscConfig+0x478>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe f954 	bl	800299c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe f950 	bl	800299c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e045      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCC_OscConfig+0x470>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x444>
 8004716:	e03d      	b.n	8004794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e038      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
 8004724:	40023800 	.word	0x40023800
 8004728:	40007000 	.word	0x40007000
 800472c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004730:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d028      	beq.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d121      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11a      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004768:	4293      	cmp	r3, r2
 800476a:	d111      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	3b01      	subs	r3, #1
 800477a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cc      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b68      	ldr	r3, [pc, #416]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90c      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b65      	ldr	r3, [pc, #404]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a58      	ldr	r2, [pc, #352]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800481a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d119      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b3f      	ldr	r3, [pc, #252]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3b      	ldr	r3, [pc, #236]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e067      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b37      	ldr	r3, [pc, #220]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4934      	ldr	r1, [pc, #208]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fe f882 	bl	800299c <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe f87e 	bl	800299c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b25      	ldr	r3, [pc, #148]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd ffe2 	bl	8002914 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00
 8004960:	40023800 	.word	0x40023800
 8004964:	0800a8bc 	.word	0x0800a8bc
 8004968:	20000010 	.word	0x20000010
 800496c:	20000014 	.word	0x20000014

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004974:	b094      	sub	sp, #80	@ 0x50
 8004976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	647b      	str	r3, [r7, #68]	@ 0x44
 800497c:	2300      	movs	r3, #0
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004980:	2300      	movs	r3, #0
 8004982:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004988:	4b79      	ldr	r3, [pc, #484]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d00d      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004994:	2b08      	cmp	r3, #8
 8004996:	f200 80e1 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x34>
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x3a>
 80049a2:	e0db      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b73      	ldr	r3, [pc, #460]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049a8:	e0db      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049aa:	4b72      	ldr	r3, [pc, #456]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ae:	e0d8      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	2200      	movs	r2, #0
 80049ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049da:	2300      	movs	r3, #0
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	f04f 0000 	mov.w	r0, #0
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	0159      	lsls	r1, r3, #5
 80049f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f4:	0150      	lsls	r0, r2, #5
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4621      	mov	r1, r4
 80049fc:	1a51      	subs	r1, r2, r1
 80049fe:	6139      	str	r1, [r7, #16]
 8004a00:	4629      	mov	r1, r5
 8004a02:	eb63 0301 	sbc.w	r3, r3, r1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a14:	4659      	mov	r1, fp
 8004a16:	018b      	lsls	r3, r1, #6
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1e:	4651      	mov	r1, sl
 8004a20:	018a      	lsls	r2, r1, #6
 8004a22:	4651      	mov	r1, sl
 8004a24:	ebb2 0801 	subs.w	r8, r2, r1
 8004a28:	4659      	mov	r1, fp
 8004a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a42:	4690      	mov	r8, r2
 8004a44:	4699      	mov	r9, r3
 8004a46:	4623      	mov	r3, r4
 8004a48:	eb18 0303 	adds.w	r3, r8, r3
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	462b      	mov	r3, r5
 8004a50:	eb49 0303 	adc.w	r3, r9, r3
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a62:	4629      	mov	r1, r5
 8004a64:	028b      	lsls	r3, r1, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	028a      	lsls	r2, r1, #10
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a76:	2200      	movs	r2, #0
 8004a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a80:	f7fc f892 	bl	8000ba8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8c:	e058      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b38      	ldr	r3, [pc, #224]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	2200      	movs	r2, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	4611      	mov	r1, r2
 8004a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	0159      	lsls	r1, r3, #5
 8004ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aba:	0150      	lsls	r0, r2, #5
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	00eb      	lsls	r3, r5, #3
 8004af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af6:	00e2      	lsls	r2, r4, #3
 8004af8:	4614      	mov	r4, r2
 8004afa:	461d      	mov	r5, r3
 8004afc:	4643      	mov	r3, r8
 8004afe:	18e3      	adds	r3, r4, r3
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb45 0303 	adc.w	r3, r5, r3
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	61fa      	str	r2, [r7, #28]
 8004b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b34:	f7fc f838 	bl	8000ba8 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3750      	adds	r7, #80	@ 0x50
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000010 	.word	0x20000010

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800a8cc 	.word	0x0800a8cc

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff ffdc 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800a8cc 	.word	0x0800a8cc

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fcec 	bl	80025e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fb66 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e041      	b.n	8004d14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f839 	bl	8004d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 fb17 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x24>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e022      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d109      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x3e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e015      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start+0x58>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e008      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07c      	b.n	8004e9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x82>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db0:	e013      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x92>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc0:	e00b      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xa2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd0:	e003      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd7a 	bl	80058dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea4 <HAL_TIM_PWM_Start+0x174>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_PWM_Start+0xcc>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <HAL_TIM_PWM_Start+0x178>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_PWM_Start+0xd0>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_TIM_PWM_Start+0xd2>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <HAL_TIM_PWM_Start+0x174>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eac <HAL_TIM_PWM_Start+0x17c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <HAL_TIM_PWM_Start+0x180>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <HAL_TIM_PWM_Start+0x184>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a16      	ldr	r2, [pc, #88]	@ (8004ea8 <HAL_TIM_PWM_Start+0x178>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	@ (8004eb8 <HAL_TIM_PWM_Start+0x188>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <HAL_TIM_PWM_Start+0x18c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d111      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d010      	beq.n	8004e9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e007      	b.n	8004e9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800

08004ec0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ed0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ed8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ee8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d102      	bne.n	8004efc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ef6:	7b7b      	ldrb	r3, [r7, #13]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e069      	b.n	8004fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f10:	e031      	b.n	8004f76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d110      	bne.n	8004f3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d102      	bne.n	8004f24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f1e:	7b3b      	ldrb	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d001      	beq.n	8004f28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e055      	b.n	8004fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f38:	e01d      	b.n	8004f76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d108      	bne.n	8004f52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d105      	bne.n	8004f52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f46:	7b7b      	ldrb	r3, [r7, #13]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d102      	bne.n	8004f52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f4c:	7b3b      	ldrb	r3, [r7, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d001      	beq.n	8004f56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e03e      	b.n	8004fd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0xc4>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d008      	beq.n	8004f94 <HAL_TIM_Encoder_Start+0xd4>
 8004f82:	e00f      	b.n	8004fa4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fca5 	bl	80058dc <TIM_CCxChannelCmd>
      break;
 8004f92:	e016      	b.n	8004fc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2104      	movs	r1, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fc9d 	bl	80058dc <TIM_CCxChannelCmd>
      break;
 8004fa2:	e00e      	b.n	8004fc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fc95 	bl	80058dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2104      	movs	r1, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fc8e 	bl	80058dc <TIM_CCxChannelCmd>
      break;
 8004fc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0ae      	b.n	8005158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f200 809f 	bhi.w	8005148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005045 	.word	0x08005045
 8005014:	08005149 	.word	0x08005149
 8005018:	08005149 	.word	0x08005149
 800501c:	08005149 	.word	0x08005149
 8005020:	08005085 	.word	0x08005085
 8005024:	08005149 	.word	0x08005149
 8005028:	08005149 	.word	0x08005149
 800502c:	08005149 	.word	0x08005149
 8005030:	080050c7 	.word	0x080050c7
 8005034:	08005149 	.word	0x08005149
 8005038:	08005149 	.word	0x08005149
 800503c:	08005149 	.word	0x08005149
 8005040:	08005107 	.word	0x08005107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9fc 	bl	8005448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e064      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa4c 	bl	8005528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e043      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 faa1 	bl	8005614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e023      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 faf5 	bl	80056fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e002      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0b4      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x186>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800519a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b4:	d03e      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0xd4>
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ba:	f200 8087 	bhi.w	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c2:	f000 8086 	beq.w	80052d2 <HAL_TIM_ConfigClockSource+0x172>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ca:	d87f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b70      	cmp	r3, #112	@ 0x70
 80051ce:	d01a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xa6>
 80051d0:	2b70      	cmp	r3, #112	@ 0x70
 80051d2:	d87b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b60      	cmp	r3, #96	@ 0x60
 80051d6:	d050      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x11a>
 80051d8:	2b60      	cmp	r3, #96	@ 0x60
 80051da:	d877      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b50      	cmp	r3, #80	@ 0x50
 80051de:	d03c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xfa>
 80051e0:	2b50      	cmp	r3, #80	@ 0x50
 80051e2:	d873      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	d058      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x13a>
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d86f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b30      	cmp	r3, #48	@ 0x30
 80051ee:	d064      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b30      	cmp	r3, #48	@ 0x30
 80051f2:	d86b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d060      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d867      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d05a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	e062      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005216:	f000 fb41 	bl	800589c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
      break;
 8005232:	e04f      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005244:	f000 fb2a 	bl	800589c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e03c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa9e 	bl	80057a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2150      	movs	r1, #80	@ 0x50
 8005272:	4618      	mov	r0, r3
 8005274:	f000 faf7 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 8005278:	e02c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fabd 	bl	8005806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2160      	movs	r1, #96	@ 0x60
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fae7 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 8005298:	e01c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fa7e 	bl	80057a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2140      	movs	r1, #64	@ 0x40
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fad7 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 80052b8:	e00c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 face 	bl	8005866 <TIM_ITRx_SetConfig>
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a46      	ldr	r2, [pc, #280]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a43      	ldr	r2, [pc, #268]	@ (8005420 <TIM_Base_SetConfig+0x130>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a42      	ldr	r2, [pc, #264]	@ (8005424 <TIM_Base_SetConfig+0x134>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a41      	ldr	r2, [pc, #260]	@ (8005428 <TIM_Base_SetConfig+0x138>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a40      	ldr	r2, [pc, #256]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a35      	ldr	r2, [pc, #212]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d02b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d027      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a32      	ldr	r2, [pc, #200]	@ (8005420 <TIM_Base_SetConfig+0x130>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d023      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a31      	ldr	r2, [pc, #196]	@ (8005424 <TIM_Base_SetConfig+0x134>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <TIM_Base_SetConfig+0x138>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2f      	ldr	r2, [pc, #188]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2e      	ldr	r2, [pc, #184]	@ (8005430 <TIM_Base_SetConfig+0x140>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2d      	ldr	r2, [pc, #180]	@ (8005434 <TIM_Base_SetConfig+0x144>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <TIM_Base_SetConfig+0x148>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <TIM_Base_SetConfig+0x14c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2a      	ldr	r2, [pc, #168]	@ (8005440 <TIM_Base_SetConfig+0x150>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <TIM_Base_SetConfig+0x154>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a10      	ldr	r2, [pc, #64]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a12      	ldr	r2, [pc, #72]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]
  }
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40010000 	.word	0x40010000
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40000c00 	.word	0x40000c00
 800542c:	40010400 	.word	0x40010400
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800
 800543c:	40001800 	.word	0x40001800
 8005440:	40001c00 	.word	0x40001c00
 8005444:	40002000 	.word	0x40002000

08005448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 0201 	bic.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 0302 	bic.w	r3, r3, #2
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a20      	ldr	r2, [pc, #128]	@ (8005520 <TIM_OC1_SetConfig+0xd8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC1_SetConfig+0x64>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005524 <TIM_OC1_SetConfig+0xdc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10c      	bne.n	80054c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0308 	bic.w	r3, r3, #8
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0304 	bic.w	r3, r3, #4
 80054c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a15      	ldr	r2, [pc, #84]	@ (8005520 <TIM_OC1_SetConfig+0xd8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC1_SetConfig+0x8e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <TIM_OC1_SetConfig+0xdc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d111      	bne.n	80054fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400

08005528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 0210 	bic.w	r2, r3, #16
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0320 	bic.w	r3, r3, #32
 8005572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a22      	ldr	r2, [pc, #136]	@ (800560c <TIM_OC2_SetConfig+0xe4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC2_SetConfig+0x68>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <TIM_OC2_SetConfig+0xe8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10d      	bne.n	80055ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a17      	ldr	r2, [pc, #92]	@ (800560c <TIM_OC2_SetConfig+0xe4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC2_SetConfig+0x94>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <TIM_OC2_SetConfig+0xe8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d113      	bne.n	80055e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40010400 	.word	0x40010400

08005614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a21      	ldr	r2, [pc, #132]	@ (80056f4 <TIM_OC3_SetConfig+0xe0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC3_SetConfig+0x66>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <TIM_OC3_SetConfig+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <TIM_OC3_SetConfig+0xe0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_OC3_SetConfig+0x92>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <TIM_OC3_SetConfig+0xe4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d113      	bne.n	80056ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a12      	ldr	r2, [pc, #72]	@ (80057a0 <TIM_OC4_SetConfig+0xa4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC4_SetConfig+0x68>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a11      	ldr	r2, [pc, #68]	@ (80057a4 <TIM_OC4_SetConfig+0xa8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d109      	bne.n	8005778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800576a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	019b      	lsls	r3, r3, #6
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400

080057a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 030a 	bic.w	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005806:	b480      	push	{r7}
 8005808:	b087      	sub	sp, #28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f023 0210 	bic.w	r2, r3, #16
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	f043 0307 	orr.w	r3, r3, #7
 8005888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	021a      	lsls	r2, r3, #8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	431a      	orrs	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	2201      	movs	r2, #1
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	401a      	ands	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	431a      	orrs	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e05a      	b.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d01d      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d10c      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40001800 	.word	0x40001800

08005a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e03d      	b.n	8005ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e04d      	b.n	8005b72 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d111      	bne.n	8005b06 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fb3c 	bl	8006168 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a20      	ldr	r2, [pc, #128]	@ (8005b7c <HAL_UART_Init+0xb8>)
 8005afc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2224      	movs	r2, #36	@ 0x24
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fcfc 	bl	800651c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	080027dd 	.word	0x080027dd

08005b80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b0ba      	sub	sp, #232	@ 0xe8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fbdb 	bl	800639a <UART_Receive_IT>
      return;
 8005be4:	e260      	b.n	80060a8 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80e1 	beq.w	8005db2 <HAL_UART_IRQHandler+0x232>
 8005bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80d4 	beq.w	8005db2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
 8005c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9e:	f043 0208 	orr.w	r2, r3, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 81f7 	beq.w	800609e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb66 	bl	800639a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <HAL_UART_IRQHandler+0x17a>
 8005cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d051      	beq.n	8005d9e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa6c 	bl	80061d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d142      	bne.n	8005d94 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d9      	bne.n	8005d0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	4a80      	ldr	r2, [pc, #512]	@ (8005f68 <HAL_UART_IRQHandler+0x3e8>)
 8005d68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd fa27 	bl	80031c2 <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d019      	beq.n	8005dae <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e011      	b.n	8005dae <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	e00c      	b.n	8005dae <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e007      	b.n	8005dae <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005dac:	e177      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dae:	bf00      	nop
    return;
 8005db0:	e175      	b.n	800609e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	f040 8151 	bne.w	800605e <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 814a 	beq.w	800605e <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8143 	beq.w	800605e <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df8:	2b40      	cmp	r3, #64	@ 0x40
 8005dfa:	f040 80b7 	bne.w	8005f6c <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8147 	beq.w	80060a2 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	f080 8140 	bcs.w	80060a2 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e28:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e34:	f000 8088 	beq.w	8005f48 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1d9      	bne.n	8005e38 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ea8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005eb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e1      	bne.n	8005e84 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ee4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005eea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e3      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f18:	f023 0310 	bic.w	r3, r3, #16
 8005f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e3      	bne.n	8005f06 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd f8cd 	bl	80030e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	1a8a      	subs	r2, r1, r2
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	4611      	mov	r1, r2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f66:	e09c      	b.n	80060a2 <HAL_UART_IRQHandler+0x522>
 8005f68:	0800629f 	.word	0x0800629f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 808f 	beq.w	80060a6 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8005f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 808a 	beq.w	80060a6 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e3      	bne.n	8005f92 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3314      	adds	r3, #20
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fee:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e3      	bne.n	8005fca <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0310 	bic.w	r3, r3, #16
 8006026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	617b      	str	r3, [r7, #20]
   return(result);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e3      	bne.n	8006010 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006052:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006056:	4611      	mov	r1, r2
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800605c:	e023      	b.n	80060a6 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <HAL_UART_IRQHandler+0x4fe>
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f926 	bl	80062c8 <UART_Transmit_IT>
    return;
 800607c:	e014      	b.n	80060a8 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00e      	beq.n	80060a8 <HAL_UART_IRQHandler+0x528>
 800608a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f966 	bl	8006368 <UART_EndTransmit_IT>
    return;
 800609c:	e004      	b.n	80060a8 <HAL_UART_IRQHandler+0x528>
    return;
 800609e:	bf00      	nop
 80060a0:	e002      	b.n	80060a8 <HAL_UART_IRQHandler+0x528>
      return;
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <HAL_UART_IRQHandler+0x528>
      return;
 80060a6:	bf00      	nop
  }
}
 80060a8:	37e8      	adds	r7, #232	@ 0xe8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a10      	ldr	r2, [pc, #64]	@ (80061b4 <UART_InitCallbacksToDefault+0x4c>)
 8006174:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a0f      	ldr	r2, [pc, #60]	@ (80061b8 <UART_InitCallbacksToDefault+0x50>)
 800617a:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a0f      	ldr	r2, [pc, #60]	@ (80061bc <UART_InitCallbacksToDefault+0x54>)
 8006180:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a0e      	ldr	r2, [pc, #56]	@ (80061c0 <UART_InitCallbacksToDefault+0x58>)
 8006186:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0e      	ldr	r2, [pc, #56]	@ (80061c4 <UART_InitCallbacksToDefault+0x5c>)
 800618c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a0d      	ldr	r2, [pc, #52]	@ (80061c8 <UART_InitCallbacksToDefault+0x60>)
 8006192:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a0d      	ldr	r2, [pc, #52]	@ (80061cc <UART_InitCallbacksToDefault+0x64>)
 8006198:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a0c      	ldr	r2, [pc, #48]	@ (80061d0 <UART_InitCallbacksToDefault+0x68>)
 800619e:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a0c      	ldr	r2, [pc, #48]	@ (80061d4 <UART_InitCallbacksToDefault+0x6c>)
 80061a4:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	080060c5 	.word	0x080060c5
 80061b8:	080060b1 	.word	0x080060b1
 80061bc:	080060ed 	.word	0x080060ed
 80061c0:	080060d9 	.word	0x080060d9
 80061c4:	08006101 	.word	0x08006101
 80061c8:	08006115 	.word	0x08006115
 80061cc:	08006129 	.word	0x08006129
 80061d0:	0800613d 	.word	0x0800613d
 80061d4:	08006151 	.word	0x08006151

080061d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b095      	sub	sp, #84	@ 0x54
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006200:	643a      	str	r2, [r7, #64]	@ 0x40
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	61fb      	str	r3, [r7, #28]
   return(result);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3314      	adds	r3, #20
 8006232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006234:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800623a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624c:	2b01      	cmp	r3, #1
 800624e:	d119      	bne.n	8006284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	647b      	str	r3, [r7, #68]	@ 0x44
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	330c      	adds	r3, #12
 800626e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006270:	61ba      	str	r2, [r7, #24]
 8006272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6979      	ldr	r1, [r7, #20]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	613b      	str	r3, [r7, #16]
   return(result);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006292:	bf00      	nop
 8006294:	3754      	adds	r7, #84	@ 0x54
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b21      	cmp	r3, #33	@ 0x21
 80062da:	d13e      	bne.n	800635a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e4:	d114      	bne.n	8006310 <UART_Transmit_IT+0x48>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d110      	bne.n	8006310 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006302:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]
 800630e:	e008      	b.n	8006322 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6211      	str	r1, [r2, #32]
 800631a:	781a      	ldrb	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4619      	mov	r1, r3
 8006330:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10f      	bne.n	8006356 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800635a:	2302      	movs	r3, #2
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800637e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08c      	sub	sp, #48	@ 0x30
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b22      	cmp	r3, #34	@ 0x22
 80063ac:	f040 80b0 	bne.w	8006510 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b8:	d117      	bne.n	80063ea <UART_Receive_IT+0x50>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d113      	bne.n	80063ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	1c9a      	adds	r2, r3, #2
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063e8:	e026      	b.n	8006438 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d007      	beq.n	800640e <UART_Receive_IT+0x74>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <UART_Receive_IT+0x82>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e008      	b.n	800642e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4619      	mov	r1, r3
 8006446:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006448:	2b00      	cmp	r3, #0
 800644a:	d15f      	bne.n	800650c <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0220 	bic.w	r2, r2, #32
 800645a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800646a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	2b01      	cmp	r3, #1
 8006490:	d136      	bne.n	8006500 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	623a      	str	r2, [r7, #32]
 80064ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d10a      	bne.n	80064f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80064f8:	4611      	mov	r1, r2
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	e003      	b.n	8006508 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e002      	b.n	8006512 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3730      	adds	r7, #48	@ 0x30
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800651c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006520:	b0c0      	sub	sp, #256	@ 0x100
 8006522:	af00      	add	r7, sp, #0
 8006524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	68d9      	ldr	r1, [r3, #12]
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	ea40 0301 	orr.w	r3, r0, r1
 8006544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	431a      	orrs	r2, r3
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006574:	f021 010c 	bic.w	r1, r1, #12
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006582:	430b      	orrs	r3, r1
 8006584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006596:	6999      	ldr	r1, [r3, #24]
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	ea40 0301 	orr.w	r3, r0, r1
 80065a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b8f      	ldr	r3, [pc, #572]	@ (80067e8 <UART_SetConfig+0x2cc>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d005      	beq.n	80065bc <UART_SetConfig+0xa0>
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b8d      	ldr	r3, [pc, #564]	@ (80067ec <UART_SetConfig+0x2d0>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d104      	bne.n	80065c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fafc 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 80065c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065c4:	e003      	b.n	80065ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065c6:	f7fe fae3 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80065ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d8:	f040 810c 	bne.w	80067f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065f6:	415b      	adcs	r3, r3
 80065f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065fe:	4621      	mov	r1, r4
 8006600:	eb12 0801 	adds.w	r8, r2, r1
 8006604:	4629      	mov	r1, r5
 8006606:	eb43 0901 	adc.w	r9, r3, r1
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800661e:	4690      	mov	r8, r2
 8006620:	4699      	mov	r9, r3
 8006622:	4623      	mov	r3, r4
 8006624:	eb18 0303 	adds.w	r3, r8, r3
 8006628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800662c:	462b      	mov	r3, r5
 800662e:	eb49 0303 	adc.w	r3, r9, r3
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800664a:	460b      	mov	r3, r1
 800664c:	18db      	adds	r3, r3, r3
 800664e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006650:	4613      	mov	r3, r2
 8006652:	eb42 0303 	adc.w	r3, r2, r3
 8006656:	657b      	str	r3, [r7, #84]	@ 0x54
 8006658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800665c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006660:	f7fa faa2 	bl	8000ba8 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4b61      	ldr	r3, [pc, #388]	@ (80067f0 <UART_SetConfig+0x2d4>)
 800666a:	fba3 2302 	umull	r2, r3, r3, r2
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	011c      	lsls	r4, r3, #4
 8006672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006676:	2200      	movs	r2, #0
 8006678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800667c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	1891      	adds	r1, r2, r2
 800668a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800668c:	415b      	adcs	r3, r3
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006694:	4641      	mov	r1, r8
 8006696:	eb12 0a01 	adds.w	sl, r2, r1
 800669a:	4649      	mov	r1, r9
 800669c:	eb43 0b01 	adc.w	fp, r3, r1
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066b4:	4692      	mov	sl, r2
 80066b6:	469b      	mov	fp, r3
 80066b8:	4643      	mov	r3, r8
 80066ba:	eb1a 0303 	adds.w	r3, sl, r3
 80066be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c2:	464b      	mov	r3, r9
 80066c4:	eb4b 0303 	adc.w	r3, fp, r3
 80066c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066e0:	460b      	mov	r3, r1
 80066e2:	18db      	adds	r3, r3, r3
 80066e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e6:	4613      	mov	r3, r2
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066f6:	f7fa fa57 	bl	8000ba8 <__aeabi_uldivmod>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	4b3b      	ldr	r3, [pc, #236]	@ (80067f0 <UART_SetConfig+0x2d4>)
 8006702:	fba3 2301 	umull	r2, r3, r3, r1
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	2264      	movs	r2, #100	@ 0x64
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	1acb      	subs	r3, r1, r3
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006716:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <UART_SetConfig+0x2d4>)
 8006718:	fba3 2302 	umull	r2, r3, r3, r2
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006724:	441c      	add	r4, r3
 8006726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800672a:	2200      	movs	r2, #0
 800672c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006738:	4642      	mov	r2, r8
 800673a:	464b      	mov	r3, r9
 800673c:	1891      	adds	r1, r2, r2
 800673e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006740:	415b      	adcs	r3, r3
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006748:	4641      	mov	r1, r8
 800674a:	1851      	adds	r1, r2, r1
 800674c:	6339      	str	r1, [r7, #48]	@ 0x30
 800674e:	4649      	mov	r1, r9
 8006750:	414b      	adcs	r3, r1
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006760:	4659      	mov	r1, fp
 8006762:	00cb      	lsls	r3, r1, #3
 8006764:	4651      	mov	r1, sl
 8006766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800676a:	4651      	mov	r1, sl
 800676c:	00ca      	lsls	r2, r1, #3
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	4603      	mov	r3, r0
 8006774:	4642      	mov	r2, r8
 8006776:	189b      	adds	r3, r3, r2
 8006778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800677c:	464b      	mov	r3, r9
 800677e:	460a      	mov	r2, r1
 8006780:	eb42 0303 	adc.w	r3, r2, r3
 8006784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800679c:	460b      	mov	r3, r1
 800679e:	18db      	adds	r3, r3, r3
 80067a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a2:	4613      	mov	r3, r2
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067b2:	f7fa f9f9 	bl	8000ba8 <__aeabi_uldivmod>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <UART_SetConfig+0x2d4>)
 80067bc:	fba3 1302 	umull	r1, r3, r3, r2
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	2164      	movs	r1, #100	@ 0x64
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	3332      	adds	r3, #50	@ 0x32
 80067ce:	4a08      	ldr	r2, [pc, #32]	@ (80067f0 <UART_SetConfig+0x2d4>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	f003 0207 	and.w	r2, r3, #7
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4422      	add	r2, r4
 80067e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067e4:	e106      	b.n	80069f4 <UART_SetConfig+0x4d8>
 80067e6:	bf00      	nop
 80067e8:	40011000 	.word	0x40011000
 80067ec:	40011400 	.word	0x40011400
 80067f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	1891      	adds	r1, r2, r2
 800680c:	6239      	str	r1, [r7, #32]
 800680e:	415b      	adcs	r3, r3
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
 8006812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006816:	4641      	mov	r1, r8
 8006818:	1854      	adds	r4, r2, r1
 800681a:	4649      	mov	r1, r9
 800681c:	eb43 0501 	adc.w	r5, r3, r1
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	00eb      	lsls	r3, r5, #3
 800682a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800682e:	00e2      	lsls	r2, r4, #3
 8006830:	4614      	mov	r4, r2
 8006832:	461d      	mov	r5, r3
 8006834:	4643      	mov	r3, r8
 8006836:	18e3      	adds	r3, r4, r3
 8006838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800683c:	464b      	mov	r3, r9
 800683e:	eb45 0303 	adc.w	r3, r5, r3
 8006842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006862:	4629      	mov	r1, r5
 8006864:	008b      	lsls	r3, r1, #2
 8006866:	4621      	mov	r1, r4
 8006868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686c:	4621      	mov	r1, r4
 800686e:	008a      	lsls	r2, r1, #2
 8006870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006874:	f7fa f998 	bl	8000ba8 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4b60      	ldr	r3, [pc, #384]	@ (8006a00 <UART_SetConfig+0x4e4>)
 800687e:	fba3 2302 	umull	r2, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	011c      	lsls	r4, r3, #4
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	1891      	adds	r1, r2, r2
 800689e:	61b9      	str	r1, [r7, #24]
 80068a0:	415b      	adcs	r3, r3
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a8:	4641      	mov	r1, r8
 80068aa:	1851      	adds	r1, r2, r1
 80068ac:	6139      	str	r1, [r7, #16]
 80068ae:	4649      	mov	r1, r9
 80068b0:	414b      	adcs	r3, r1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c0:	4659      	mov	r1, fp
 80068c2:	00cb      	lsls	r3, r1, #3
 80068c4:	4651      	mov	r1, sl
 80068c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ca:	4651      	mov	r1, sl
 80068cc:	00ca      	lsls	r2, r1, #3
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	4642      	mov	r2, r8
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068dc:	464b      	mov	r3, r9
 80068de:	460a      	mov	r2, r1
 80068e0:	eb42 0303 	adc.w	r3, r2, r3
 80068e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006900:	4649      	mov	r1, r9
 8006902:	008b      	lsls	r3, r1, #2
 8006904:	4641      	mov	r1, r8
 8006906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800690a:	4641      	mov	r1, r8
 800690c:	008a      	lsls	r2, r1, #2
 800690e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006912:	f7fa f949 	bl	8000ba8 <__aeabi_uldivmod>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4611      	mov	r1, r2
 800691c:	4b38      	ldr	r3, [pc, #224]	@ (8006a00 <UART_SetConfig+0x4e4>)
 800691e:	fba3 2301 	umull	r2, r3, r3, r1
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	2264      	movs	r2, #100	@ 0x64
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	3332      	adds	r3, #50	@ 0x32
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <UART_SetConfig+0x4e4>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800693c:	441c      	add	r4, r3
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	673b      	str	r3, [r7, #112]	@ 0x70
 8006946:	677a      	str	r2, [r7, #116]	@ 0x74
 8006948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	1891      	adds	r1, r2, r2
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	415b      	adcs	r3, r3
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800695c:	4641      	mov	r1, r8
 800695e:	1851      	adds	r1, r2, r1
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	4649      	mov	r1, r9
 8006964:	414b      	adcs	r3, r1
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006974:	4659      	mov	r1, fp
 8006976:	00cb      	lsls	r3, r1, #3
 8006978:	4651      	mov	r1, sl
 800697a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697e:	4651      	mov	r1, sl
 8006980:	00ca      	lsls	r2, r1, #3
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	4603      	mov	r3, r0
 8006988:	4642      	mov	r2, r8
 800698a:	189b      	adds	r3, r3, r2
 800698c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800698e:	464b      	mov	r3, r9
 8006990:	460a      	mov	r2, r1
 8006992:	eb42 0303 	adc.w	r3, r2, r3
 8006996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80069a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069b0:	4649      	mov	r1, r9
 80069b2:	008b      	lsls	r3, r1, #2
 80069b4:	4641      	mov	r1, r8
 80069b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ba:	4641      	mov	r1, r8
 80069bc:	008a      	lsls	r2, r1, #2
 80069be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069c2:	f7fa f8f1 	bl	8000ba8 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006a00 <UART_SetConfig+0x4e4>)
 80069cc:	fba3 1302 	umull	r1, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2164      	movs	r1, #100	@ 0x64
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	3332      	adds	r3, #50	@ 0x32
 80069de:	4a08      	ldr	r2, [pc, #32]	@ (8006a00 <UART_SetConfig+0x4e4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f003 020f 	and.w	r2, r3, #15
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4422      	add	r2, r4
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a00:	51eb851f 	.word	0x51eb851f

08006a04 <malloc>:
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <malloc+0xc>)
 8006a06:	4601      	mov	r1, r0
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f000 b825 	b.w	8006a58 <_malloc_r>
 8006a0e:	bf00      	nop
 8006a10:	20000028 	.word	0x20000028

08006a14 <sbrk_aligned>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4e0f      	ldr	r6, [pc, #60]	@ (8006a54 <sbrk_aligned+0x40>)
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6831      	ldr	r1, [r6, #0]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	b911      	cbnz	r1, 8006a26 <sbrk_aligned+0x12>
 8006a20:	f000 fe44 	bl	80076ac <_sbrk_r>
 8006a24:	6030      	str	r0, [r6, #0]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 fe3f 	bl	80076ac <_sbrk_r>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d103      	bne.n	8006a3a <sbrk_aligned+0x26>
 8006a32:	f04f 34ff 	mov.w	r4, #4294967295
 8006a36:	4620      	mov	r0, r4
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	1cc4      	adds	r4, r0, #3
 8006a3c:	f024 0403 	bic.w	r4, r4, #3
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d0f8      	beq.n	8006a36 <sbrk_aligned+0x22>
 8006a44:	1a21      	subs	r1, r4, r0
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 fe30 	bl	80076ac <_sbrk_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1f2      	bne.n	8006a36 <sbrk_aligned+0x22>
 8006a50:	e7ef      	b.n	8006a32 <sbrk_aligned+0x1e>
 8006a52:	bf00      	nop
 8006a54:	200008f0 	.word	0x200008f0

08006a58 <_malloc_r>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	1ccd      	adds	r5, r1, #3
 8006a5e:	f025 0503 	bic.w	r5, r5, #3
 8006a62:	3508      	adds	r5, #8
 8006a64:	2d0c      	cmp	r5, #12
 8006a66:	bf38      	it	cc
 8006a68:	250c      	movcc	r5, #12
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	db01      	blt.n	8006a74 <_malloc_r+0x1c>
 8006a70:	42a9      	cmp	r1, r5
 8006a72:	d904      	bls.n	8006a7e <_malloc_r+0x26>
 8006a74:	230c      	movs	r3, #12
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b54 <_malloc_r+0xfc>
 8006a82:	f000 f869 	bl	8006b58 <__malloc_lock>
 8006a86:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8a:	461c      	mov	r4, r3
 8006a8c:	bb44      	cbnz	r4, 8006ae0 <_malloc_r+0x88>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff ffbf 	bl	8006a14 <sbrk_aligned>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	4604      	mov	r4, r0
 8006a9a:	d158      	bne.n	8006b4e <_malloc_r+0xf6>
 8006a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa0:	4627      	mov	r7, r4
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	d143      	bne.n	8006b2e <_malloc_r+0xd6>
 8006aa6:	2c00      	cmp	r4, #0
 8006aa8:	d04b      	beq.n	8006b42 <_malloc_r+0xea>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4639      	mov	r1, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	eb04 0903 	add.w	r9, r4, r3
 8006ab4:	f000 fdfa 	bl	80076ac <_sbrk_r>
 8006ab8:	4581      	cmp	r9, r0
 8006aba:	d142      	bne.n	8006b42 <_malloc_r+0xea>
 8006abc:	6821      	ldr	r1, [r4, #0]
 8006abe:	1a6d      	subs	r5, r5, r1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffa6 	bl	8006a14 <sbrk_aligned>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d03a      	beq.n	8006b42 <_malloc_r+0xea>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	442b      	add	r3, r5
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	bb62      	cbnz	r2, 8006b34 <_malloc_r+0xdc>
 8006ada:	f8c8 7000 	str.w	r7, [r8]
 8006ade:	e00f      	b.n	8006b00 <_malloc_r+0xa8>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	1b52      	subs	r2, r2, r5
 8006ae4:	d420      	bmi.n	8006b28 <_malloc_r+0xd0>
 8006ae6:	2a0b      	cmp	r2, #11
 8006ae8:	d917      	bls.n	8006b1a <_malloc_r+0xc2>
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	6025      	str	r5, [r4, #0]
 8006af0:	bf18      	it	ne
 8006af2:	6059      	strne	r1, [r3, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	bf08      	it	eq
 8006af8:	f8c8 1000 	streq.w	r1, [r8]
 8006afc:	5162      	str	r2, [r4, r5]
 8006afe:	604b      	str	r3, [r1, #4]
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f82f 	bl	8006b64 <__malloc_unlock>
 8006b06:	f104 000b 	add.w	r0, r4, #11
 8006b0a:	1d23      	adds	r3, r4, #4
 8006b0c:	f020 0007 	bic.w	r0, r0, #7
 8006b10:	1ac2      	subs	r2, r0, r3
 8006b12:	bf1c      	itt	ne
 8006b14:	1a1b      	subne	r3, r3, r0
 8006b16:	50a3      	strne	r3, [r4, r2]
 8006b18:	e7af      	b.n	8006a7a <_malloc_r+0x22>
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	bf0c      	ite	eq
 8006b20:	f8c8 2000 	streq.w	r2, [r8]
 8006b24:	605a      	strne	r2, [r3, #4]
 8006b26:	e7eb      	b.n	8006b00 <_malloc_r+0xa8>
 8006b28:	4623      	mov	r3, r4
 8006b2a:	6864      	ldr	r4, [r4, #4]
 8006b2c:	e7ae      	b.n	8006a8c <_malloc_r+0x34>
 8006b2e:	463c      	mov	r4, r7
 8006b30:	687f      	ldr	r7, [r7, #4]
 8006b32:	e7b6      	b.n	8006aa2 <_malloc_r+0x4a>
 8006b34:	461a      	mov	r2, r3
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d1fb      	bne.n	8006b34 <_malloc_r+0xdc>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6053      	str	r3, [r2, #4]
 8006b40:	e7de      	b.n	8006b00 <_malloc_r+0xa8>
 8006b42:	230c      	movs	r3, #12
 8006b44:	6033      	str	r3, [r6, #0]
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 f80c 	bl	8006b64 <__malloc_unlock>
 8006b4c:	e794      	b.n	8006a78 <_malloc_r+0x20>
 8006b4e:	6005      	str	r5, [r0, #0]
 8006b50:	e7d6      	b.n	8006b00 <_malloc_r+0xa8>
 8006b52:	bf00      	nop
 8006b54:	200008f4 	.word	0x200008f4

08006b58 <__malloc_lock>:
 8006b58:	4801      	ldr	r0, [pc, #4]	@ (8006b60 <__malloc_lock+0x8>)
 8006b5a:	f000 bdf4 	b.w	8007746 <__retarget_lock_acquire_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20000a38 	.word	0x20000a38

08006b64 <__malloc_unlock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	@ (8006b6c <__malloc_unlock+0x8>)
 8006b66:	f000 bdef 	b.w	8007748 <__retarget_lock_release_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20000a38 	.word	0x20000a38

08006b70 <__cvt>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	ec57 6b10 	vmov	r6, r7, d0
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	463b      	mov	r3, r7
 8006b80:	bfbb      	ittet	lt
 8006b82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b86:	461f      	movlt	r7, r3
 8006b88:	2300      	movge	r3, #0
 8006b8a:	232d      	movlt	r3, #45	@ 0x2d
 8006b8c:	700b      	strb	r3, [r1, #0]
 8006b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b94:	4691      	mov	r9, r2
 8006b96:	f023 0820 	bic.w	r8, r3, #32
 8006b9a:	bfbc      	itt	lt
 8006b9c:	4632      	movlt	r2, r6
 8006b9e:	4616      	movlt	r6, r2
 8006ba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ba4:	d005      	beq.n	8006bb2 <__cvt+0x42>
 8006ba6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006baa:	d100      	bne.n	8006bae <__cvt+0x3e>
 8006bac:	3401      	adds	r4, #1
 8006bae:	2102      	movs	r1, #2
 8006bb0:	e000      	b.n	8006bb4 <__cvt+0x44>
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	ab03      	add	r3, sp, #12
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	ab02      	add	r3, sp, #8
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	ec47 6b10 	vmov	d0, r6, r7
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	f000 fe58 	bl	8007878 <_dtoa_r>
 8006bc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bcc:	4605      	mov	r5, r0
 8006bce:	d119      	bne.n	8006c04 <__cvt+0x94>
 8006bd0:	f019 0f01 	tst.w	r9, #1
 8006bd4:	d00e      	beq.n	8006bf4 <__cvt+0x84>
 8006bd6:	eb00 0904 	add.w	r9, r0, r4
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f7f9 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be6:	b108      	cbz	r0, 8006bec <__cvt+0x7c>
 8006be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bec:	2230      	movs	r2, #48	@ 0x30
 8006bee:	9b03      	ldr	r3, [sp, #12]
 8006bf0:	454b      	cmp	r3, r9
 8006bf2:	d31e      	bcc.n	8006c32 <__cvt+0xc2>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bf8:	1b5b      	subs	r3, r3, r5
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	b004      	add	sp, #16
 8006c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c08:	eb00 0904 	add.w	r9, r0, r4
 8006c0c:	d1e5      	bne.n	8006bda <__cvt+0x6a>
 8006c0e:	7803      	ldrb	r3, [r0, #0]
 8006c10:	2b30      	cmp	r3, #48	@ 0x30
 8006c12:	d10a      	bne.n	8006c2a <__cvt+0xba>
 8006c14:	2200      	movs	r2, #0
 8006c16:	2300      	movs	r3, #0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c20:	b918      	cbnz	r0, 8006c2a <__cvt+0xba>
 8006c22:	f1c4 0401 	rsb	r4, r4, #1
 8006c26:	f8ca 4000 	str.w	r4, [sl]
 8006c2a:	f8da 3000 	ldr.w	r3, [sl]
 8006c2e:	4499      	add	r9, r3
 8006c30:	e7d3      	b.n	8006bda <__cvt+0x6a>
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	9103      	str	r1, [sp, #12]
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e7d9      	b.n	8006bee <__cvt+0x7e>

08006c3a <__exponent>:
 8006c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	bfba      	itte	lt
 8006c40:	4249      	neglt	r1, r1
 8006c42:	232d      	movlt	r3, #45	@ 0x2d
 8006c44:	232b      	movge	r3, #43	@ 0x2b
 8006c46:	2909      	cmp	r1, #9
 8006c48:	7002      	strb	r2, [r0, #0]
 8006c4a:	7043      	strb	r3, [r0, #1]
 8006c4c:	dd29      	ble.n	8006ca2 <__exponent+0x68>
 8006c4e:	f10d 0307 	add.w	r3, sp, #7
 8006c52:	461d      	mov	r5, r3
 8006c54:	270a      	movs	r7, #10
 8006c56:	461a      	mov	r2, r3
 8006c58:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c5c:	fb07 1416 	mls	r4, r7, r6, r1
 8006c60:	3430      	adds	r4, #48	@ 0x30
 8006c62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c66:	460c      	mov	r4, r1
 8006c68:	2c63      	cmp	r4, #99	@ 0x63
 8006c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c6e:	4631      	mov	r1, r6
 8006c70:	dcf1      	bgt.n	8006c56 <__exponent+0x1c>
 8006c72:	3130      	adds	r1, #48	@ 0x30
 8006c74:	1e94      	subs	r4, r2, #2
 8006c76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c7a:	1c41      	adds	r1, r0, #1
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	42ab      	cmp	r3, r5
 8006c80:	d30a      	bcc.n	8006c98 <__exponent+0x5e>
 8006c82:	f10d 0309 	add.w	r3, sp, #9
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	42ac      	cmp	r4, r5
 8006c8a:	bf88      	it	hi
 8006c8c:	2300      	movhi	r3, #0
 8006c8e:	3302      	adds	r3, #2
 8006c90:	4403      	add	r3, r0
 8006c92:	1a18      	subs	r0, r3, r0
 8006c94:	b003      	add	sp, #12
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ca0:	e7ed      	b.n	8006c7e <__exponent+0x44>
 8006ca2:	2330      	movs	r3, #48	@ 0x30
 8006ca4:	3130      	adds	r1, #48	@ 0x30
 8006ca6:	7083      	strb	r3, [r0, #2]
 8006ca8:	70c1      	strb	r1, [r0, #3]
 8006caa:	1d03      	adds	r3, r0, #4
 8006cac:	e7f1      	b.n	8006c92 <__exponent+0x58>
	...

08006cb0 <_printf_float>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	b08d      	sub	sp, #52	@ 0x34
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	461f      	mov	r7, r3
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	f000 fcbb 	bl	800763c <_localeconv_r>
 8006cc6:	6803      	ldr	r3, [r0, #0]
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7f9 fad0 	bl	8000270 <strlen>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd8:	9005      	str	r0, [sp, #20]
 8006cda:	3307      	adds	r3, #7
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	f103 0208 	add.w	r2, r3, #8
 8006ce4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ce8:	f8d4 b000 	ldr.w	fp, [r4]
 8006cec:	f8c8 2000 	str.w	r2, [r8]
 8006cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006cf8:	9307      	str	r3, [sp, #28]
 8006cfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d06:	4b9c      	ldr	r3, [pc, #624]	@ (8006f78 <_printf_float+0x2c8>)
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	f7f9 ff0e 	bl	8000b2c <__aeabi_dcmpun>
 8006d10:	bb70      	cbnz	r0, 8006d70 <_printf_float+0xc0>
 8006d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d16:	4b98      	ldr	r3, [pc, #608]	@ (8006f78 <_printf_float+0x2c8>)
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1c:	f7f9 fee8 	bl	8000af0 <__aeabi_dcmple>
 8006d20:	bb30      	cbnz	r0, 8006d70 <_printf_float+0xc0>
 8006d22:	2200      	movs	r2, #0
 8006d24:	2300      	movs	r3, #0
 8006d26:	4640      	mov	r0, r8
 8006d28:	4649      	mov	r1, r9
 8006d2a:	f7f9 fed7 	bl	8000adc <__aeabi_dcmplt>
 8006d2e:	b110      	cbz	r0, 8006d36 <_printf_float+0x86>
 8006d30:	232d      	movs	r3, #45	@ 0x2d
 8006d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d36:	4a91      	ldr	r2, [pc, #580]	@ (8006f7c <_printf_float+0x2cc>)
 8006d38:	4b91      	ldr	r3, [pc, #580]	@ (8006f80 <_printf_float+0x2d0>)
 8006d3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d3e:	bf94      	ite	ls
 8006d40:	4690      	movls	r8, r2
 8006d42:	4698      	movhi	r8, r3
 8006d44:	2303      	movs	r3, #3
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	f02b 0304 	bic.w	r3, fp, #4
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	9700      	str	r7, [sp, #0]
 8006d54:	4633      	mov	r3, r6
 8006d56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f9d2 	bl	8007104 <_printf_common>
 8006d60:	3001      	adds	r0, #1
 8006d62:	f040 808d 	bne.w	8006e80 <_printf_float+0x1d0>
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	b00d      	add	sp, #52	@ 0x34
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	f7f9 fed8 	bl	8000b2c <__aeabi_dcmpun>
 8006d7c:	b140      	cbz	r0, 8006d90 <_printf_float+0xe0>
 8006d7e:	464b      	mov	r3, r9
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfbc      	itt	lt
 8006d84:	232d      	movlt	r3, #45	@ 0x2d
 8006d86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f84 <_printf_float+0x2d4>)
 8006d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f88 <_printf_float+0x2d8>)
 8006d8e:	e7d4      	b.n	8006d3a <_printf_float+0x8a>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d96:	9206      	str	r2, [sp, #24]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	d13b      	bne.n	8006e14 <_printf_float+0x164>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006da4:	2300      	movs	r3, #0
 8006da6:	6022      	str	r2, [r4, #0]
 8006da8:	9303      	str	r3, [sp, #12]
 8006daa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006dac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006db0:	ab09      	add	r3, sp, #36	@ 0x24
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	6861      	ldr	r1, [r4, #4]
 8006db6:	ec49 8b10 	vmov	d0, r8, r9
 8006dba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7ff fed6 	bl	8006b70 <__cvt>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dc8:	2b47      	cmp	r3, #71	@ 0x47
 8006dca:	4680      	mov	r8, r0
 8006dcc:	d129      	bne.n	8006e22 <_printf_float+0x172>
 8006dce:	1cc8      	adds	r0, r1, #3
 8006dd0:	db02      	blt.n	8006dd8 <_printf_float+0x128>
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	dd41      	ble.n	8006e5c <_printf_float+0x1ac>
 8006dd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ddc:	fa5f fa8a 	uxtb.w	sl, sl
 8006de0:	3901      	subs	r1, #1
 8006de2:	4652      	mov	r2, sl
 8006de4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006de8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dea:	f7ff ff26 	bl	8006c3a <__exponent>
 8006dee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006df0:	1813      	adds	r3, r2, r0
 8006df2:	2a01      	cmp	r2, #1
 8006df4:	4681      	mov	r9, r0
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	dc02      	bgt.n	8006e00 <_printf_float+0x150>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	07d2      	lsls	r2, r2, #31
 8006dfe:	d501      	bpl.n	8006e04 <_printf_float+0x154>
 8006e00:	3301      	adds	r3, #1
 8006e02:	6123      	str	r3, [r4, #16]
 8006e04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0a2      	beq.n	8006d52 <_printf_float+0xa2>
 8006e0c:	232d      	movs	r3, #45	@ 0x2d
 8006e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e12:	e79e      	b.n	8006d52 <_printf_float+0xa2>
 8006e14:	9a06      	ldr	r2, [sp, #24]
 8006e16:	2a47      	cmp	r2, #71	@ 0x47
 8006e18:	d1c2      	bne.n	8006da0 <_printf_float+0xf0>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1c0      	bne.n	8006da0 <_printf_float+0xf0>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e7bd      	b.n	8006d9e <_printf_float+0xee>
 8006e22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e26:	d9db      	bls.n	8006de0 <_printf_float+0x130>
 8006e28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e2c:	d118      	bne.n	8006e60 <_printf_float+0x1b0>
 8006e2e:	2900      	cmp	r1, #0
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	dd0b      	ble.n	8006e4c <_printf_float+0x19c>
 8006e34:	6121      	str	r1, [r4, #16]
 8006e36:	b913      	cbnz	r3, 8006e3e <_printf_float+0x18e>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	07d0      	lsls	r0, r2, #31
 8006e3c:	d502      	bpl.n	8006e44 <_printf_float+0x194>
 8006e3e:	3301      	adds	r3, #1
 8006e40:	440b      	add	r3, r1
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e46:	f04f 0900 	mov.w	r9, #0
 8006e4a:	e7db      	b.n	8006e04 <_printf_float+0x154>
 8006e4c:	b913      	cbnz	r3, 8006e54 <_printf_float+0x1a4>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	07d2      	lsls	r2, r2, #31
 8006e52:	d501      	bpl.n	8006e58 <_printf_float+0x1a8>
 8006e54:	3302      	adds	r3, #2
 8006e56:	e7f4      	b.n	8006e42 <_printf_float+0x192>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7f2      	b.n	8006e42 <_printf_float+0x192>
 8006e5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e62:	4299      	cmp	r1, r3
 8006e64:	db05      	blt.n	8006e72 <_printf_float+0x1c2>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	6121      	str	r1, [r4, #16]
 8006e6a:	07d8      	lsls	r0, r3, #31
 8006e6c:	d5ea      	bpl.n	8006e44 <_printf_float+0x194>
 8006e6e:	1c4b      	adds	r3, r1, #1
 8006e70:	e7e7      	b.n	8006e42 <_printf_float+0x192>
 8006e72:	2900      	cmp	r1, #0
 8006e74:	bfd4      	ite	le
 8006e76:	f1c1 0202 	rsble	r2, r1, #2
 8006e7a:	2201      	movgt	r2, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	e7e0      	b.n	8006e42 <_printf_float+0x192>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	055a      	lsls	r2, r3, #21
 8006e84:	d407      	bmi.n	8006e96 <_printf_float+0x1e6>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	4642      	mov	r2, r8
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	d12b      	bne.n	8006eec <_printf_float+0x23c>
 8006e94:	e767      	b.n	8006d66 <_printf_float+0xb6>
 8006e96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e9a:	f240 80dd 	bls.w	8007058 <_printf_float+0x3a8>
 8006e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f7f9 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d033      	beq.n	8006f16 <_printf_float+0x266>
 8006eae:	4a37      	ldr	r2, [pc, #220]	@ (8006f8c <_printf_float+0x2dc>)
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f af54 	beq.w	8006d66 <_printf_float+0xb6>
 8006ebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ec2:	4543      	cmp	r3, r8
 8006ec4:	db02      	blt.n	8006ecc <_printf_float+0x21c>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	07d8      	lsls	r0, r3, #31
 8006eca:	d50f      	bpl.n	8006eec <_printf_float+0x23c>
 8006ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f af45 	beq.w	8006d66 <_printf_float+0xb6>
 8006edc:	f04f 0900 	mov.w	r9, #0
 8006ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ee4:	f104 0a1a 	add.w	sl, r4, #26
 8006ee8:	45c8      	cmp	r8, r9
 8006eea:	dc09      	bgt.n	8006f00 <_printf_float+0x250>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	079b      	lsls	r3, r3, #30
 8006ef0:	f100 8103 	bmi.w	80070fa <_printf_float+0x44a>
 8006ef4:	68e0      	ldr	r0, [r4, #12]
 8006ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef8:	4298      	cmp	r0, r3
 8006efa:	bfb8      	it	lt
 8006efc:	4618      	movlt	r0, r3
 8006efe:	e734      	b.n	8006d6a <_printf_float+0xba>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f af2b 	beq.w	8006d66 <_printf_float+0xb6>
 8006f10:	f109 0901 	add.w	r9, r9, #1
 8006f14:	e7e8      	b.n	8006ee8 <_printf_float+0x238>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc39      	bgt.n	8006f90 <_printf_float+0x2e0>
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <_printf_float+0x2dc>)
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f af1d 	beq.w	8006d66 <_printf_float+0xb6>
 8006f2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f30:	ea59 0303 	orrs.w	r3, r9, r3
 8006f34:	d102      	bne.n	8006f3c <_printf_float+0x28c>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	d5d7      	bpl.n	8006eec <_printf_float+0x23c>
 8006f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f af0d 	beq.w	8006d66 <_printf_float+0xb6>
 8006f4c:	f04f 0a00 	mov.w	sl, #0
 8006f50:	f104 0b1a 	add.w	fp, r4, #26
 8006f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f56:	425b      	negs	r3, r3
 8006f58:	4553      	cmp	r3, sl
 8006f5a:	dc01      	bgt.n	8006f60 <_printf_float+0x2b0>
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	e793      	b.n	8006e88 <_printf_float+0x1d8>
 8006f60:	2301      	movs	r3, #1
 8006f62:	465a      	mov	r2, fp
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f aefb 	beq.w	8006d66 <_printf_float+0xb6>
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	e7ee      	b.n	8006f54 <_printf_float+0x2a4>
 8006f76:	bf00      	nop
 8006f78:	7fefffff 	.word	0x7fefffff
 8006f7c:	0800a8d4 	.word	0x0800a8d4
 8006f80:	0800a8d8 	.word	0x0800a8d8
 8006f84:	0800a8dc 	.word	0x0800a8dc
 8006f88:	0800a8e0 	.word	0x0800a8e0
 8006f8c:	0800a8e4 	.word	0x0800a8e4
 8006f90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f96:	4553      	cmp	r3, sl
 8006f98:	bfa8      	it	ge
 8006f9a:	4653      	movge	r3, sl
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	dc36      	bgt.n	8007010 <_printf_float+0x360>
 8006fa2:	f04f 0b00 	mov.w	fp, #0
 8006fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006faa:	f104 021a 	add.w	r2, r4, #26
 8006fae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fb0:	9306      	str	r3, [sp, #24]
 8006fb2:	eba3 0309 	sub.w	r3, r3, r9
 8006fb6:	455b      	cmp	r3, fp
 8006fb8:	dc31      	bgt.n	800701e <_printf_float+0x36e>
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	459a      	cmp	sl, r3
 8006fbe:	dc3a      	bgt.n	8007036 <_printf_float+0x386>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	07da      	lsls	r2, r3, #31
 8006fc4:	d437      	bmi.n	8007036 <_printf_float+0x386>
 8006fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc8:	ebaa 0903 	sub.w	r9, sl, r3
 8006fcc:	9b06      	ldr	r3, [sp, #24]
 8006fce:	ebaa 0303 	sub.w	r3, sl, r3
 8006fd2:	4599      	cmp	r9, r3
 8006fd4:	bfa8      	it	ge
 8006fd6:	4699      	movge	r9, r3
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	dc33      	bgt.n	8007046 <_printf_float+0x396>
 8006fde:	f04f 0800 	mov.w	r8, #0
 8006fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe6:	f104 0b1a 	add.w	fp, r4, #26
 8006fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fec:	ebaa 0303 	sub.w	r3, sl, r3
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	f77f af79 	ble.w	8006eec <_printf_float+0x23c>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	465a      	mov	r2, fp
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f aeae 	beq.w	8006d66 <_printf_float+0xb6>
 800700a:	f108 0801 	add.w	r8, r8, #1
 800700e:	e7ec      	b.n	8006fea <_printf_float+0x33a>
 8007010:	4642      	mov	r2, r8
 8007012:	4631      	mov	r1, r6
 8007014:	4628      	mov	r0, r5
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	d1c2      	bne.n	8006fa2 <_printf_float+0x2f2>
 800701c:	e6a3      	b.n	8006d66 <_printf_float+0xb6>
 800701e:	2301      	movs	r3, #1
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	9206      	str	r2, [sp, #24]
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae9c 	beq.w	8006d66 <_printf_float+0xb6>
 800702e:	9a06      	ldr	r2, [sp, #24]
 8007030:	f10b 0b01 	add.w	fp, fp, #1
 8007034:	e7bb      	b.n	8006fae <_printf_float+0x2fe>
 8007036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	d1c0      	bne.n	8006fc6 <_printf_float+0x316>
 8007044:	e68f      	b.n	8006d66 <_printf_float+0xb6>
 8007046:	9a06      	ldr	r2, [sp, #24]
 8007048:	464b      	mov	r3, r9
 800704a:	4442      	add	r2, r8
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	d1c3      	bne.n	8006fde <_printf_float+0x32e>
 8007056:	e686      	b.n	8006d66 <_printf_float+0xb6>
 8007058:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800705c:	f1ba 0f01 	cmp.w	sl, #1
 8007060:	dc01      	bgt.n	8007066 <_printf_float+0x3b6>
 8007062:	07db      	lsls	r3, r3, #31
 8007064:	d536      	bpl.n	80070d4 <_printf_float+0x424>
 8007066:	2301      	movs	r3, #1
 8007068:	4642      	mov	r2, r8
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	f43f ae78 	beq.w	8006d66 <_printf_float+0xb6>
 8007076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707a:	4631      	mov	r1, r6
 800707c:	4628      	mov	r0, r5
 800707e:	47b8      	blx	r7
 8007080:	3001      	adds	r0, #1
 8007082:	f43f ae70 	beq.w	8006d66 <_printf_float+0xb6>
 8007086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800708a:	2200      	movs	r2, #0
 800708c:	2300      	movs	r3, #0
 800708e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007092:	f7f9 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8007096:	b9c0      	cbnz	r0, 80070ca <_printf_float+0x41a>
 8007098:	4653      	mov	r3, sl
 800709a:	f108 0201 	add.w	r2, r8, #1
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	d10c      	bne.n	80070c2 <_printf_float+0x412>
 80070a8:	e65d      	b.n	8006d66 <_printf_float+0xb6>
 80070aa:	2301      	movs	r3, #1
 80070ac:	465a      	mov	r2, fp
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	f43f ae56 	beq.w	8006d66 <_printf_float+0xb6>
 80070ba:	f108 0801 	add.w	r8, r8, #1
 80070be:	45d0      	cmp	r8, sl
 80070c0:	dbf3      	blt.n	80070aa <_printf_float+0x3fa>
 80070c2:	464b      	mov	r3, r9
 80070c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070c8:	e6df      	b.n	8006e8a <_printf_float+0x1da>
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	f104 0b1a 	add.w	fp, r4, #26
 80070d2:	e7f4      	b.n	80070be <_printf_float+0x40e>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4642      	mov	r2, r8
 80070d8:	e7e1      	b.n	800709e <_printf_float+0x3ee>
 80070da:	2301      	movs	r3, #1
 80070dc:	464a      	mov	r2, r9
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae3e 	beq.w	8006d66 <_printf_float+0xb6>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	4543      	cmp	r3, r8
 80070f6:	dcf0      	bgt.n	80070da <_printf_float+0x42a>
 80070f8:	e6fc      	b.n	8006ef4 <_printf_float+0x244>
 80070fa:	f04f 0800 	mov.w	r8, #0
 80070fe:	f104 0919 	add.w	r9, r4, #25
 8007102:	e7f4      	b.n	80070ee <_printf_float+0x43e>

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4698      	mov	r8, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	bfb8      	it	lt
 8007118:	4613      	movlt	r3, r2
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007120:	4607      	mov	r7, r0
 8007122:	460c      	mov	r4, r1
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc26      	bgt.n	800719a <_printf_common+0x96>
 800714c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	3b00      	subs	r3, #0
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d42b      	bmi.n	80071b4 <_printf_common+0xb0>
 800715c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007160:	4641      	mov	r1, r8
 8007162:	4638      	mov	r0, r7
 8007164:	47c8      	blx	r9
 8007166:	3001      	adds	r0, #1
 8007168:	d01e      	beq.n	80071a8 <_printf_common+0xa4>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf02      	ittt	eq
 8007176:	68e5      	ldreq	r5, [r4, #12]
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	1aed      	subeq	r5, r5, r3
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	bf0c      	ite	eq
 8007180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007184:	2500      	movne	r5, #0
 8007186:	4293      	cmp	r3, r2
 8007188:	bfc4      	itt	gt
 800718a:	1a9b      	subgt	r3, r3, r2
 800718c:	18ed      	addgt	r5, r5, r3
 800718e:	2600      	movs	r6, #0
 8007190:	341a      	adds	r4, #26
 8007192:	42b5      	cmp	r5, r6
 8007194:	d11a      	bne.n	80071cc <_printf_common+0xc8>
 8007196:	2000      	movs	r0, #0
 8007198:	e008      	b.n	80071ac <_printf_common+0xa8>
 800719a:	2301      	movs	r3, #1
 800719c:	4652      	mov	r2, sl
 800719e:	4641      	mov	r1, r8
 80071a0:	4638      	mov	r0, r7
 80071a2:	47c8      	blx	r9
 80071a4:	3001      	adds	r0, #1
 80071a6:	d103      	bne.n	80071b0 <_printf_common+0xac>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	3501      	adds	r5, #1
 80071b2:	e7c6      	b.n	8007142 <_printf_common+0x3e>
 80071b4:	18e1      	adds	r1, r4, r3
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	2030      	movs	r0, #48	@ 0x30
 80071ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071be:	4422      	add	r2, r4
 80071c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071c8:	3302      	adds	r3, #2
 80071ca:	e7c7      	b.n	800715c <_printf_common+0x58>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4622      	mov	r2, r4
 80071d0:	4641      	mov	r1, r8
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c8      	blx	r9
 80071d6:	3001      	adds	r0, #1
 80071d8:	d0e6      	beq.n	80071a8 <_printf_common+0xa4>
 80071da:	3601      	adds	r6, #1
 80071dc:	e7d9      	b.n	8007192 <_printf_common+0x8e>
	...

080071e0 <_printf_i>:
 80071e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	7e0f      	ldrb	r7, [r1, #24]
 80071e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071e8:	2f78      	cmp	r7, #120	@ 0x78
 80071ea:	4691      	mov	r9, r2
 80071ec:	4680      	mov	r8, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	469a      	mov	sl, r3
 80071f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071f6:	d807      	bhi.n	8007208 <_printf_i+0x28>
 80071f8:	2f62      	cmp	r7, #98	@ 0x62
 80071fa:	d80a      	bhi.n	8007212 <_printf_i+0x32>
 80071fc:	2f00      	cmp	r7, #0
 80071fe:	f000 80d2 	beq.w	80073a6 <_printf_i+0x1c6>
 8007202:	2f58      	cmp	r7, #88	@ 0x58
 8007204:	f000 80b9 	beq.w	800737a <_printf_i+0x19a>
 8007208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800720c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007210:	e03a      	b.n	8007288 <_printf_i+0xa8>
 8007212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007216:	2b15      	cmp	r3, #21
 8007218:	d8f6      	bhi.n	8007208 <_printf_i+0x28>
 800721a:	a101      	add	r1, pc, #4	@ (adr r1, 8007220 <_printf_i+0x40>)
 800721c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007220:	08007279 	.word	0x08007279
 8007224:	0800728d 	.word	0x0800728d
 8007228:	08007209 	.word	0x08007209
 800722c:	08007209 	.word	0x08007209
 8007230:	08007209 	.word	0x08007209
 8007234:	08007209 	.word	0x08007209
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007209 	.word	0x08007209
 8007240:	08007209 	.word	0x08007209
 8007244:	08007209 	.word	0x08007209
 8007248:	08007209 	.word	0x08007209
 800724c:	0800738d 	.word	0x0800738d
 8007250:	080072b7 	.word	0x080072b7
 8007254:	08007347 	.word	0x08007347
 8007258:	08007209 	.word	0x08007209
 800725c:	08007209 	.word	0x08007209
 8007260:	080073af 	.word	0x080073af
 8007264:	08007209 	.word	0x08007209
 8007268:	080072b7 	.word	0x080072b7
 800726c:	08007209 	.word	0x08007209
 8007270:	08007209 	.word	0x08007209
 8007274:	0800734f 	.word	0x0800734f
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6032      	str	r2, [r6, #0]
 8007280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007288:	2301      	movs	r3, #1
 800728a:	e09d      	b.n	80073c8 <_printf_i+0x1e8>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	6820      	ldr	r0, [r4, #0]
 8007290:	1d19      	adds	r1, r3, #4
 8007292:	6031      	str	r1, [r6, #0]
 8007294:	0606      	lsls	r6, r0, #24
 8007296:	d501      	bpl.n	800729c <_printf_i+0xbc>
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	e003      	b.n	80072a4 <_printf_i+0xc4>
 800729c:	0645      	lsls	r5, r0, #25
 800729e:	d5fb      	bpl.n	8007298 <_printf_i+0xb8>
 80072a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	da03      	bge.n	80072b0 <_printf_i+0xd0>
 80072a8:	232d      	movs	r3, #45	@ 0x2d
 80072aa:	426d      	negs	r5, r5
 80072ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072b0:	4859      	ldr	r0, [pc, #356]	@ (8007418 <_printf_i+0x238>)
 80072b2:	230a      	movs	r3, #10
 80072b4:	e011      	b.n	80072da <_printf_i+0xfa>
 80072b6:	6821      	ldr	r1, [r4, #0]
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	0608      	lsls	r0, r1, #24
 80072bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80072c0:	d402      	bmi.n	80072c8 <_printf_i+0xe8>
 80072c2:	0649      	lsls	r1, r1, #25
 80072c4:	bf48      	it	mi
 80072c6:	b2ad      	uxthmi	r5, r5
 80072c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80072ca:	4853      	ldr	r0, [pc, #332]	@ (8007418 <_printf_i+0x238>)
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	bf14      	ite	ne
 80072d0:	230a      	movne	r3, #10
 80072d2:	2308      	moveq	r3, #8
 80072d4:	2100      	movs	r1, #0
 80072d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072da:	6866      	ldr	r6, [r4, #4]
 80072dc:	60a6      	str	r6, [r4, #8]
 80072de:	2e00      	cmp	r6, #0
 80072e0:	bfa2      	ittt	ge
 80072e2:	6821      	ldrge	r1, [r4, #0]
 80072e4:	f021 0104 	bicge.w	r1, r1, #4
 80072e8:	6021      	strge	r1, [r4, #0]
 80072ea:	b90d      	cbnz	r5, 80072f0 <_printf_i+0x110>
 80072ec:	2e00      	cmp	r6, #0
 80072ee:	d04b      	beq.n	8007388 <_printf_i+0x1a8>
 80072f0:	4616      	mov	r6, r2
 80072f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80072f6:	fb03 5711 	mls	r7, r3, r1, r5
 80072fa:	5dc7      	ldrb	r7, [r0, r7]
 80072fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007300:	462f      	mov	r7, r5
 8007302:	42bb      	cmp	r3, r7
 8007304:	460d      	mov	r5, r1
 8007306:	d9f4      	bls.n	80072f2 <_printf_i+0x112>
 8007308:	2b08      	cmp	r3, #8
 800730a:	d10b      	bne.n	8007324 <_printf_i+0x144>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07df      	lsls	r7, r3, #31
 8007310:	d508      	bpl.n	8007324 <_printf_i+0x144>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4299      	cmp	r1, r3
 8007318:	bfde      	ittt	le
 800731a:	2330      	movle	r3, #48	@ 0x30
 800731c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007324:	1b92      	subs	r2, r2, r6
 8007326:	6122      	str	r2, [r4, #16]
 8007328:	f8cd a000 	str.w	sl, [sp]
 800732c:	464b      	mov	r3, r9
 800732e:	aa03      	add	r2, sp, #12
 8007330:	4621      	mov	r1, r4
 8007332:	4640      	mov	r0, r8
 8007334:	f7ff fee6 	bl	8007104 <_printf_common>
 8007338:	3001      	adds	r0, #1
 800733a:	d14a      	bne.n	80073d2 <_printf_i+0x1f2>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	b004      	add	sp, #16
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	f043 0320 	orr.w	r3, r3, #32
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	4833      	ldr	r0, [pc, #204]	@ (800741c <_printf_i+0x23c>)
 8007350:	2778      	movs	r7, #120	@ 0x78
 8007352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	6831      	ldr	r1, [r6, #0]
 800735a:	061f      	lsls	r7, r3, #24
 800735c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007360:	d402      	bmi.n	8007368 <_printf_i+0x188>
 8007362:	065f      	lsls	r7, r3, #25
 8007364:	bf48      	it	mi
 8007366:	b2ad      	uxthmi	r5, r5
 8007368:	6031      	str	r1, [r6, #0]
 800736a:	07d9      	lsls	r1, r3, #31
 800736c:	bf44      	itt	mi
 800736e:	f043 0320 	orrmi.w	r3, r3, #32
 8007372:	6023      	strmi	r3, [r4, #0]
 8007374:	b11d      	cbz	r5, 800737e <_printf_i+0x19e>
 8007376:	2310      	movs	r3, #16
 8007378:	e7ac      	b.n	80072d4 <_printf_i+0xf4>
 800737a:	4827      	ldr	r0, [pc, #156]	@ (8007418 <_printf_i+0x238>)
 800737c:	e7e9      	b.n	8007352 <_printf_i+0x172>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f023 0320 	bic.w	r3, r3, #32
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	e7f6      	b.n	8007376 <_printf_i+0x196>
 8007388:	4616      	mov	r6, r2
 800738a:	e7bd      	b.n	8007308 <_printf_i+0x128>
 800738c:	6833      	ldr	r3, [r6, #0]
 800738e:	6825      	ldr	r5, [r4, #0]
 8007390:	6961      	ldr	r1, [r4, #20]
 8007392:	1d18      	adds	r0, r3, #4
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	062e      	lsls	r6, r5, #24
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	d501      	bpl.n	80073a0 <_printf_i+0x1c0>
 800739c:	6019      	str	r1, [r3, #0]
 800739e:	e002      	b.n	80073a6 <_printf_i+0x1c6>
 80073a0:	0668      	lsls	r0, r5, #25
 80073a2:	d5fb      	bpl.n	800739c <_printf_i+0x1bc>
 80073a4:	8019      	strh	r1, [r3, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	4616      	mov	r6, r2
 80073ac:	e7bc      	b.n	8007328 <_printf_i+0x148>
 80073ae:	6833      	ldr	r3, [r6, #0]
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	6032      	str	r2, [r6, #0]
 80073b4:	681e      	ldr	r6, [r3, #0]
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	2100      	movs	r1, #0
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7f8 ff08 	bl	80001d0 <memchr>
 80073c0:	b108      	cbz	r0, 80073c6 <_printf_i+0x1e6>
 80073c2:	1b80      	subs	r0, r0, r6
 80073c4:	6060      	str	r0, [r4, #4]
 80073c6:	6863      	ldr	r3, [r4, #4]
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	2300      	movs	r3, #0
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d0:	e7aa      	b.n	8007328 <_printf_i+0x148>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	4632      	mov	r2, r6
 80073d6:	4649      	mov	r1, r9
 80073d8:	4640      	mov	r0, r8
 80073da:	47d0      	blx	sl
 80073dc:	3001      	adds	r0, #1
 80073de:	d0ad      	beq.n	800733c <_printf_i+0x15c>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	d413      	bmi.n	800740e <_printf_i+0x22e>
 80073e6:	68e0      	ldr	r0, [r4, #12]
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	4298      	cmp	r0, r3
 80073ec:	bfb8      	it	lt
 80073ee:	4618      	movlt	r0, r3
 80073f0:	e7a6      	b.n	8007340 <_printf_i+0x160>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4632      	mov	r2, r6
 80073f6:	4649      	mov	r1, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	47d0      	blx	sl
 80073fc:	3001      	adds	r0, #1
 80073fe:	d09d      	beq.n	800733c <_printf_i+0x15c>
 8007400:	3501      	adds	r5, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	9903      	ldr	r1, [sp, #12]
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	42ab      	cmp	r3, r5
 800740a:	dcf2      	bgt.n	80073f2 <_printf_i+0x212>
 800740c:	e7eb      	b.n	80073e6 <_printf_i+0x206>
 800740e:	2500      	movs	r5, #0
 8007410:	f104 0619 	add.w	r6, r4, #25
 8007414:	e7f5      	b.n	8007402 <_printf_i+0x222>
 8007416:	bf00      	nop
 8007418:	0800a8e6 	.word	0x0800a8e6
 800741c:	0800a8f7 	.word	0x0800a8f7

08007420 <std>:
 8007420:	2300      	movs	r3, #0
 8007422:	b510      	push	{r4, lr}
 8007424:	4604      	mov	r4, r0
 8007426:	e9c0 3300 	strd	r3, r3, [r0]
 800742a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800742e:	6083      	str	r3, [r0, #8]
 8007430:	8181      	strh	r1, [r0, #12]
 8007432:	6643      	str	r3, [r0, #100]	@ 0x64
 8007434:	81c2      	strh	r2, [r0, #14]
 8007436:	6183      	str	r3, [r0, #24]
 8007438:	4619      	mov	r1, r3
 800743a:	2208      	movs	r2, #8
 800743c:	305c      	adds	r0, #92	@ 0x5c
 800743e:	f000 f8f4 	bl	800762a <memset>
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <std+0x58>)
 8007444:	6263      	str	r3, [r4, #36]	@ 0x24
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <std+0x5c>)
 8007448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <std+0x60>)
 800744c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800744e:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <std+0x64>)
 8007450:	6323      	str	r3, [r4, #48]	@ 0x30
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <std+0x68>)
 8007454:	6224      	str	r4, [r4, #32]
 8007456:	429c      	cmp	r4, r3
 8007458:	d006      	beq.n	8007468 <std+0x48>
 800745a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800745e:	4294      	cmp	r4, r2
 8007460:	d002      	beq.n	8007468 <std+0x48>
 8007462:	33d0      	adds	r3, #208	@ 0xd0
 8007464:	429c      	cmp	r4, r3
 8007466:	d105      	bne.n	8007474 <std+0x54>
 8007468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007470:	f000 b968 	b.w	8007744 <__retarget_lock_init_recursive>
 8007474:	bd10      	pop	{r4, pc}
 8007476:	bf00      	nop
 8007478:	080075a5 	.word	0x080075a5
 800747c:	080075c7 	.word	0x080075c7
 8007480:	080075ff 	.word	0x080075ff
 8007484:	08007623 	.word	0x08007623
 8007488:	200008f8 	.word	0x200008f8

0800748c <stdio_exit_handler>:
 800748c:	4a02      	ldr	r2, [pc, #8]	@ (8007498 <stdio_exit_handler+0xc>)
 800748e:	4903      	ldr	r1, [pc, #12]	@ (800749c <stdio_exit_handler+0x10>)
 8007490:	4803      	ldr	r0, [pc, #12]	@ (80074a0 <stdio_exit_handler+0x14>)
 8007492:	f000 b869 	b.w	8007568 <_fwalk_sglue>
 8007496:	bf00      	nop
 8007498:	2000001c 	.word	0x2000001c
 800749c:	08008ca1 	.word	0x08008ca1
 80074a0:	2000002c 	.word	0x2000002c

080074a4 <cleanup_stdio>:
 80074a4:	6841      	ldr	r1, [r0, #4]
 80074a6:	4b0c      	ldr	r3, [pc, #48]	@ (80074d8 <cleanup_stdio+0x34>)
 80074a8:	4299      	cmp	r1, r3
 80074aa:	b510      	push	{r4, lr}
 80074ac:	4604      	mov	r4, r0
 80074ae:	d001      	beq.n	80074b4 <cleanup_stdio+0x10>
 80074b0:	f001 fbf6 	bl	8008ca0 <_fflush_r>
 80074b4:	68a1      	ldr	r1, [r4, #8]
 80074b6:	4b09      	ldr	r3, [pc, #36]	@ (80074dc <cleanup_stdio+0x38>)
 80074b8:	4299      	cmp	r1, r3
 80074ba:	d002      	beq.n	80074c2 <cleanup_stdio+0x1e>
 80074bc:	4620      	mov	r0, r4
 80074be:	f001 fbef 	bl	8008ca0 <_fflush_r>
 80074c2:	68e1      	ldr	r1, [r4, #12]
 80074c4:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <cleanup_stdio+0x3c>)
 80074c6:	4299      	cmp	r1, r3
 80074c8:	d004      	beq.n	80074d4 <cleanup_stdio+0x30>
 80074ca:	4620      	mov	r0, r4
 80074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d0:	f001 bbe6 	b.w	8008ca0 <_fflush_r>
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop
 80074d8:	200008f8 	.word	0x200008f8
 80074dc:	20000960 	.word	0x20000960
 80074e0:	200009c8 	.word	0x200009c8

080074e4 <global_stdio_init.part.0>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <global_stdio_init.part.0+0x30>)
 80074e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007518 <global_stdio_init.part.0+0x34>)
 80074ea:	4a0c      	ldr	r2, [pc, #48]	@ (800751c <global_stdio_init.part.0+0x38>)
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	4620      	mov	r0, r4
 80074f0:	2200      	movs	r2, #0
 80074f2:	2104      	movs	r1, #4
 80074f4:	f7ff ff94 	bl	8007420 <std>
 80074f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074fc:	2201      	movs	r2, #1
 80074fe:	2109      	movs	r1, #9
 8007500:	f7ff ff8e 	bl	8007420 <std>
 8007504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007508:	2202      	movs	r2, #2
 800750a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800750e:	2112      	movs	r1, #18
 8007510:	f7ff bf86 	b.w	8007420 <std>
 8007514:	20000a30 	.word	0x20000a30
 8007518:	200008f8 	.word	0x200008f8
 800751c:	0800748d 	.word	0x0800748d

08007520 <__sfp_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	@ (8007528 <__sfp_lock_acquire+0x8>)
 8007522:	f000 b910 	b.w	8007746 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	20000a39 	.word	0x20000a39

0800752c <__sfp_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	@ (8007534 <__sfp_lock_release+0x8>)
 800752e:	f000 b90b 	b.w	8007748 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	20000a39 	.word	0x20000a39

08007538 <__sinit>:
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f7ff fff0 	bl	8007520 <__sfp_lock_acquire>
 8007540:	6a23      	ldr	r3, [r4, #32]
 8007542:	b11b      	cbz	r3, 800754c <__sinit+0x14>
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007548:	f7ff bff0 	b.w	800752c <__sfp_lock_release>
 800754c:	4b04      	ldr	r3, [pc, #16]	@ (8007560 <__sinit+0x28>)
 800754e:	6223      	str	r3, [r4, #32]
 8007550:	4b04      	ldr	r3, [pc, #16]	@ (8007564 <__sinit+0x2c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f5      	bne.n	8007544 <__sinit+0xc>
 8007558:	f7ff ffc4 	bl	80074e4 <global_stdio_init.part.0>
 800755c:	e7f2      	b.n	8007544 <__sinit+0xc>
 800755e:	bf00      	nop
 8007560:	080074a5 	.word	0x080074a5
 8007564:	20000a30 	.word	0x20000a30

08007568 <_fwalk_sglue>:
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	4607      	mov	r7, r0
 800756e:	4688      	mov	r8, r1
 8007570:	4614      	mov	r4, r2
 8007572:	2600      	movs	r6, #0
 8007574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007578:	f1b9 0901 	subs.w	r9, r9, #1
 800757c:	d505      	bpl.n	800758a <_fwalk_sglue+0x22>
 800757e:	6824      	ldr	r4, [r4, #0]
 8007580:	2c00      	cmp	r4, #0
 8007582:	d1f7      	bne.n	8007574 <_fwalk_sglue+0xc>
 8007584:	4630      	mov	r0, r6
 8007586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d907      	bls.n	80075a0 <_fwalk_sglue+0x38>
 8007590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007594:	3301      	adds	r3, #1
 8007596:	d003      	beq.n	80075a0 <_fwalk_sglue+0x38>
 8007598:	4629      	mov	r1, r5
 800759a:	4638      	mov	r0, r7
 800759c:	47c0      	blx	r8
 800759e:	4306      	orrs	r6, r0
 80075a0:	3568      	adds	r5, #104	@ 0x68
 80075a2:	e7e9      	b.n	8007578 <_fwalk_sglue+0x10>

080075a4 <__sread>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	f000 f86c 	bl	8007688 <_read_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	bfab      	itete	ge
 80075b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075b6:	89a3      	ldrhlt	r3, [r4, #12]
 80075b8:	181b      	addge	r3, r3, r0
 80075ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075be:	bfac      	ite	ge
 80075c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075c2:	81a3      	strhlt	r3, [r4, #12]
 80075c4:	bd10      	pop	{r4, pc}

080075c6 <__swrite>:
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	461f      	mov	r7, r3
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	4605      	mov	r5, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4616      	mov	r6, r2
 80075d6:	d505      	bpl.n	80075e4 <__swrite+0x1e>
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2302      	movs	r3, #2
 80075de:	2200      	movs	r2, #0
 80075e0:	f000 f840 	bl	8007664 <_lseek_r>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	f000 b867 	b.w	80076cc <_write_r>

080075fe <__sseek>:
 80075fe:	b510      	push	{r4, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007606:	f000 f82d 	bl	8007664 <_lseek_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	bf15      	itete	ne
 8007610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800761a:	81a3      	strheq	r3, [r4, #12]
 800761c:	bf18      	it	ne
 800761e:	81a3      	strhne	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__sclose>:
 8007622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007626:	f000 b80d 	b.w	8007644 <_close_r>

0800762a <memset>:
 800762a:	4402      	add	r2, r0
 800762c:	4603      	mov	r3, r0
 800762e:	4293      	cmp	r3, r2
 8007630:	d100      	bne.n	8007634 <memset+0xa>
 8007632:	4770      	bx	lr
 8007634:	f803 1b01 	strb.w	r1, [r3], #1
 8007638:	e7f9      	b.n	800762e <memset+0x4>
	...

0800763c <_localeconv_r>:
 800763c:	4800      	ldr	r0, [pc, #0]	@ (8007640 <_localeconv_r+0x4>)
 800763e:	4770      	bx	lr
 8007640:	20000168 	.word	0x20000168

08007644 <_close_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	@ (8007660 <_close_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f001 fe56 	bl	8009300 <_close>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_close_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_close_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000a34 	.word	0x20000a34

08007664 <_lseek_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	@ (8007684 <_lseek_r+0x20>)
 8007668:	4604      	mov	r4, r0
 800766a:	4608      	mov	r0, r1
 800766c:	4611      	mov	r1, r2
 800766e:	2200      	movs	r2, #0
 8007670:	602a      	str	r2, [r5, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	f001 fe6c 	bl	8009350 <_lseek>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_lseek_r+0x1e>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_lseek_r+0x1e>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000a34 	.word	0x20000a34

08007688 <_read_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	@ (80076a8 <_read_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f001 fe62 	bl	8009360 <_read>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_read_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_read_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000a34 	.word	0x20000a34

080076ac <_sbrk_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d06      	ldr	r5, [pc, #24]	@ (80076c8 <_sbrk_r+0x1c>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	f7fa fde4 	bl	8002284 <_sbrk>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_sbrk_r+0x1a>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_sbrk_r+0x1a>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000a34 	.word	0x20000a34

080076cc <_write_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_write_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f001 fe48 	bl	8009370 <_write>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_write_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_write_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000a34 	.word	0x20000a34

080076f0 <__errno>:
 80076f0:	4b01      	ldr	r3, [pc, #4]	@ (80076f8 <__errno+0x8>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000028 	.word	0x20000028

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	@ (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	@ (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	@ (8007740 <__libc_init_array+0x44>)
 8007710:	f001 fe38 	bl	8009384 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	0800ac50 	.word	0x0800ac50
 8007738:	0800ac50 	.word	0x0800ac50
 800773c:	0800ac50 	.word	0x0800ac50
 8007740:	0800ac54 	.word	0x0800ac54

08007744 <__retarget_lock_init_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_acquire_recursive>:
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_release_recursive>:
 8007748:	4770      	bx	lr

0800774a <memcpy>:
 800774a:	440a      	add	r2, r1
 800774c:	4291      	cmp	r1, r2
 800774e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007752:	d100      	bne.n	8007756 <memcpy+0xc>
 8007754:	4770      	bx	lr
 8007756:	b510      	push	{r4, lr}
 8007758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007760:	4291      	cmp	r1, r2
 8007762:	d1f9      	bne.n	8007758 <memcpy+0xe>
 8007764:	bd10      	pop	{r4, pc}

08007766 <quorem>:
 8007766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	6903      	ldr	r3, [r0, #16]
 800776c:	690c      	ldr	r4, [r1, #16]
 800776e:	42a3      	cmp	r3, r4
 8007770:	4607      	mov	r7, r0
 8007772:	db7e      	blt.n	8007872 <quorem+0x10c>
 8007774:	3c01      	subs	r4, #1
 8007776:	f101 0814 	add.w	r8, r1, #20
 800777a:	00a3      	lsls	r3, r4, #2
 800777c:	f100 0514 	add.w	r5, r0, #20
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800778c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007790:	3301      	adds	r3, #1
 8007792:	429a      	cmp	r2, r3
 8007794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007798:	fbb2 f6f3 	udiv	r6, r2, r3
 800779c:	d32e      	bcc.n	80077fc <quorem+0x96>
 800779e:	f04f 0a00 	mov.w	sl, #0
 80077a2:	46c4      	mov	ip, r8
 80077a4:	46ae      	mov	lr, r5
 80077a6:	46d3      	mov	fp, sl
 80077a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077ac:	b298      	uxth	r0, r3
 80077ae:	fb06 a000 	mla	r0, r6, r0, sl
 80077b2:	0c02      	lsrs	r2, r0, #16
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	fb06 2303 	mla	r3, r6, r3, r2
 80077ba:	f8de 2000 	ldr.w	r2, [lr]
 80077be:	b280      	uxth	r0, r0
 80077c0:	b292      	uxth	r2, r2
 80077c2:	1a12      	subs	r2, r2, r0
 80077c4:	445a      	add	r2, fp
 80077c6:	f8de 0000 	ldr.w	r0, [lr]
 80077ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077d8:	b292      	uxth	r2, r2
 80077da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077de:	45e1      	cmp	r9, ip
 80077e0:	f84e 2b04 	str.w	r2, [lr], #4
 80077e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077e8:	d2de      	bcs.n	80077a8 <quorem+0x42>
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	58eb      	ldr	r3, [r5, r3]
 80077ee:	b92b      	cbnz	r3, 80077fc <quorem+0x96>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	3b04      	subs	r3, #4
 80077f4:	429d      	cmp	r5, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	d32f      	bcc.n	800785a <quorem+0xf4>
 80077fa:	613c      	str	r4, [r7, #16]
 80077fc:	4638      	mov	r0, r7
 80077fe:	f001 f8c3 	bl	8008988 <__mcmp>
 8007802:	2800      	cmp	r0, #0
 8007804:	db25      	blt.n	8007852 <quorem+0xec>
 8007806:	4629      	mov	r1, r5
 8007808:	2000      	movs	r0, #0
 800780a:	f858 2b04 	ldr.w	r2, [r8], #4
 800780e:	f8d1 c000 	ldr.w	ip, [r1]
 8007812:	fa1f fe82 	uxth.w	lr, r2
 8007816:	fa1f f38c 	uxth.w	r3, ip
 800781a:	eba3 030e 	sub.w	r3, r3, lr
 800781e:	4403      	add	r3, r0
 8007820:	0c12      	lsrs	r2, r2, #16
 8007822:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007826:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007830:	45c1      	cmp	r9, r8
 8007832:	f841 3b04 	str.w	r3, [r1], #4
 8007836:	ea4f 4022 	mov.w	r0, r2, asr #16
 800783a:	d2e6      	bcs.n	800780a <quorem+0xa4>
 800783c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007840:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007844:	b922      	cbnz	r2, 8007850 <quorem+0xea>
 8007846:	3b04      	subs	r3, #4
 8007848:	429d      	cmp	r5, r3
 800784a:	461a      	mov	r2, r3
 800784c:	d30b      	bcc.n	8007866 <quorem+0x100>
 800784e:	613c      	str	r4, [r7, #16]
 8007850:	3601      	adds	r6, #1
 8007852:	4630      	mov	r0, r6
 8007854:	b003      	add	sp, #12
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	3b04      	subs	r3, #4
 800785e:	2a00      	cmp	r2, #0
 8007860:	d1cb      	bne.n	80077fa <quorem+0x94>
 8007862:	3c01      	subs	r4, #1
 8007864:	e7c6      	b.n	80077f4 <quorem+0x8e>
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	3b04      	subs	r3, #4
 800786a:	2a00      	cmp	r2, #0
 800786c:	d1ef      	bne.n	800784e <quorem+0xe8>
 800786e:	3c01      	subs	r4, #1
 8007870:	e7ea      	b.n	8007848 <quorem+0xe2>
 8007872:	2000      	movs	r0, #0
 8007874:	e7ee      	b.n	8007854 <quorem+0xee>
	...

08007878 <_dtoa_r>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	69c7      	ldr	r7, [r0, #28]
 800787e:	b099      	sub	sp, #100	@ 0x64
 8007880:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007884:	ec55 4b10 	vmov	r4, r5, d0
 8007888:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800788a:	9109      	str	r1, [sp, #36]	@ 0x24
 800788c:	4683      	mov	fp, r0
 800788e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007890:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007892:	b97f      	cbnz	r7, 80078b4 <_dtoa_r+0x3c>
 8007894:	2010      	movs	r0, #16
 8007896:	f7ff f8b5 	bl	8006a04 <malloc>
 800789a:	4602      	mov	r2, r0
 800789c:	f8cb 001c 	str.w	r0, [fp, #28]
 80078a0:	b920      	cbnz	r0, 80078ac <_dtoa_r+0x34>
 80078a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007b40 <_dtoa_r+0x2c8>)
 80078a4:	21ef      	movs	r1, #239	@ 0xef
 80078a6:	48a7      	ldr	r0, [pc, #668]	@ (8007b44 <_dtoa_r+0x2cc>)
 80078a8:	f001 fa22 	bl	8008cf0 <__assert_func>
 80078ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078b0:	6007      	str	r7, [r0, #0]
 80078b2:	60c7      	str	r7, [r0, #12]
 80078b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	b159      	cbz	r1, 80078d4 <_dtoa_r+0x5c>
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	604a      	str	r2, [r1, #4]
 80078c0:	2301      	movs	r3, #1
 80078c2:	4093      	lsls	r3, r2
 80078c4:	608b      	str	r3, [r1, #8]
 80078c6:	4658      	mov	r0, fp
 80078c8:	f000 fe24 	bl	8008514 <_Bfree>
 80078cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	1e2b      	subs	r3, r5, #0
 80078d6:	bfb9      	ittee	lt
 80078d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078dc:	9303      	strlt	r3, [sp, #12]
 80078de:	2300      	movge	r3, #0
 80078e0:	6033      	strge	r3, [r6, #0]
 80078e2:	9f03      	ldr	r7, [sp, #12]
 80078e4:	4b98      	ldr	r3, [pc, #608]	@ (8007b48 <_dtoa_r+0x2d0>)
 80078e6:	bfbc      	itt	lt
 80078e8:	2201      	movlt	r2, #1
 80078ea:	6032      	strlt	r2, [r6, #0]
 80078ec:	43bb      	bics	r3, r7
 80078ee:	d112      	bne.n	8007916 <_dtoa_r+0x9e>
 80078f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078fc:	4323      	orrs	r3, r4
 80078fe:	f000 854d 	beq.w	800839c <_dtoa_r+0xb24>
 8007902:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007904:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b5c <_dtoa_r+0x2e4>
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 854f 	beq.w	80083ac <_dtoa_r+0xb34>
 800790e:	f10a 0303 	add.w	r3, sl, #3
 8007912:	f000 bd49 	b.w	80083a8 <_dtoa_r+0xb30>
 8007916:	ed9d 7b02 	vldr	d7, [sp, #8]
 800791a:	2200      	movs	r2, #0
 800791c:	ec51 0b17 	vmov	r0, r1, d7
 8007920:	2300      	movs	r3, #0
 8007922:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007926:	f7f9 f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800792a:	4680      	mov	r8, r0
 800792c:	b158      	cbz	r0, 8007946 <_dtoa_r+0xce>
 800792e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007930:	2301      	movs	r3, #1
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007936:	b113      	cbz	r3, 800793e <_dtoa_r+0xc6>
 8007938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800793a:	4b84      	ldr	r3, [pc, #528]	@ (8007b4c <_dtoa_r+0x2d4>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b60 <_dtoa_r+0x2e8>
 8007942:	f000 bd33 	b.w	80083ac <_dtoa_r+0xb34>
 8007946:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800794a:	aa16      	add	r2, sp, #88	@ 0x58
 800794c:	a917      	add	r1, sp, #92	@ 0x5c
 800794e:	4658      	mov	r0, fp
 8007950:	f001 f8ca 	bl	8008ae8 <__d2b>
 8007954:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007958:	4681      	mov	r9, r0
 800795a:	2e00      	cmp	r6, #0
 800795c:	d077      	beq.n	8007a4e <_dtoa_r+0x1d6>
 800795e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007960:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800796c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007970:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007974:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007978:	4619      	mov	r1, r3
 800797a:	2200      	movs	r2, #0
 800797c:	4b74      	ldr	r3, [pc, #464]	@ (8007b50 <_dtoa_r+0x2d8>)
 800797e:	f7f8 fc83 	bl	8000288 <__aeabi_dsub>
 8007982:	a369      	add	r3, pc, #420	@ (adr r3, 8007b28 <_dtoa_r+0x2b0>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe36 	bl	80005f8 <__aeabi_dmul>
 800798c:	a368      	add	r3, pc, #416	@ (adr r3, 8007b30 <_dtoa_r+0x2b8>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4604      	mov	r4, r0
 8007998:	4630      	mov	r0, r6
 800799a:	460d      	mov	r5, r1
 800799c:	f7f8 fdc2 	bl	8000524 <__aeabi_i2d>
 80079a0:	a365      	add	r3, pc, #404	@ (adr r3, 8007b38 <_dtoa_r+0x2c0>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fe27 	bl	80005f8 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 fc6b 	bl	800028c <__adddf3>
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f9 f8cd 	bl	8000b58 <__aeabi_d2iz>
 80079be:	2200      	movs	r2, #0
 80079c0:	4607      	mov	r7, r0
 80079c2:	2300      	movs	r3, #0
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f9 f888 	bl	8000adc <__aeabi_dcmplt>
 80079cc:	b140      	cbz	r0, 80079e0 <_dtoa_r+0x168>
 80079ce:	4638      	mov	r0, r7
 80079d0:	f7f8 fda8 	bl	8000524 <__aeabi_i2d>
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	f7f9 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80079dc:	b900      	cbnz	r0, 80079e0 <_dtoa_r+0x168>
 80079de:	3f01      	subs	r7, #1
 80079e0:	2f16      	cmp	r7, #22
 80079e2:	d851      	bhi.n	8007a88 <_dtoa_r+0x210>
 80079e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007b54 <_dtoa_r+0x2dc>)
 80079e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d048      	beq.n	8007a8c <_dtoa_r+0x214>
 80079fa:	3f01      	subs	r7, #1
 80079fc:	2300      	movs	r3, #0
 80079fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	bf44      	itt	mi
 8007a08:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	9208      	str	r2, [sp, #32]
 8007a10:	bf54      	ite	pl
 8007a12:	f04f 0800 	movpl.w	r8, #0
 8007a16:	9308      	strmi	r3, [sp, #32]
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	db39      	blt.n	8007a90 <_dtoa_r+0x218>
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a20:	443b      	add	r3, r7
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d864      	bhi.n	8007af8 <_dtoa_r+0x280>
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	bfc4      	itt	gt
 8007a32:	3b04      	subgt	r3, #4
 8007a34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a38:	f1a3 0302 	sub.w	r3, r3, #2
 8007a3c:	bfcc      	ite	gt
 8007a3e:	2400      	movgt	r4, #0
 8007a40:	2401      	movle	r4, #1
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d863      	bhi.n	8007b0e <_dtoa_r+0x296>
 8007a46:	e8df f003 	tbb	[pc, r3]
 8007a4a:	372a      	.short	0x372a
 8007a4c:	5535      	.short	0x5535
 8007a4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a52:	441e      	add	r6, r3
 8007a54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	bfc1      	itttt	gt
 8007a5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a60:	409f      	lslgt	r7, r3
 8007a62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a6a:	bfd6      	itet	le
 8007a6c:	f1c3 0320 	rsble	r3, r3, #32
 8007a70:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a74:	fa04 f003 	lslle.w	r0, r4, r3
 8007a78:	f7f8 fd44 	bl	8000504 <__aeabi_ui2d>
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a82:	3e01      	subs	r6, #1
 8007a84:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a86:	e777      	b.n	8007978 <_dtoa_r+0x100>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e7b8      	b.n	80079fe <_dtoa_r+0x186>
 8007a8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a8e:	e7b7      	b.n	8007a00 <_dtoa_r+0x188>
 8007a90:	427b      	negs	r3, r7
 8007a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a94:	2300      	movs	r3, #0
 8007a96:	eba8 0807 	sub.w	r8, r8, r7
 8007a9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a9c:	e7c4      	b.n	8007a28 <_dtoa_r+0x1b0>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc35      	bgt.n	8007b14 <_dtoa_r+0x29c>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	9307      	str	r3, [sp, #28]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ab2:	e00b      	b.n	8007acc <_dtoa_r+0x254>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7f3      	b.n	8007aa0 <_dtoa_r+0x228>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	9307      	str	r3, [sp, #28]
 8007ac8:	bfb8      	it	lt
 8007aca:	2301      	movlt	r3, #1
 8007acc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	f102 0514 	add.w	r5, r2, #20
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	d91f      	bls.n	8007b1c <_dtoa_r+0x2a4>
 8007adc:	6041      	str	r1, [r0, #4]
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fcd8 	bl	8008494 <_Balloc>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d13c      	bne.n	8007b64 <_dtoa_r+0x2ec>
 8007aea:	4b1b      	ldr	r3, [pc, #108]	@ (8007b58 <_dtoa_r+0x2e0>)
 8007aec:	4602      	mov	r2, r0
 8007aee:	f240 11af 	movw	r1, #431	@ 0x1af
 8007af2:	e6d8      	b.n	80078a6 <_dtoa_r+0x2e>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e7e0      	b.n	8007aba <_dtoa_r+0x242>
 8007af8:	2401      	movs	r4, #1
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2312      	movs	r3, #18
 8007b0c:	e7d0      	b.n	8007ab0 <_dtoa_r+0x238>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	e7f5      	b.n	8007b00 <_dtoa_r+0x288>
 8007b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	e7d7      	b.n	8007acc <_dtoa_r+0x254>
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	0052      	lsls	r2, r2, #1
 8007b20:	e7d8      	b.n	8007ad4 <_dtoa_r+0x25c>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	0800a915 	.word	0x0800a915
 8007b44:	0800a92c 	.word	0x0800a92c
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	0800a8e5 	.word	0x0800a8e5
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	0800aa28 	.word	0x0800aa28
 8007b58:	0800a984 	.word	0x0800a984
 8007b5c:	0800a911 	.word	0x0800a911
 8007b60:	0800a8e4 	.word	0x0800a8e4
 8007b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b68:	6018      	str	r0, [r3, #0]
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	2b0e      	cmp	r3, #14
 8007b6e:	f200 80a4 	bhi.w	8007cba <_dtoa_r+0x442>
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	f000 80a1 	beq.w	8007cba <_dtoa_r+0x442>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	dd33      	ble.n	8007be4 <_dtoa_r+0x36c>
 8007b7c:	4bad      	ldr	r3, [pc, #692]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007b7e:	f007 020f 	and.w	r2, r7, #15
 8007b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b86:	ed93 7b00 	vldr	d7, [r3]
 8007b8a:	05f8      	lsls	r0, r7, #23
 8007b8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b94:	d516      	bpl.n	8007bc4 <_dtoa_r+0x34c>
 8007b96:	4ba8      	ldr	r3, [pc, #672]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba0:	f7f8 fe54 	bl	800084c <__aeabi_ddiv>
 8007ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba8:	f004 040f 	and.w	r4, r4, #15
 8007bac:	2603      	movs	r6, #3
 8007bae:	4da2      	ldr	r5, [pc, #648]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007bb0:	b954      	cbnz	r4, 8007bc8 <_dtoa_r+0x350>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bba:	f7f8 fe47 	bl	800084c <__aeabi_ddiv>
 8007bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc2:	e028      	b.n	8007c16 <_dtoa_r+0x39e>
 8007bc4:	2602      	movs	r6, #2
 8007bc6:	e7f2      	b.n	8007bae <_dtoa_r+0x336>
 8007bc8:	07e1      	lsls	r1, r4, #31
 8007bca:	d508      	bpl.n	8007bde <_dtoa_r+0x366>
 8007bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bdc:	3601      	adds	r6, #1
 8007bde:	1064      	asrs	r4, r4, #1
 8007be0:	3508      	adds	r5, #8
 8007be2:	e7e5      	b.n	8007bb0 <_dtoa_r+0x338>
 8007be4:	f000 80d2 	beq.w	8007d8c <_dtoa_r+0x514>
 8007be8:	427c      	negs	r4, r7
 8007bea:	4b92      	ldr	r3, [pc, #584]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007bec:	4d92      	ldr	r5, [pc, #584]	@ (8007e38 <_dtoa_r+0x5c0>)
 8007bee:	f004 020f 	and.w	r2, r4, #15
 8007bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c06:	1124      	asrs	r4, r4, #4
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2602      	movs	r6, #2
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	f040 80b2 	bne.w	8007d76 <_dtoa_r+0x4fe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d3      	bne.n	8007bbe <_dtoa_r+0x346>
 8007c16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80b7 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c22:	4b86      	ldr	r3, [pc, #536]	@ (8007e3c <_dtoa_r+0x5c4>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 ff57 	bl	8000adc <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f000 80ae 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80aa 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd37      	ble.n	8007cb2 <_dtoa_r+0x43a>
 8007c42:	1e7b      	subs	r3, r7, #1
 8007c44:	9304      	str	r3, [sp, #16]
 8007c46:	4620      	mov	r0, r4
 8007c48:	4b7d      	ldr	r3, [pc, #500]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fcd3 	bl	80005f8 <__aeabi_dmul>
 8007c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c56:	9c00      	ldr	r4, [sp, #0]
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7f8 fc62 	bl	8000524 <__aeabi_i2d>
 8007c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c64:	f7f8 fcc8 	bl	80005f8 <__aeabi_dmul>
 8007c68:	4b76      	ldr	r3, [pc, #472]	@ (8007e44 <_dtoa_r+0x5cc>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f7f8 fb0e 	bl	800028c <__adddf3>
 8007c70:	4605      	mov	r5, r0
 8007c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	f040 808d 	bne.w	8007d96 <_dtoa_r+0x51e>
 8007c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c80:	4b71      	ldr	r3, [pc, #452]	@ (8007e48 <_dtoa_r+0x5d0>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4633      	mov	r3, r6
 8007c94:	f7f8 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f040 828b 	bne.w	80081b4 <_dtoa_r+0x93c>
 8007c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ca8:	f7f8 ff18 	bl	8000adc <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 8128 	bne.w	8007f02 <_dtoa_r+0x68a>
 8007cb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f2c0 815a 	blt.w	8007f76 <_dtoa_r+0x6fe>
 8007cc2:	2f0e      	cmp	r7, #14
 8007cc4:	f300 8157 	bgt.w	8007f76 <_dtoa_r+0x6fe>
 8007cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007cca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cce:	ed93 7b00 	vldr	d7, [r3]
 8007cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	ed8d 7b00 	vstr	d7, [sp]
 8007cda:	da03      	bge.n	8007ce4 <_dtoa_r+0x46c>
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f340 8101 	ble.w	8007ee6 <_dtoa_r+0x66e>
 8007ce4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce8:	4656      	mov	r6, sl
 8007cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fdab 	bl	800084c <__aeabi_ddiv>
 8007cf6:	f7f8 ff2f 	bl	8000b58 <__aeabi_d2iz>
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	f7f8 fc12 	bl	8000524 <__aeabi_i2d>
 8007d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d14:	f7f8 fab8 	bl	8000288 <__aeabi_dsub>
 8007d18:	f806 4b01 	strb.w	r4, [r6], #1
 8007d1c:	9d07      	ldr	r5, [sp, #28]
 8007d1e:	eba6 040a 	sub.w	r4, r6, sl
 8007d22:	42a5      	cmp	r5, r4
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	f040 8117 	bne.w	8007f5a <_dtoa_r+0x6e2>
 8007d2c:	f7f8 faae 	bl	800028c <__adddf3>
 8007d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	f7f8 feee 	bl	8000b18 <__aeabi_dcmpgt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f040 80f9 	bne.w	8007f34 <_dtoa_r+0x6bc>
 8007d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d4e:	b118      	cbz	r0, 8007d58 <_dtoa_r+0x4e0>
 8007d50:	f018 0f01 	tst.w	r8, #1
 8007d54:	f040 80ee 	bne.w	8007f34 <_dtoa_r+0x6bc>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4658      	mov	r0, fp
 8007d5c:	f000 fbda 	bl	8008514 <_Bfree>
 8007d60:	2300      	movs	r3, #0
 8007d62:	7033      	strb	r3, [r6, #0]
 8007d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d66:	3701      	adds	r7, #1
 8007d68:	601f      	str	r7, [r3, #0]
 8007d6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 831d 	beq.w	80083ac <_dtoa_r+0xb34>
 8007d72:	601e      	str	r6, [r3, #0]
 8007d74:	e31a      	b.n	80083ac <_dtoa_r+0xb34>
 8007d76:	07e2      	lsls	r2, r4, #31
 8007d78:	d505      	bpl.n	8007d86 <_dtoa_r+0x50e>
 8007d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d7e:	f7f8 fc3b 	bl	80005f8 <__aeabi_dmul>
 8007d82:	3601      	adds	r6, #1
 8007d84:	2301      	movs	r3, #1
 8007d86:	1064      	asrs	r4, r4, #1
 8007d88:	3508      	adds	r5, #8
 8007d8a:	e73f      	b.n	8007c0c <_dtoa_r+0x394>
 8007d8c:	2602      	movs	r6, #2
 8007d8e:	e742      	b.n	8007c16 <_dtoa_r+0x39e>
 8007d90:	9c07      	ldr	r4, [sp, #28]
 8007d92:	9704      	str	r7, [sp, #16]
 8007d94:	e761      	b.n	8007c5a <_dtoa_r+0x3e2>
 8007d96:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <_dtoa_r+0x5bc>)
 8007d98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007da2:	4454      	add	r4, sl
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d053      	beq.n	8007e50 <_dtoa_r+0x5d8>
 8007da8:	4928      	ldr	r1, [pc, #160]	@ (8007e4c <_dtoa_r+0x5d4>)
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7f8 fd4e 	bl	800084c <__aeabi_ddiv>
 8007db0:	4633      	mov	r3, r6
 8007db2:	462a      	mov	r2, r5
 8007db4:	f7f8 fa68 	bl	8000288 <__aeabi_dsub>
 8007db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dbc:	4656      	mov	r6, sl
 8007dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc2:	f7f8 fec9 	bl	8000b58 <__aeabi_d2iz>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	f7f8 fbac 	bl	8000524 <__aeabi_i2d>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd4:	f7f8 fa58 	bl	8000288 <__aeabi_dsub>
 8007dd8:	3530      	adds	r5, #48	@ 0x30
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007de2:	f806 5b01 	strb.w	r5, [r6], #1
 8007de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dea:	f7f8 fe77 	bl	8000adc <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d171      	bne.n	8007ed6 <_dtoa_r+0x65e>
 8007df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df6:	4911      	ldr	r1, [pc, #68]	@ (8007e3c <_dtoa_r+0x5c4>)
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f7f8 fa45 	bl	8000288 <__aeabi_dsub>
 8007dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e02:	f7f8 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 8095 	bne.w	8007f36 <_dtoa_r+0x6be>
 8007e0c:	42a6      	cmp	r6, r4
 8007e0e:	f43f af50 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e16:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fbed 	bl	80005f8 <__aeabi_dmul>
 8007e1e:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <_dtoa_r+0x5c8>)
 8007e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e24:	2200      	movs	r2, #0
 8007e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2a:	f7f8 fbe5 	bl	80005f8 <__aeabi_dmul>
 8007e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e32:	e7c4      	b.n	8007dbe <_dtoa_r+0x546>
 8007e34:	0800aa28 	.word	0x0800aa28
 8007e38:	0800aa00 	.word	0x0800aa00
 8007e3c:	3ff00000 	.word	0x3ff00000
 8007e40:	40240000 	.word	0x40240000
 8007e44:	401c0000 	.word	0x401c0000
 8007e48:	40140000 	.word	0x40140000
 8007e4c:	3fe00000 	.word	0x3fe00000
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7f8 fbd0 	bl	80005f8 <__aeabi_dmul>
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e5e:	4656      	mov	r6, sl
 8007e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e64:	f7f8 fe78 	bl	8000b58 <__aeabi_d2iz>
 8007e68:	4605      	mov	r5, r0
 8007e6a:	f7f8 fb5b 	bl	8000524 <__aeabi_i2d>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e76:	f7f8 fa07 	bl	8000288 <__aeabi_dsub>
 8007e7a:	3530      	adds	r5, #48	@ 0x30
 8007e7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	d124      	bne.n	8007eda <_dtoa_r+0x662>
 8007e90:	4bac      	ldr	r3, [pc, #688]	@ (8008144 <_dtoa_r+0x8cc>)
 8007e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e96:	f7f8 f9f9 	bl	800028c <__adddf3>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea2:	f7f8 fe39 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d145      	bne.n	8007f36 <_dtoa_r+0x6be>
 8007eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eae:	49a5      	ldr	r1, [pc, #660]	@ (8008144 <_dtoa_r+0x8cc>)
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f7f8 f9e9 	bl	8000288 <__aeabi_dsub>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebe:	f7f8 fe0d 	bl	8000adc <__aeabi_dcmplt>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f43f aef5 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007ec8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007eca:	1e73      	subs	r3, r6, #1
 8007ecc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ece:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ed2:	2b30      	cmp	r3, #48	@ 0x30
 8007ed4:	d0f8      	beq.n	8007ec8 <_dtoa_r+0x650>
 8007ed6:	9f04      	ldr	r7, [sp, #16]
 8007ed8:	e73e      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007eda:	4b9b      	ldr	r3, [pc, #620]	@ (8008148 <_dtoa_r+0x8d0>)
 8007edc:	f7f8 fb8c 	bl	80005f8 <__aeabi_dmul>
 8007ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee4:	e7bc      	b.n	8007e60 <_dtoa_r+0x5e8>
 8007ee6:	d10c      	bne.n	8007f02 <_dtoa_r+0x68a>
 8007ee8:	4b98      	ldr	r3, [pc, #608]	@ (800814c <_dtoa_r+0x8d4>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef8:	f7f8 fe04 	bl	8000b04 <__aeabi_dcmpge>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f000 8157 	beq.w	80081b0 <_dtoa_r+0x938>
 8007f02:	2400      	movs	r4, #0
 8007f04:	4625      	mov	r5, r4
 8007f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	4656      	mov	r6, sl
 8007f0e:	2700      	movs	r7, #0
 8007f10:	4621      	mov	r1, r4
 8007f12:	4658      	mov	r0, fp
 8007f14:	f000 fafe 	bl	8008514 <_Bfree>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	d0dc      	beq.n	8007ed6 <_dtoa_r+0x65e>
 8007f1c:	b12f      	cbz	r7, 8007f2a <_dtoa_r+0x6b2>
 8007f1e:	42af      	cmp	r7, r5
 8007f20:	d003      	beq.n	8007f2a <_dtoa_r+0x6b2>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 faf5 	bl	8008514 <_Bfree>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 faf1 	bl	8008514 <_Bfree>
 8007f32:	e7d0      	b.n	8007ed6 <_dtoa_r+0x65e>
 8007f34:	9704      	str	r7, [sp, #16]
 8007f36:	4633      	mov	r3, r6
 8007f38:	461e      	mov	r6, r3
 8007f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3e:	2a39      	cmp	r2, #57	@ 0x39
 8007f40:	d107      	bne.n	8007f52 <_dtoa_r+0x6da>
 8007f42:	459a      	cmp	sl, r3
 8007f44:	d1f8      	bne.n	8007f38 <_dtoa_r+0x6c0>
 8007f46:	9a04      	ldr	r2, [sp, #16]
 8007f48:	3201      	adds	r2, #1
 8007f4a:	9204      	str	r2, [sp, #16]
 8007f4c:	2230      	movs	r2, #48	@ 0x30
 8007f4e:	f88a 2000 	strb.w	r2, [sl]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	3201      	adds	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e7bd      	b.n	8007ed6 <_dtoa_r+0x65e>
 8007f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008148 <_dtoa_r+0x8d0>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f7f8 fb4b 	bl	80005f8 <__aeabi_dmul>
 8007f62:	2200      	movs	r2, #0
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	f7f8 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f aebb 	beq.w	8007cea <_dtoa_r+0x472>
 8007f74:	e6f0      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	f000 80db 	beq.w	8008134 <_dtoa_r+0x8bc>
 8007f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f80:	2a01      	cmp	r2, #1
 8007f82:	f300 80bf 	bgt.w	8008104 <_dtoa_r+0x88c>
 8007f86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	f000 80b7 	beq.w	80080fc <_dtoa_r+0x884>
 8007f8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f94:	4646      	mov	r6, r8
 8007f96:	9a08      	ldr	r2, [sp, #32]
 8007f98:	2101      	movs	r1, #1
 8007f9a:	441a      	add	r2, r3
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	4498      	add	r8, r3
 8007fa0:	9208      	str	r2, [sp, #32]
 8007fa2:	f000 fb6b 	bl	800867c <__i2b>
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	b15e      	cbz	r6, 8007fc2 <_dtoa_r+0x74a>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dd08      	ble.n	8007fc2 <_dtoa_r+0x74a>
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	9a08      	ldr	r2, [sp, #32]
 8007fb4:	bfa8      	it	ge
 8007fb6:	4633      	movge	r3, r6
 8007fb8:	eba8 0803 	sub.w	r8, r8, r3
 8007fbc:	1af6      	subs	r6, r6, r3
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fc4:	b1f3      	cbz	r3, 8008004 <_dtoa_r+0x78c>
 8007fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80b7 	beq.w	800813c <_dtoa_r+0x8c4>
 8007fce:	b18c      	cbz	r4, 8007ff4 <_dtoa_r+0x77c>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f000 fc11 	bl	80087fc <__pow5mult>
 8007fda:	464a      	mov	r2, r9
 8007fdc:	4601      	mov	r1, r0
 8007fde:	4605      	mov	r5, r0
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f000 fb61 	bl	80086a8 <__multiply>
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	9004      	str	r0, [sp, #16]
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fa92 	bl	8008514 <_Bfree>
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	4699      	mov	r9, r3
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ff6:	1b1a      	subs	r2, r3, r4
 8007ff8:	d004      	beq.n	8008004 <_dtoa_r+0x78c>
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fbfd 	bl	80087fc <__pow5mult>
 8008002:	4681      	mov	r9, r0
 8008004:	2101      	movs	r1, #1
 8008006:	4658      	mov	r0, fp
 8008008:	f000 fb38 	bl	800867c <__i2b>
 800800c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800e:	4604      	mov	r4, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 81cf 	beq.w	80083b4 <_dtoa_r+0xb3c>
 8008016:	461a      	mov	r2, r3
 8008018:	4601      	mov	r1, r0
 800801a:	4658      	mov	r0, fp
 800801c:	f000 fbee 	bl	80087fc <__pow5mult>
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	2b01      	cmp	r3, #1
 8008024:	4604      	mov	r4, r0
 8008026:	f300 8095 	bgt.w	8008154 <_dtoa_r+0x8dc>
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8087 	bne.w	8008140 <_dtoa_r+0x8c8>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8089 	bne.w	8008150 <_dtoa_r+0x8d8>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008044:	0d1b      	lsrs	r3, r3, #20
 8008046:	051b      	lsls	r3, r3, #20
 8008048:	b12b      	cbz	r3, 8008056 <_dtoa_r+0x7de>
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	3301      	adds	r3, #1
 800804e:	9308      	str	r3, [sp, #32]
 8008050:	f108 0801 	add.w	r8, r8, #1
 8008054:	2301      	movs	r3, #1
 8008056:	930a      	str	r3, [sp, #40]	@ 0x28
 8008058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 81b0 	beq.w	80083c0 <_dtoa_r+0xb48>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008066:	6918      	ldr	r0, [r3, #16]
 8008068:	f000 fabc 	bl	80085e4 <__hi0bits>
 800806c:	f1c0 0020 	rsb	r0, r0, #32
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	4418      	add	r0, r3
 8008074:	f010 001f 	ands.w	r0, r0, #31
 8008078:	d077      	beq.n	800816a <_dtoa_r+0x8f2>
 800807a:	f1c0 0320 	rsb	r3, r0, #32
 800807e:	2b04      	cmp	r3, #4
 8008080:	dd6b      	ble.n	800815a <_dtoa_r+0x8e2>
 8008082:	9b08      	ldr	r3, [sp, #32]
 8008084:	f1c0 001c 	rsb	r0, r0, #28
 8008088:	4403      	add	r3, r0
 800808a:	4480      	add	r8, r0
 800808c:	4406      	add	r6, r0
 800808e:	9308      	str	r3, [sp, #32]
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	dd05      	ble.n	80080a2 <_dtoa_r+0x82a>
 8008096:	4649      	mov	r1, r9
 8008098:	4642      	mov	r2, r8
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc08 	bl	80088b0 <__lshift>
 80080a0:	4681      	mov	r9, r0
 80080a2:	9b08      	ldr	r3, [sp, #32]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dd05      	ble.n	80080b4 <_dtoa_r+0x83c>
 80080a8:	4621      	mov	r1, r4
 80080aa:	461a      	mov	r2, r3
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fbff 	bl	80088b0 <__lshift>
 80080b2:	4604      	mov	r4, r0
 80080b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d059      	beq.n	800816e <_dtoa_r+0x8f6>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4648      	mov	r0, r9
 80080be:	f000 fc63 	bl	8008988 <__mcmp>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	da53      	bge.n	800816e <_dtoa_r+0x8f6>
 80080c6:	1e7b      	subs	r3, r7, #1
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	4649      	mov	r1, r9
 80080cc:	2300      	movs	r3, #0
 80080ce:	220a      	movs	r2, #10
 80080d0:	4658      	mov	r0, fp
 80080d2:	f000 fa41 	bl	8008558 <__multadd>
 80080d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d8:	4681      	mov	r9, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8172 	beq.w	80083c4 <_dtoa_r+0xb4c>
 80080e0:	2300      	movs	r3, #0
 80080e2:	4629      	mov	r1, r5
 80080e4:	220a      	movs	r2, #10
 80080e6:	4658      	mov	r0, fp
 80080e8:	f000 fa36 	bl	8008558 <__multadd>
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	4605      	mov	r5, r0
 80080f2:	dc67      	bgt.n	80081c4 <_dtoa_r+0x94c>
 80080f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	dc41      	bgt.n	800817e <_dtoa_r+0x906>
 80080fa:	e063      	b.n	80081c4 <_dtoa_r+0x94c>
 80080fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008102:	e746      	b.n	8007f92 <_dtoa_r+0x71a>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	1e5c      	subs	r4, r3, #1
 8008108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810a:	42a3      	cmp	r3, r4
 800810c:	bfbf      	itttt	lt
 800810e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008110:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008112:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008114:	1ae3      	sublt	r3, r4, r3
 8008116:	bfb4      	ite	lt
 8008118:	18d2      	addlt	r2, r2, r3
 800811a:	1b1c      	subge	r4, r3, r4
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	bfbc      	itt	lt
 8008120:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008122:	2400      	movlt	r4, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfb5      	itete	lt
 8008128:	eba8 0603 	sublt.w	r6, r8, r3
 800812c:	9b07      	ldrge	r3, [sp, #28]
 800812e:	2300      	movlt	r3, #0
 8008130:	4646      	movge	r6, r8
 8008132:	e730      	b.n	8007f96 <_dtoa_r+0x71e>
 8008134:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008136:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008138:	4646      	mov	r6, r8
 800813a:	e735      	b.n	8007fa8 <_dtoa_r+0x730>
 800813c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800813e:	e75c      	b.n	8007ffa <_dtoa_r+0x782>
 8008140:	2300      	movs	r3, #0
 8008142:	e788      	b.n	8008056 <_dtoa_r+0x7de>
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	40240000 	.word	0x40240000
 800814c:	40140000 	.word	0x40140000
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	e780      	b.n	8008056 <_dtoa_r+0x7de>
 8008154:	2300      	movs	r3, #0
 8008156:	930a      	str	r3, [sp, #40]	@ 0x28
 8008158:	e782      	b.n	8008060 <_dtoa_r+0x7e8>
 800815a:	d099      	beq.n	8008090 <_dtoa_r+0x818>
 800815c:	9a08      	ldr	r2, [sp, #32]
 800815e:	331c      	adds	r3, #28
 8008160:	441a      	add	r2, r3
 8008162:	4498      	add	r8, r3
 8008164:	441e      	add	r6, r3
 8008166:	9208      	str	r2, [sp, #32]
 8008168:	e792      	b.n	8008090 <_dtoa_r+0x818>
 800816a:	4603      	mov	r3, r0
 800816c:	e7f6      	b.n	800815c <_dtoa_r+0x8e4>
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	9704      	str	r7, [sp, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc20      	bgt.n	80081b8 <_dtoa_r+0x940>
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817a:	2b02      	cmp	r3, #2
 800817c:	dd1e      	ble.n	80081bc <_dtoa_r+0x944>
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f47f aec0 	bne.w	8007f06 <_dtoa_r+0x68e>
 8008186:	4621      	mov	r1, r4
 8008188:	2205      	movs	r2, #5
 800818a:	4658      	mov	r0, fp
 800818c:	f000 f9e4 	bl	8008558 <__multadd>
 8008190:	4601      	mov	r1, r0
 8008192:	4604      	mov	r4, r0
 8008194:	4648      	mov	r0, r9
 8008196:	f000 fbf7 	bl	8008988 <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	f77f aeb3 	ble.w	8007f06 <_dtoa_r+0x68e>
 80081a0:	4656      	mov	r6, sl
 80081a2:	2331      	movs	r3, #49	@ 0x31
 80081a4:	f806 3b01 	strb.w	r3, [r6], #1
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	3301      	adds	r3, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	e6ae      	b.n	8007f0e <_dtoa_r+0x696>
 80081b0:	9c07      	ldr	r4, [sp, #28]
 80081b2:	9704      	str	r7, [sp, #16]
 80081b4:	4625      	mov	r5, r4
 80081b6:	e7f3      	b.n	80081a0 <_dtoa_r+0x928>
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8104 	beq.w	80083cc <_dtoa_r+0xb54>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	dd05      	ble.n	80081d4 <_dtoa_r+0x95c>
 80081c8:	4629      	mov	r1, r5
 80081ca:	4632      	mov	r2, r6
 80081cc:	4658      	mov	r0, fp
 80081ce:	f000 fb6f 	bl	80088b0 <__lshift>
 80081d2:	4605      	mov	r5, r0
 80081d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d05a      	beq.n	8008290 <_dtoa_r+0xa18>
 80081da:	6869      	ldr	r1, [r5, #4]
 80081dc:	4658      	mov	r0, fp
 80081de:	f000 f959 	bl	8008494 <_Balloc>
 80081e2:	4606      	mov	r6, r0
 80081e4:	b928      	cbnz	r0, 80081f2 <_dtoa_r+0x97a>
 80081e6:	4b84      	ldr	r3, [pc, #528]	@ (80083f8 <_dtoa_r+0xb80>)
 80081e8:	4602      	mov	r2, r0
 80081ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081ee:	f7ff bb5a 	b.w	80078a6 <_dtoa_r+0x2e>
 80081f2:	692a      	ldr	r2, [r5, #16]
 80081f4:	3202      	adds	r2, #2
 80081f6:	0092      	lsls	r2, r2, #2
 80081f8:	f105 010c 	add.w	r1, r5, #12
 80081fc:	300c      	adds	r0, #12
 80081fe:	f7ff faa4 	bl	800774a <memcpy>
 8008202:	2201      	movs	r2, #1
 8008204:	4631      	mov	r1, r6
 8008206:	4658      	mov	r0, fp
 8008208:	f000 fb52 	bl	80088b0 <__lshift>
 800820c:	f10a 0301 	add.w	r3, sl, #1
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	4453      	add	r3, sl
 8008216:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008218:	9b02      	ldr	r3, [sp, #8]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	462f      	mov	r7, r5
 8008220:	930a      	str	r3, [sp, #40]	@ 0x28
 8008222:	4605      	mov	r5, r0
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	4621      	mov	r1, r4
 8008228:	3b01      	subs	r3, #1
 800822a:	4648      	mov	r0, r9
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	f7ff fa9a 	bl	8007766 <quorem>
 8008232:	4639      	mov	r1, r7
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800823a:	4648      	mov	r0, r9
 800823c:	f000 fba4 	bl	8008988 <__mcmp>
 8008240:	462a      	mov	r2, r5
 8008242:	9008      	str	r0, [sp, #32]
 8008244:	4621      	mov	r1, r4
 8008246:	4658      	mov	r0, fp
 8008248:	f000 fbba 	bl	80089c0 <__mdiff>
 800824c:	68c2      	ldr	r2, [r0, #12]
 800824e:	4606      	mov	r6, r0
 8008250:	bb02      	cbnz	r2, 8008294 <_dtoa_r+0xa1c>
 8008252:	4601      	mov	r1, r0
 8008254:	4648      	mov	r0, r9
 8008256:	f000 fb97 	bl	8008988 <__mcmp>
 800825a:	4602      	mov	r2, r0
 800825c:	4631      	mov	r1, r6
 800825e:	4658      	mov	r0, fp
 8008260:	920e      	str	r2, [sp, #56]	@ 0x38
 8008262:	f000 f957 	bl	8008514 <_Bfree>
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800826a:	9e07      	ldr	r6, [sp, #28]
 800826c:	ea43 0102 	orr.w	r1, r3, r2
 8008270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008272:	4319      	orrs	r1, r3
 8008274:	d110      	bne.n	8008298 <_dtoa_r+0xa20>
 8008276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800827a:	d029      	beq.n	80082d0 <_dtoa_r+0xa58>
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd02      	ble.n	8008288 <_dtoa_r+0xa10>
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	f883 8000 	strb.w	r8, [r3]
 800828e:	e63f      	b.n	8007f10 <_dtoa_r+0x698>
 8008290:	4628      	mov	r0, r5
 8008292:	e7bb      	b.n	800820c <_dtoa_r+0x994>
 8008294:	2201      	movs	r2, #1
 8008296:	e7e1      	b.n	800825c <_dtoa_r+0x9e4>
 8008298:	9b08      	ldr	r3, [sp, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db04      	blt.n	80082a8 <_dtoa_r+0xa30>
 800829e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a0:	430b      	orrs	r3, r1
 80082a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082a4:	430b      	orrs	r3, r1
 80082a6:	d120      	bne.n	80082ea <_dtoa_r+0xa72>
 80082a8:	2a00      	cmp	r2, #0
 80082aa:	dded      	ble.n	8008288 <_dtoa_r+0xa10>
 80082ac:	4649      	mov	r1, r9
 80082ae:	2201      	movs	r2, #1
 80082b0:	4658      	mov	r0, fp
 80082b2:	f000 fafd 	bl	80088b0 <__lshift>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4681      	mov	r9, r0
 80082ba:	f000 fb65 	bl	8008988 <__mcmp>
 80082be:	2800      	cmp	r0, #0
 80082c0:	dc03      	bgt.n	80082ca <_dtoa_r+0xa52>
 80082c2:	d1e1      	bne.n	8008288 <_dtoa_r+0xa10>
 80082c4:	f018 0f01 	tst.w	r8, #1
 80082c8:	d0de      	beq.n	8008288 <_dtoa_r+0xa10>
 80082ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ce:	d1d8      	bne.n	8008282 <_dtoa_r+0xa0a>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	2339      	movs	r3, #57	@ 0x39
 80082d4:	7013      	strb	r3, [r2, #0]
 80082d6:	4633      	mov	r3, r6
 80082d8:	461e      	mov	r6, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082e0:	2a39      	cmp	r2, #57	@ 0x39
 80082e2:	d052      	beq.n	800838a <_dtoa_r+0xb12>
 80082e4:	3201      	adds	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e612      	b.n	8007f10 <_dtoa_r+0x698>
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	dd07      	ble.n	80082fe <_dtoa_r+0xa86>
 80082ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082f2:	d0ed      	beq.n	80082d0 <_dtoa_r+0xa58>
 80082f4:	9a00      	ldr	r2, [sp, #0]
 80082f6:	f108 0301 	add.w	r3, r8, #1
 80082fa:	7013      	strb	r3, [r2, #0]
 80082fc:	e608      	b.n	8007f10 <_dtoa_r+0x698>
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	9a07      	ldr	r2, [sp, #28]
 8008302:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	4293      	cmp	r3, r2
 800830a:	d028      	beq.n	800835e <_dtoa_r+0xae6>
 800830c:	4649      	mov	r1, r9
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4658      	mov	r0, fp
 8008314:	f000 f920 	bl	8008558 <__multadd>
 8008318:	42af      	cmp	r7, r5
 800831a:	4681      	mov	r9, r0
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	f04f 020a 	mov.w	r2, #10
 8008324:	4639      	mov	r1, r7
 8008326:	4658      	mov	r0, fp
 8008328:	d107      	bne.n	800833a <_dtoa_r+0xac2>
 800832a:	f000 f915 	bl	8008558 <__multadd>
 800832e:	4607      	mov	r7, r0
 8008330:	4605      	mov	r5, r0
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	3301      	adds	r3, #1
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	e774      	b.n	8008224 <_dtoa_r+0x9ac>
 800833a:	f000 f90d 	bl	8008558 <__multadd>
 800833e:	4629      	mov	r1, r5
 8008340:	4607      	mov	r7, r0
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4658      	mov	r0, fp
 8008348:	f000 f906 	bl	8008558 <__multadd>
 800834c:	4605      	mov	r5, r0
 800834e:	e7f0      	b.n	8008332 <_dtoa_r+0xaba>
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfcc      	ite	gt
 8008356:	461e      	movgt	r6, r3
 8008358:	2601      	movle	r6, #1
 800835a:	4456      	add	r6, sl
 800835c:	2700      	movs	r7, #0
 800835e:	4649      	mov	r1, r9
 8008360:	2201      	movs	r2, #1
 8008362:	4658      	mov	r0, fp
 8008364:	f000 faa4 	bl	80088b0 <__lshift>
 8008368:	4621      	mov	r1, r4
 800836a:	4681      	mov	r9, r0
 800836c:	f000 fb0c 	bl	8008988 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	dcb0      	bgt.n	80082d6 <_dtoa_r+0xa5e>
 8008374:	d102      	bne.n	800837c <_dtoa_r+0xb04>
 8008376:	f018 0f01 	tst.w	r8, #1
 800837a:	d1ac      	bne.n	80082d6 <_dtoa_r+0xa5e>
 800837c:	4633      	mov	r3, r6
 800837e:	461e      	mov	r6, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a30      	cmp	r2, #48	@ 0x30
 8008386:	d0fa      	beq.n	800837e <_dtoa_r+0xb06>
 8008388:	e5c2      	b.n	8007f10 <_dtoa_r+0x698>
 800838a:	459a      	cmp	sl, r3
 800838c:	d1a4      	bne.n	80082d8 <_dtoa_r+0xa60>
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	3301      	adds	r3, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	2331      	movs	r3, #49	@ 0x31
 8008396:	f88a 3000 	strb.w	r3, [sl]
 800839a:	e5b9      	b.n	8007f10 <_dtoa_r+0x698>
 800839c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800839e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083fc <_dtoa_r+0xb84>
 80083a2:	b11b      	cbz	r3, 80083ac <_dtoa_r+0xb34>
 80083a4:	f10a 0308 	add.w	r3, sl, #8
 80083a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	4650      	mov	r0, sl
 80083ae:	b019      	add	sp, #100	@ 0x64
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	f77f ae37 	ble.w	800802a <_dtoa_r+0x7b2>
 80083bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083be:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c0:	2001      	movs	r0, #1
 80083c2:	e655      	b.n	8008070 <_dtoa_r+0x7f8>
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f77f aed6 	ble.w	8008178 <_dtoa_r+0x900>
 80083cc:	4656      	mov	r6, sl
 80083ce:	4621      	mov	r1, r4
 80083d0:	4648      	mov	r0, r9
 80083d2:	f7ff f9c8 	bl	8007766 <quorem>
 80083d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083da:	f806 8b01 	strb.w	r8, [r6], #1
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	eba6 020a 	sub.w	r2, r6, sl
 80083e4:	4293      	cmp	r3, r2
 80083e6:	ddb3      	ble.n	8008350 <_dtoa_r+0xad8>
 80083e8:	4649      	mov	r1, r9
 80083ea:	2300      	movs	r3, #0
 80083ec:	220a      	movs	r2, #10
 80083ee:	4658      	mov	r0, fp
 80083f0:	f000 f8b2 	bl	8008558 <__multadd>
 80083f4:	4681      	mov	r9, r0
 80083f6:	e7ea      	b.n	80083ce <_dtoa_r+0xb56>
 80083f8:	0800a984 	.word	0x0800a984
 80083fc:	0800a908 	.word	0x0800a908

08008400 <_free_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4605      	mov	r5, r0
 8008404:	2900      	cmp	r1, #0
 8008406:	d041      	beq.n	800848c <_free_r+0x8c>
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f0c      	subs	r4, r1, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfb8      	it	lt
 8008412:	18e4      	addlt	r4, r4, r3
 8008414:	f7fe fba0 	bl	8006b58 <__malloc_lock>
 8008418:	4a1d      	ldr	r2, [pc, #116]	@ (8008490 <_free_r+0x90>)
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	b933      	cbnz	r3, 800842c <_free_r+0x2c>
 800841e:	6063      	str	r3, [r4, #4]
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	4628      	mov	r0, r5
 8008424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008428:	f7fe bb9c 	b.w	8006b64 <__malloc_unlock>
 800842c:	42a3      	cmp	r3, r4
 800842e:	d908      	bls.n	8008442 <_free_r+0x42>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428b      	cmp	r3, r1
 8008436:	bf01      	itttt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	1809      	addeq	r1, r1, r0
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	e7ed      	b.n	800841e <_free_r+0x1e>
 8008442:	461a      	mov	r2, r3
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	b10b      	cbz	r3, 800844c <_free_r+0x4c>
 8008448:	42a3      	cmp	r3, r4
 800844a:	d9fa      	bls.n	8008442 <_free_r+0x42>
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	1850      	adds	r0, r2, r1
 8008450:	42a0      	cmp	r0, r4
 8008452:	d10b      	bne.n	800846c <_free_r+0x6c>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	4401      	add	r1, r0
 8008458:	1850      	adds	r0, r2, r1
 800845a:	4283      	cmp	r3, r0
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	d1e0      	bne.n	8008422 <_free_r+0x22>
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6053      	str	r3, [r2, #4]
 8008466:	4408      	add	r0, r1
 8008468:	6010      	str	r0, [r2, #0]
 800846a:	e7da      	b.n	8008422 <_free_r+0x22>
 800846c:	d902      	bls.n	8008474 <_free_r+0x74>
 800846e:	230c      	movs	r3, #12
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	e7d6      	b.n	8008422 <_free_r+0x22>
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	1821      	adds	r1, r4, r0
 8008478:	428b      	cmp	r3, r1
 800847a:	bf04      	itt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	bf04      	itt	eq
 8008484:	1809      	addeq	r1, r1, r0
 8008486:	6021      	streq	r1, [r4, #0]
 8008488:	6054      	str	r4, [r2, #4]
 800848a:	e7ca      	b.n	8008422 <_free_r+0x22>
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	200008f4 	.word	0x200008f4

08008494 <_Balloc>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	69c6      	ldr	r6, [r0, #28]
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	b976      	cbnz	r6, 80084bc <_Balloc+0x28>
 800849e:	2010      	movs	r0, #16
 80084a0:	f7fe fab0 	bl	8006a04 <malloc>
 80084a4:	4602      	mov	r2, r0
 80084a6:	61e0      	str	r0, [r4, #28]
 80084a8:	b920      	cbnz	r0, 80084b4 <_Balloc+0x20>
 80084aa:	4b18      	ldr	r3, [pc, #96]	@ (800850c <_Balloc+0x78>)
 80084ac:	4818      	ldr	r0, [pc, #96]	@ (8008510 <_Balloc+0x7c>)
 80084ae:	216b      	movs	r1, #107	@ 0x6b
 80084b0:	f000 fc1e 	bl	8008cf0 <__assert_func>
 80084b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b8:	6006      	str	r6, [r0, #0]
 80084ba:	60c6      	str	r6, [r0, #12]
 80084bc:	69e6      	ldr	r6, [r4, #28]
 80084be:	68f3      	ldr	r3, [r6, #12]
 80084c0:	b183      	cbz	r3, 80084e4 <_Balloc+0x50>
 80084c2:	69e3      	ldr	r3, [r4, #28]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084ca:	b9b8      	cbnz	r0, 80084fc <_Balloc+0x68>
 80084cc:	2101      	movs	r1, #1
 80084ce:	fa01 f605 	lsl.w	r6, r1, r5
 80084d2:	1d72      	adds	r2, r6, #5
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fc28 	bl	8008d2c <_calloc_r>
 80084dc:	b160      	cbz	r0, 80084f8 <_Balloc+0x64>
 80084de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084e2:	e00e      	b.n	8008502 <_Balloc+0x6e>
 80084e4:	2221      	movs	r2, #33	@ 0x21
 80084e6:	2104      	movs	r1, #4
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fc1f 	bl	8008d2c <_calloc_r>
 80084ee:	69e3      	ldr	r3, [r4, #28]
 80084f0:	60f0      	str	r0, [r6, #12]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e4      	bne.n	80084c2 <_Balloc+0x2e>
 80084f8:	2000      	movs	r0, #0
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	6802      	ldr	r2, [r0, #0]
 80084fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008502:	2300      	movs	r3, #0
 8008504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008508:	e7f7      	b.n	80084fa <_Balloc+0x66>
 800850a:	bf00      	nop
 800850c:	0800a915 	.word	0x0800a915
 8008510:	0800a995 	.word	0x0800a995

08008514 <_Bfree>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	69c6      	ldr	r6, [r0, #28]
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b976      	cbnz	r6, 800853c <_Bfree+0x28>
 800851e:	2010      	movs	r0, #16
 8008520:	f7fe fa70 	bl	8006a04 <malloc>
 8008524:	4602      	mov	r2, r0
 8008526:	61e8      	str	r0, [r5, #28]
 8008528:	b920      	cbnz	r0, 8008534 <_Bfree+0x20>
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <_Bfree+0x3c>)
 800852c:	4809      	ldr	r0, [pc, #36]	@ (8008554 <_Bfree+0x40>)
 800852e:	218f      	movs	r1, #143	@ 0x8f
 8008530:	f000 fbde 	bl	8008cf0 <__assert_func>
 8008534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008538:	6006      	str	r6, [r0, #0]
 800853a:	60c6      	str	r6, [r0, #12]
 800853c:	b13c      	cbz	r4, 800854e <_Bfree+0x3a>
 800853e:	69eb      	ldr	r3, [r5, #28]
 8008540:	6862      	ldr	r2, [r4, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008548:	6021      	str	r1, [r4, #0]
 800854a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	0800a915 	.word	0x0800a915
 8008554:	0800a995 	.word	0x0800a995

08008558 <__multadd>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	690d      	ldr	r5, [r1, #16]
 800855e:	4607      	mov	r7, r0
 8008560:	460c      	mov	r4, r1
 8008562:	461e      	mov	r6, r3
 8008564:	f101 0c14 	add.w	ip, r1, #20
 8008568:	2000      	movs	r0, #0
 800856a:	f8dc 3000 	ldr.w	r3, [ip]
 800856e:	b299      	uxth	r1, r3
 8008570:	fb02 6101 	mla	r1, r2, r1, r6
 8008574:	0c1e      	lsrs	r6, r3, #16
 8008576:	0c0b      	lsrs	r3, r1, #16
 8008578:	fb02 3306 	mla	r3, r2, r6, r3
 800857c:	b289      	uxth	r1, r1
 800857e:	3001      	adds	r0, #1
 8008580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008584:	4285      	cmp	r5, r0
 8008586:	f84c 1b04 	str.w	r1, [ip], #4
 800858a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800858e:	dcec      	bgt.n	800856a <__multadd+0x12>
 8008590:	b30e      	cbz	r6, 80085d6 <__multadd+0x7e>
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	42ab      	cmp	r3, r5
 8008596:	dc19      	bgt.n	80085cc <__multadd+0x74>
 8008598:	6861      	ldr	r1, [r4, #4]
 800859a:	4638      	mov	r0, r7
 800859c:	3101      	adds	r1, #1
 800859e:	f7ff ff79 	bl	8008494 <_Balloc>
 80085a2:	4680      	mov	r8, r0
 80085a4:	b928      	cbnz	r0, 80085b2 <__multadd+0x5a>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b0c      	ldr	r3, [pc, #48]	@ (80085dc <__multadd+0x84>)
 80085aa:	480d      	ldr	r0, [pc, #52]	@ (80085e0 <__multadd+0x88>)
 80085ac:	21ba      	movs	r1, #186	@ 0xba
 80085ae:	f000 fb9f 	bl	8008cf0 <__assert_func>
 80085b2:	6922      	ldr	r2, [r4, #16]
 80085b4:	3202      	adds	r2, #2
 80085b6:	f104 010c 	add.w	r1, r4, #12
 80085ba:	0092      	lsls	r2, r2, #2
 80085bc:	300c      	adds	r0, #12
 80085be:	f7ff f8c4 	bl	800774a <memcpy>
 80085c2:	4621      	mov	r1, r4
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ffa5 	bl	8008514 <_Bfree>
 80085ca:	4644      	mov	r4, r8
 80085cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085d0:	3501      	adds	r5, #1
 80085d2:	615e      	str	r6, [r3, #20]
 80085d4:	6125      	str	r5, [r4, #16]
 80085d6:	4620      	mov	r0, r4
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	0800a984 	.word	0x0800a984
 80085e0:	0800a995 	.word	0x0800a995

080085e4 <__hi0bits>:
 80085e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085e8:	4603      	mov	r3, r0
 80085ea:	bf36      	itet	cc
 80085ec:	0403      	lslcc	r3, r0, #16
 80085ee:	2000      	movcs	r0, #0
 80085f0:	2010      	movcc	r0, #16
 80085f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085f6:	bf3c      	itt	cc
 80085f8:	021b      	lslcc	r3, r3, #8
 80085fa:	3008      	addcc	r0, #8
 80085fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008600:	bf3c      	itt	cc
 8008602:	011b      	lslcc	r3, r3, #4
 8008604:	3004      	addcc	r0, #4
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860a:	bf3c      	itt	cc
 800860c:	009b      	lslcc	r3, r3, #2
 800860e:	3002      	addcc	r0, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	db05      	blt.n	8008620 <__hi0bits+0x3c>
 8008614:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008618:	f100 0001 	add.w	r0, r0, #1
 800861c:	bf08      	it	eq
 800861e:	2020      	moveq	r0, #32
 8008620:	4770      	bx	lr

08008622 <__lo0bits>:
 8008622:	6803      	ldr	r3, [r0, #0]
 8008624:	4602      	mov	r2, r0
 8008626:	f013 0007 	ands.w	r0, r3, #7
 800862a:	d00b      	beq.n	8008644 <__lo0bits+0x22>
 800862c:	07d9      	lsls	r1, r3, #31
 800862e:	d421      	bmi.n	8008674 <__lo0bits+0x52>
 8008630:	0798      	lsls	r0, r3, #30
 8008632:	bf49      	itett	mi
 8008634:	085b      	lsrmi	r3, r3, #1
 8008636:	089b      	lsrpl	r3, r3, #2
 8008638:	2001      	movmi	r0, #1
 800863a:	6013      	strmi	r3, [r2, #0]
 800863c:	bf5c      	itt	pl
 800863e:	6013      	strpl	r3, [r2, #0]
 8008640:	2002      	movpl	r0, #2
 8008642:	4770      	bx	lr
 8008644:	b299      	uxth	r1, r3
 8008646:	b909      	cbnz	r1, 800864c <__lo0bits+0x2a>
 8008648:	0c1b      	lsrs	r3, r3, #16
 800864a:	2010      	movs	r0, #16
 800864c:	b2d9      	uxtb	r1, r3
 800864e:	b909      	cbnz	r1, 8008654 <__lo0bits+0x32>
 8008650:	3008      	adds	r0, #8
 8008652:	0a1b      	lsrs	r3, r3, #8
 8008654:	0719      	lsls	r1, r3, #28
 8008656:	bf04      	itt	eq
 8008658:	091b      	lsreq	r3, r3, #4
 800865a:	3004      	addeq	r0, #4
 800865c:	0799      	lsls	r1, r3, #30
 800865e:	bf04      	itt	eq
 8008660:	089b      	lsreq	r3, r3, #2
 8008662:	3002      	addeq	r0, #2
 8008664:	07d9      	lsls	r1, r3, #31
 8008666:	d403      	bmi.n	8008670 <__lo0bits+0x4e>
 8008668:	085b      	lsrs	r3, r3, #1
 800866a:	f100 0001 	add.w	r0, r0, #1
 800866e:	d003      	beq.n	8008678 <__lo0bits+0x56>
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	4770      	bx	lr
 8008674:	2000      	movs	r0, #0
 8008676:	4770      	bx	lr
 8008678:	2020      	movs	r0, #32
 800867a:	4770      	bx	lr

0800867c <__i2b>:
 800867c:	b510      	push	{r4, lr}
 800867e:	460c      	mov	r4, r1
 8008680:	2101      	movs	r1, #1
 8008682:	f7ff ff07 	bl	8008494 <_Balloc>
 8008686:	4602      	mov	r2, r0
 8008688:	b928      	cbnz	r0, 8008696 <__i2b+0x1a>
 800868a:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <__i2b+0x24>)
 800868c:	4805      	ldr	r0, [pc, #20]	@ (80086a4 <__i2b+0x28>)
 800868e:	f240 1145 	movw	r1, #325	@ 0x145
 8008692:	f000 fb2d 	bl	8008cf0 <__assert_func>
 8008696:	2301      	movs	r3, #1
 8008698:	6144      	str	r4, [r0, #20]
 800869a:	6103      	str	r3, [r0, #16]
 800869c:	bd10      	pop	{r4, pc}
 800869e:	bf00      	nop
 80086a0:	0800a984 	.word	0x0800a984
 80086a4:	0800a995 	.word	0x0800a995

080086a8 <__multiply>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4614      	mov	r4, r2
 80086ae:	690a      	ldr	r2, [r1, #16]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	bfa8      	it	ge
 80086b6:	4623      	movge	r3, r4
 80086b8:	460f      	mov	r7, r1
 80086ba:	bfa4      	itt	ge
 80086bc:	460c      	movge	r4, r1
 80086be:	461f      	movge	r7, r3
 80086c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086c8:	68a3      	ldr	r3, [r4, #8]
 80086ca:	6861      	ldr	r1, [r4, #4]
 80086cc:	eb0a 0609 	add.w	r6, sl, r9
 80086d0:	42b3      	cmp	r3, r6
 80086d2:	b085      	sub	sp, #20
 80086d4:	bfb8      	it	lt
 80086d6:	3101      	addlt	r1, #1
 80086d8:	f7ff fedc 	bl	8008494 <_Balloc>
 80086dc:	b930      	cbnz	r0, 80086ec <__multiply+0x44>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b44      	ldr	r3, [pc, #272]	@ (80087f4 <__multiply+0x14c>)
 80086e2:	4845      	ldr	r0, [pc, #276]	@ (80087f8 <__multiply+0x150>)
 80086e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086e8:	f000 fb02 	bl	8008cf0 <__assert_func>
 80086ec:	f100 0514 	add.w	r5, r0, #20
 80086f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086f4:	462b      	mov	r3, r5
 80086f6:	2200      	movs	r2, #0
 80086f8:	4543      	cmp	r3, r8
 80086fa:	d321      	bcc.n	8008740 <__multiply+0x98>
 80086fc:	f107 0114 	add.w	r1, r7, #20
 8008700:	f104 0214 	add.w	r2, r4, #20
 8008704:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008708:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800870c:	9302      	str	r3, [sp, #8]
 800870e:	1b13      	subs	r3, r2, r4
 8008710:	3b15      	subs	r3, #21
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	3304      	adds	r3, #4
 8008718:	f104 0715 	add.w	r7, r4, #21
 800871c:	42ba      	cmp	r2, r7
 800871e:	bf38      	it	cc
 8008720:	2304      	movcc	r3, #4
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	9103      	str	r1, [sp, #12]
 8008728:	428b      	cmp	r3, r1
 800872a:	d80c      	bhi.n	8008746 <__multiply+0x9e>
 800872c:	2e00      	cmp	r6, #0
 800872e:	dd03      	ble.n	8008738 <__multiply+0x90>
 8008730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008734:	2b00      	cmp	r3, #0
 8008736:	d05b      	beq.n	80087f0 <__multiply+0x148>
 8008738:	6106      	str	r6, [r0, #16]
 800873a:	b005      	add	sp, #20
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008740:	f843 2b04 	str.w	r2, [r3], #4
 8008744:	e7d8      	b.n	80086f8 <__multiply+0x50>
 8008746:	f8b1 a000 	ldrh.w	sl, [r1]
 800874a:	f1ba 0f00 	cmp.w	sl, #0
 800874e:	d024      	beq.n	800879a <__multiply+0xf2>
 8008750:	f104 0e14 	add.w	lr, r4, #20
 8008754:	46a9      	mov	r9, r5
 8008756:	f04f 0c00 	mov.w	ip, #0
 800875a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800875e:	f8d9 3000 	ldr.w	r3, [r9]
 8008762:	fa1f fb87 	uxth.w	fp, r7
 8008766:	b29b      	uxth	r3, r3
 8008768:	fb0a 330b 	mla	r3, sl, fp, r3
 800876c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008770:	f8d9 7000 	ldr.w	r7, [r9]
 8008774:	4463      	add	r3, ip
 8008776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800877a:	fb0a c70b 	mla	r7, sl, fp, ip
 800877e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008782:	b29b      	uxth	r3, r3
 8008784:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008788:	4572      	cmp	r2, lr
 800878a:	f849 3b04 	str.w	r3, [r9], #4
 800878e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008792:	d8e2      	bhi.n	800875a <__multiply+0xb2>
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	f845 c003 	str.w	ip, [r5, r3]
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087a0:	3104      	adds	r1, #4
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	d021      	beq.n	80087ec <__multiply+0x144>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	f104 0c14 	add.w	ip, r4, #20
 80087ae:	46ae      	mov	lr, r5
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	f8bc b000 	ldrh.w	fp, [ip]
 80087b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087bc:	fb09 770b 	mla	r7, r9, fp, r7
 80087c0:	4457      	add	r7, sl
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087c8:	f84e 3b04 	str.w	r3, [lr], #4
 80087cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087d4:	f8be 3000 	ldrh.w	r3, [lr]
 80087d8:	fb09 330a 	mla	r3, r9, sl, r3
 80087dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087e0:	4562      	cmp	r2, ip
 80087e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087e6:	d8e5      	bhi.n	80087b4 <__multiply+0x10c>
 80087e8:	9f01      	ldr	r7, [sp, #4]
 80087ea:	51eb      	str	r3, [r5, r7]
 80087ec:	3504      	adds	r5, #4
 80087ee:	e799      	b.n	8008724 <__multiply+0x7c>
 80087f0:	3e01      	subs	r6, #1
 80087f2:	e79b      	b.n	800872c <__multiply+0x84>
 80087f4:	0800a984 	.word	0x0800a984
 80087f8:	0800a995 	.word	0x0800a995

080087fc <__pow5mult>:
 80087fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008800:	4615      	mov	r5, r2
 8008802:	f012 0203 	ands.w	r2, r2, #3
 8008806:	4607      	mov	r7, r0
 8008808:	460e      	mov	r6, r1
 800880a:	d007      	beq.n	800881c <__pow5mult+0x20>
 800880c:	4c25      	ldr	r4, [pc, #148]	@ (80088a4 <__pow5mult+0xa8>)
 800880e:	3a01      	subs	r2, #1
 8008810:	2300      	movs	r3, #0
 8008812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008816:	f7ff fe9f 	bl	8008558 <__multadd>
 800881a:	4606      	mov	r6, r0
 800881c:	10ad      	asrs	r5, r5, #2
 800881e:	d03d      	beq.n	800889c <__pow5mult+0xa0>
 8008820:	69fc      	ldr	r4, [r7, #28]
 8008822:	b97c      	cbnz	r4, 8008844 <__pow5mult+0x48>
 8008824:	2010      	movs	r0, #16
 8008826:	f7fe f8ed 	bl	8006a04 <malloc>
 800882a:	4602      	mov	r2, r0
 800882c:	61f8      	str	r0, [r7, #28]
 800882e:	b928      	cbnz	r0, 800883c <__pow5mult+0x40>
 8008830:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <__pow5mult+0xac>)
 8008832:	481e      	ldr	r0, [pc, #120]	@ (80088ac <__pow5mult+0xb0>)
 8008834:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008838:	f000 fa5a 	bl	8008cf0 <__assert_func>
 800883c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008840:	6004      	str	r4, [r0, #0]
 8008842:	60c4      	str	r4, [r0, #12]
 8008844:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800884c:	b94c      	cbnz	r4, 8008862 <__pow5mult+0x66>
 800884e:	f240 2171 	movw	r1, #625	@ 0x271
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ff12 	bl	800867c <__i2b>
 8008858:	2300      	movs	r3, #0
 800885a:	f8c8 0008 	str.w	r0, [r8, #8]
 800885e:	4604      	mov	r4, r0
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	07eb      	lsls	r3, r5, #31
 8008868:	d50a      	bpl.n	8008880 <__pow5mult+0x84>
 800886a:	4631      	mov	r1, r6
 800886c:	4622      	mov	r2, r4
 800886e:	4638      	mov	r0, r7
 8008870:	f7ff ff1a 	bl	80086a8 <__multiply>
 8008874:	4631      	mov	r1, r6
 8008876:	4680      	mov	r8, r0
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff fe4b 	bl	8008514 <_Bfree>
 800887e:	4646      	mov	r6, r8
 8008880:	106d      	asrs	r5, r5, #1
 8008882:	d00b      	beq.n	800889c <__pow5mult+0xa0>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	b938      	cbnz	r0, 8008898 <__pow5mult+0x9c>
 8008888:	4622      	mov	r2, r4
 800888a:	4621      	mov	r1, r4
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ff0b 	bl	80086a8 <__multiply>
 8008892:	6020      	str	r0, [r4, #0]
 8008894:	f8c0 9000 	str.w	r9, [r0]
 8008898:	4604      	mov	r4, r0
 800889a:	e7e4      	b.n	8008866 <__pow5mult+0x6a>
 800889c:	4630      	mov	r0, r6
 800889e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a2:	bf00      	nop
 80088a4:	0800a9f0 	.word	0x0800a9f0
 80088a8:	0800a915 	.word	0x0800a915
 80088ac:	0800a995 	.word	0x0800a995

080088b0 <__lshift>:
 80088b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b4:	460c      	mov	r4, r1
 80088b6:	6849      	ldr	r1, [r1, #4]
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	4607      	mov	r7, r0
 80088c2:	4691      	mov	r9, r2
 80088c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088c8:	f108 0601 	add.w	r6, r8, #1
 80088cc:	42b3      	cmp	r3, r6
 80088ce:	db0b      	blt.n	80088e8 <__lshift+0x38>
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff fddf 	bl	8008494 <_Balloc>
 80088d6:	4605      	mov	r5, r0
 80088d8:	b948      	cbnz	r0, 80088ee <__lshift+0x3e>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b28      	ldr	r3, [pc, #160]	@ (8008980 <__lshift+0xd0>)
 80088de:	4829      	ldr	r0, [pc, #164]	@ (8008984 <__lshift+0xd4>)
 80088e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088e4:	f000 fa04 	bl	8008cf0 <__assert_func>
 80088e8:	3101      	adds	r1, #1
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	e7ee      	b.n	80088cc <__lshift+0x1c>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f100 0114 	add.w	r1, r0, #20
 80088f4:	f100 0210 	add.w	r2, r0, #16
 80088f8:	4618      	mov	r0, r3
 80088fa:	4553      	cmp	r3, sl
 80088fc:	db33      	blt.n	8008966 <__lshift+0xb6>
 80088fe:	6920      	ldr	r0, [r4, #16]
 8008900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008904:	f104 0314 	add.w	r3, r4, #20
 8008908:	f019 091f 	ands.w	r9, r9, #31
 800890c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008914:	d02b      	beq.n	800896e <__lshift+0xbe>
 8008916:	f1c9 0e20 	rsb	lr, r9, #32
 800891a:	468a      	mov	sl, r1
 800891c:	2200      	movs	r2, #0
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	fa00 f009 	lsl.w	r0, r0, r9
 8008924:	4310      	orrs	r0, r2
 8008926:	f84a 0b04 	str.w	r0, [sl], #4
 800892a:	f853 2b04 	ldr.w	r2, [r3], #4
 800892e:	459c      	cmp	ip, r3
 8008930:	fa22 f20e 	lsr.w	r2, r2, lr
 8008934:	d8f3      	bhi.n	800891e <__lshift+0x6e>
 8008936:	ebac 0304 	sub.w	r3, ip, r4
 800893a:	3b15      	subs	r3, #21
 800893c:	f023 0303 	bic.w	r3, r3, #3
 8008940:	3304      	adds	r3, #4
 8008942:	f104 0015 	add.w	r0, r4, #21
 8008946:	4584      	cmp	ip, r0
 8008948:	bf38      	it	cc
 800894a:	2304      	movcc	r3, #4
 800894c:	50ca      	str	r2, [r1, r3]
 800894e:	b10a      	cbz	r2, 8008954 <__lshift+0xa4>
 8008950:	f108 0602 	add.w	r6, r8, #2
 8008954:	3e01      	subs	r6, #1
 8008956:	4638      	mov	r0, r7
 8008958:	612e      	str	r6, [r5, #16]
 800895a:	4621      	mov	r1, r4
 800895c:	f7ff fdda 	bl	8008514 <_Bfree>
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008966:	f842 0f04 	str.w	r0, [r2, #4]!
 800896a:	3301      	adds	r3, #1
 800896c:	e7c5      	b.n	80088fa <__lshift+0x4a>
 800896e:	3904      	subs	r1, #4
 8008970:	f853 2b04 	ldr.w	r2, [r3], #4
 8008974:	f841 2f04 	str.w	r2, [r1, #4]!
 8008978:	459c      	cmp	ip, r3
 800897a:	d8f9      	bhi.n	8008970 <__lshift+0xc0>
 800897c:	e7ea      	b.n	8008954 <__lshift+0xa4>
 800897e:	bf00      	nop
 8008980:	0800a984 	.word	0x0800a984
 8008984:	0800a995 	.word	0x0800a995

08008988 <__mcmp>:
 8008988:	690a      	ldr	r2, [r1, #16]
 800898a:	4603      	mov	r3, r0
 800898c:	6900      	ldr	r0, [r0, #16]
 800898e:	1a80      	subs	r0, r0, r2
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	d10e      	bne.n	80089b2 <__mcmp+0x2a>
 8008994:	3314      	adds	r3, #20
 8008996:	3114      	adds	r1, #20
 8008998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800899c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a8:	4295      	cmp	r5, r2
 80089aa:	d003      	beq.n	80089b4 <__mcmp+0x2c>
 80089ac:	d205      	bcs.n	80089ba <__mcmp+0x32>
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	d3f3      	bcc.n	80089a0 <__mcmp+0x18>
 80089b8:	e7fb      	b.n	80089b2 <__mcmp+0x2a>
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7f9      	b.n	80089b2 <__mcmp+0x2a>
	...

080089c0 <__mdiff>:
 80089c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4689      	mov	r9, r1
 80089c6:	4606      	mov	r6, r0
 80089c8:	4611      	mov	r1, r2
 80089ca:	4648      	mov	r0, r9
 80089cc:	4614      	mov	r4, r2
 80089ce:	f7ff ffdb 	bl	8008988 <__mcmp>
 80089d2:	1e05      	subs	r5, r0, #0
 80089d4:	d112      	bne.n	80089fc <__mdiff+0x3c>
 80089d6:	4629      	mov	r1, r5
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff fd5b 	bl	8008494 <_Balloc>
 80089de:	4602      	mov	r2, r0
 80089e0:	b928      	cbnz	r0, 80089ee <__mdiff+0x2e>
 80089e2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ae0 <__mdiff+0x120>)
 80089e4:	f240 2137 	movw	r1, #567	@ 0x237
 80089e8:	483e      	ldr	r0, [pc, #248]	@ (8008ae4 <__mdiff+0x124>)
 80089ea:	f000 f981 	bl	8008cf0 <__assert_func>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089f4:	4610      	mov	r0, r2
 80089f6:	b003      	add	sp, #12
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fc:	bfbc      	itt	lt
 80089fe:	464b      	movlt	r3, r9
 8008a00:	46a1      	movlt	r9, r4
 8008a02:	4630      	mov	r0, r6
 8008a04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a08:	bfba      	itte	lt
 8008a0a:	461c      	movlt	r4, r3
 8008a0c:	2501      	movlt	r5, #1
 8008a0e:	2500      	movge	r5, #0
 8008a10:	f7ff fd40 	bl	8008494 <_Balloc>
 8008a14:	4602      	mov	r2, r0
 8008a16:	b918      	cbnz	r0, 8008a20 <__mdiff+0x60>
 8008a18:	4b31      	ldr	r3, [pc, #196]	@ (8008ae0 <__mdiff+0x120>)
 8008a1a:	f240 2145 	movw	r1, #581	@ 0x245
 8008a1e:	e7e3      	b.n	80089e8 <__mdiff+0x28>
 8008a20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a24:	6926      	ldr	r6, [r4, #16]
 8008a26:	60c5      	str	r5, [r0, #12]
 8008a28:	f109 0310 	add.w	r3, r9, #16
 8008a2c:	f109 0514 	add.w	r5, r9, #20
 8008a30:	f104 0e14 	add.w	lr, r4, #20
 8008a34:	f100 0b14 	add.w	fp, r0, #20
 8008a38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	46d9      	mov	r9, fp
 8008a44:	f04f 0c00 	mov.w	ip, #0
 8008a48:	9b01      	ldr	r3, [sp, #4]
 8008a4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	fa1f f38a 	uxth.w	r3, sl
 8008a58:	4619      	mov	r1, r3
 8008a5a:	b283      	uxth	r3, r0
 8008a5c:	1acb      	subs	r3, r1, r3
 8008a5e:	0c00      	lsrs	r0, r0, #16
 8008a60:	4463      	add	r3, ip
 8008a62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a70:	4576      	cmp	r6, lr
 8008a72:	f849 3b04 	str.w	r3, [r9], #4
 8008a76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a7a:	d8e5      	bhi.n	8008a48 <__mdiff+0x88>
 8008a7c:	1b33      	subs	r3, r6, r4
 8008a7e:	3b15      	subs	r3, #21
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	3415      	adds	r4, #21
 8008a86:	3304      	adds	r3, #4
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	bf38      	it	cc
 8008a8c:	2304      	movcc	r3, #4
 8008a8e:	441d      	add	r5, r3
 8008a90:	445b      	add	r3, fp
 8008a92:	461e      	mov	r6, r3
 8008a94:	462c      	mov	r4, r5
 8008a96:	4544      	cmp	r4, r8
 8008a98:	d30e      	bcc.n	8008ab8 <__mdiff+0xf8>
 8008a9a:	f108 0103 	add.w	r1, r8, #3
 8008a9e:	1b49      	subs	r1, r1, r5
 8008aa0:	f021 0103 	bic.w	r1, r1, #3
 8008aa4:	3d03      	subs	r5, #3
 8008aa6:	45a8      	cmp	r8, r5
 8008aa8:	bf38      	it	cc
 8008aaa:	2100      	movcc	r1, #0
 8008aac:	440b      	add	r3, r1
 8008aae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ab2:	b191      	cbz	r1, 8008ada <__mdiff+0x11a>
 8008ab4:	6117      	str	r7, [r2, #16]
 8008ab6:	e79d      	b.n	80089f4 <__mdiff+0x34>
 8008ab8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008abc:	46e6      	mov	lr, ip
 8008abe:	0c08      	lsrs	r0, r1, #16
 8008ac0:	fa1c fc81 	uxtah	ip, ip, r1
 8008ac4:	4471      	add	r1, lr
 8008ac6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008aca:	b289      	uxth	r1, r1
 8008acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ad0:	f846 1b04 	str.w	r1, [r6], #4
 8008ad4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ad8:	e7dd      	b.n	8008a96 <__mdiff+0xd6>
 8008ada:	3f01      	subs	r7, #1
 8008adc:	e7e7      	b.n	8008aae <__mdiff+0xee>
 8008ade:	bf00      	nop
 8008ae0:	0800a984 	.word	0x0800a984
 8008ae4:	0800a995 	.word	0x0800a995

08008ae8 <__d2b>:
 8008ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	460f      	mov	r7, r1
 8008aee:	2101      	movs	r1, #1
 8008af0:	ec59 8b10 	vmov	r8, r9, d0
 8008af4:	4616      	mov	r6, r2
 8008af6:	f7ff fccd 	bl	8008494 <_Balloc>
 8008afa:	4604      	mov	r4, r0
 8008afc:	b930      	cbnz	r0, 8008b0c <__d2b+0x24>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4b23      	ldr	r3, [pc, #140]	@ (8008b90 <__d2b+0xa8>)
 8008b02:	4824      	ldr	r0, [pc, #144]	@ (8008b94 <__d2b+0xac>)
 8008b04:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b08:	f000 f8f2 	bl	8008cf0 <__assert_func>
 8008b0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b14:	b10d      	cbz	r5, 8008b1a <__d2b+0x32>
 8008b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b20:	d023      	beq.n	8008b6a <__d2b+0x82>
 8008b22:	4668      	mov	r0, sp
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f7ff fd7c 	bl	8008622 <__lo0bits>
 8008b2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b2e:	b1d0      	cbz	r0, 8008b66 <__d2b+0x7e>
 8008b30:	f1c0 0320 	rsb	r3, r0, #32
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	40c2      	lsrs	r2, r0
 8008b3c:	6163      	str	r3, [r4, #20]
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	61a3      	str	r3, [r4, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf0c      	ite	eq
 8008b48:	2201      	moveq	r2, #1
 8008b4a:	2202      	movne	r2, #2
 8008b4c:	6122      	str	r2, [r4, #16]
 8008b4e:	b1a5      	cbz	r5, 8008b7a <__d2b+0x92>
 8008b50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b54:	4405      	add	r5, r0
 8008b56:	603d      	str	r5, [r7, #0]
 8008b58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	b003      	add	sp, #12
 8008b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b66:	6161      	str	r1, [r4, #20]
 8008b68:	e7ea      	b.n	8008b40 <__d2b+0x58>
 8008b6a:	a801      	add	r0, sp, #4
 8008b6c:	f7ff fd59 	bl	8008622 <__lo0bits>
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	6163      	str	r3, [r4, #20]
 8008b74:	3020      	adds	r0, #32
 8008b76:	2201      	movs	r2, #1
 8008b78:	e7e8      	b.n	8008b4c <__d2b+0x64>
 8008b7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b82:	6038      	str	r0, [r7, #0]
 8008b84:	6918      	ldr	r0, [r3, #16]
 8008b86:	f7ff fd2d 	bl	80085e4 <__hi0bits>
 8008b8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b8e:	e7e5      	b.n	8008b5c <__d2b+0x74>
 8008b90:	0800a984 	.word	0x0800a984
 8008b94:	0800a995 	.word	0x0800a995

08008b98 <__sflush_r>:
 8008b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	0716      	lsls	r6, r2, #28
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	d454      	bmi.n	8008c52 <__sflush_r+0xba>
 8008ba8:	684b      	ldr	r3, [r1, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dc02      	bgt.n	8008bb4 <__sflush_r+0x1c>
 8008bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dd48      	ble.n	8008c46 <__sflush_r+0xae>
 8008bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	d045      	beq.n	8008c46 <__sflush_r+0xae>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bc0:	682f      	ldr	r7, [r5, #0]
 8008bc2:	6a21      	ldr	r1, [r4, #32]
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	d030      	beq.n	8008c2a <__sflush_r+0x92>
 8008bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	0759      	lsls	r1, r3, #29
 8008bce:	d505      	bpl.n	8008bdc <__sflush_r+0x44>
 8008bd0:	6863      	ldr	r3, [r4, #4]
 8008bd2:	1ad2      	subs	r2, r2, r3
 8008bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bd6:	b10b      	cbz	r3, 8008bdc <__sflush_r+0x44>
 8008bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008be0:	6a21      	ldr	r1, [r4, #32]
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b0      	blx	r6
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	d106      	bne.n	8008bfa <__sflush_r+0x62>
 8008bec:	6829      	ldr	r1, [r5, #0]
 8008bee:	291d      	cmp	r1, #29
 8008bf0:	d82b      	bhi.n	8008c4a <__sflush_r+0xb2>
 8008bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c9c <__sflush_r+0x104>)
 8008bf4:	410a      	asrs	r2, r1
 8008bf6:	07d6      	lsls	r6, r2, #31
 8008bf8:	d427      	bmi.n	8008c4a <__sflush_r+0xb2>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	6062      	str	r2, [r4, #4]
 8008bfe:	04d9      	lsls	r1, r3, #19
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	d504      	bpl.n	8008c10 <__sflush_r+0x78>
 8008c06:	1c42      	adds	r2, r0, #1
 8008c08:	d101      	bne.n	8008c0e <__sflush_r+0x76>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b903      	cbnz	r3, 8008c10 <__sflush_r+0x78>
 8008c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c12:	602f      	str	r7, [r5, #0]
 8008c14:	b1b9      	cbz	r1, 8008c46 <__sflush_r+0xae>
 8008c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	d002      	beq.n	8008c24 <__sflush_r+0x8c>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7ff fbee 	bl	8008400 <_free_r>
 8008c24:	2300      	movs	r3, #0
 8008c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c28:	e00d      	b.n	8008c46 <__sflush_r+0xae>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	4602      	mov	r2, r0
 8008c32:	1c50      	adds	r0, r2, #1
 8008c34:	d1c9      	bne.n	8008bca <__sflush_r+0x32>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0c6      	beq.n	8008bca <__sflush_r+0x32>
 8008c3c:	2b1d      	cmp	r3, #29
 8008c3e:	d001      	beq.n	8008c44 <__sflush_r+0xac>
 8008c40:	2b16      	cmp	r3, #22
 8008c42:	d11e      	bne.n	8008c82 <__sflush_r+0xea>
 8008c44:	602f      	str	r7, [r5, #0]
 8008c46:	2000      	movs	r0, #0
 8008c48:	e022      	b.n	8008c90 <__sflush_r+0xf8>
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4e:	b21b      	sxth	r3, r3
 8008c50:	e01b      	b.n	8008c8a <__sflush_r+0xf2>
 8008c52:	690f      	ldr	r7, [r1, #16]
 8008c54:	2f00      	cmp	r7, #0
 8008c56:	d0f6      	beq.n	8008c46 <__sflush_r+0xae>
 8008c58:	0793      	lsls	r3, r2, #30
 8008c5a:	680e      	ldr	r6, [r1, #0]
 8008c5c:	bf08      	it	eq
 8008c5e:	694b      	ldreq	r3, [r1, #20]
 8008c60:	600f      	str	r7, [r1, #0]
 8008c62:	bf18      	it	ne
 8008c64:	2300      	movne	r3, #0
 8008c66:	eba6 0807 	sub.w	r8, r6, r7
 8008c6a:	608b      	str	r3, [r1, #8]
 8008c6c:	f1b8 0f00 	cmp.w	r8, #0
 8008c70:	dde9      	ble.n	8008c46 <__sflush_r+0xae>
 8008c72:	6a21      	ldr	r1, [r4, #32]
 8008c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c76:	4643      	mov	r3, r8
 8008c78:	463a      	mov	r2, r7
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b0      	blx	r6
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	dc08      	bgt.n	8008c94 <__sflush_r+0xfc>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	4407      	add	r7, r0
 8008c96:	eba8 0800 	sub.w	r8, r8, r0
 8008c9a:	e7e7      	b.n	8008c6c <__sflush_r+0xd4>
 8008c9c:	dfbffffe 	.word	0xdfbffffe

08008ca0 <_fflush_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	690b      	ldr	r3, [r1, #16]
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	b913      	cbnz	r3, 8008cb0 <_fflush_r+0x10>
 8008caa:	2500      	movs	r5, #0
 8008cac:	4628      	mov	r0, r5
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	b118      	cbz	r0, 8008cba <_fflush_r+0x1a>
 8008cb2:	6a03      	ldr	r3, [r0, #32]
 8008cb4:	b90b      	cbnz	r3, 8008cba <_fflush_r+0x1a>
 8008cb6:	f7fe fc3f 	bl	8007538 <__sinit>
 8008cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0f3      	beq.n	8008caa <_fflush_r+0xa>
 8008cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cc4:	07d0      	lsls	r0, r2, #31
 8008cc6:	d404      	bmi.n	8008cd2 <_fflush_r+0x32>
 8008cc8:	0599      	lsls	r1, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_fflush_r+0x32>
 8008ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cce:	f7fe fd3a 	bl	8007746 <__retarget_lock_acquire_recursive>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7ff ff5f 	bl	8008b98 <__sflush_r>
 8008cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cdc:	07da      	lsls	r2, r3, #31
 8008cde:	4605      	mov	r5, r0
 8008ce0:	d4e4      	bmi.n	8008cac <_fflush_r+0xc>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	059b      	lsls	r3, r3, #22
 8008ce6:	d4e1      	bmi.n	8008cac <_fflush_r+0xc>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cea:	f7fe fd2d 	bl	8007748 <__retarget_lock_release_recursive>
 8008cee:	e7dd      	b.n	8008cac <_fflush_r+0xc>

08008cf0 <__assert_func>:
 8008cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <__assert_func+0x2c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	68d8      	ldr	r0, [r3, #12]
 8008cfe:	b954      	cbnz	r4, 8008d16 <__assert_func+0x26>
 8008d00:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <__assert_func+0x30>)
 8008d02:	461c      	mov	r4, r3
 8008d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d08:	9100      	str	r1, [sp, #0]
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	4905      	ldr	r1, [pc, #20]	@ (8008d24 <__assert_func+0x34>)
 8008d0e:	f000 f841 	bl	8008d94 <fiprintf>
 8008d12:	f000 f851 	bl	8008db8 <abort>
 8008d16:	4b04      	ldr	r3, [pc, #16]	@ (8008d28 <__assert_func+0x38>)
 8008d18:	e7f4      	b.n	8008d04 <__assert_func+0x14>
 8008d1a:	bf00      	nop
 8008d1c:	20000028 	.word	0x20000028
 8008d20:	0800ab35 	.word	0x0800ab35
 8008d24:	0800ab07 	.word	0x0800ab07
 8008d28:	0800aafa 	.word	0x0800aafa

08008d2c <_calloc_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	fba1 5402 	umull	r5, r4, r1, r2
 8008d32:	b93c      	cbnz	r4, 8008d44 <_calloc_r+0x18>
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7fd fe8f 	bl	8006a58 <_malloc_r>
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	b928      	cbnz	r0, 8008d4a <_calloc_r+0x1e>
 8008d3e:	2600      	movs	r6, #0
 8008d40:	4630      	mov	r0, r6
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	220c      	movs	r2, #12
 8008d46:	6002      	str	r2, [r0, #0]
 8008d48:	e7f9      	b.n	8008d3e <_calloc_r+0x12>
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7fe fc6c 	bl	800762a <memset>
 8008d52:	e7f5      	b.n	8008d40 <_calloc_r+0x14>

08008d54 <__ascii_mbtowc>:
 8008d54:	b082      	sub	sp, #8
 8008d56:	b901      	cbnz	r1, 8008d5a <__ascii_mbtowc+0x6>
 8008d58:	a901      	add	r1, sp, #4
 8008d5a:	b142      	cbz	r2, 8008d6e <__ascii_mbtowc+0x1a>
 8008d5c:	b14b      	cbz	r3, 8008d72 <__ascii_mbtowc+0x1e>
 8008d5e:	7813      	ldrb	r3, [r2, #0]
 8008d60:	600b      	str	r3, [r1, #0]
 8008d62:	7812      	ldrb	r2, [r2, #0]
 8008d64:	1e10      	subs	r0, r2, #0
 8008d66:	bf18      	it	ne
 8008d68:	2001      	movne	r0, #1
 8008d6a:	b002      	add	sp, #8
 8008d6c:	4770      	bx	lr
 8008d6e:	4610      	mov	r0, r2
 8008d70:	e7fb      	b.n	8008d6a <__ascii_mbtowc+0x16>
 8008d72:	f06f 0001 	mvn.w	r0, #1
 8008d76:	e7f8      	b.n	8008d6a <__ascii_mbtowc+0x16>

08008d78 <__ascii_wctomb>:
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	b141      	cbz	r1, 8008d90 <__ascii_wctomb+0x18>
 8008d7e:	2aff      	cmp	r2, #255	@ 0xff
 8008d80:	d904      	bls.n	8008d8c <__ascii_wctomb+0x14>
 8008d82:	228a      	movs	r2, #138	@ 0x8a
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	4770      	bx	lr
 8008d8c:	700a      	strb	r2, [r1, #0]
 8008d8e:	2001      	movs	r0, #1
 8008d90:	4770      	bx	lr
	...

08008d94 <fiprintf>:
 8008d94:	b40e      	push	{r1, r2, r3}
 8008d96:	b503      	push	{r0, r1, lr}
 8008d98:	4601      	mov	r1, r0
 8008d9a:	ab03      	add	r3, sp, #12
 8008d9c:	4805      	ldr	r0, [pc, #20]	@ (8008db4 <fiprintf+0x20>)
 8008d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	f000 f837 	bl	8008e18 <_vfiprintf_r>
 8008daa:	b002      	add	sp, #8
 8008dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db0:	b003      	add	sp, #12
 8008db2:	4770      	bx	lr
 8008db4:	20000028 	.word	0x20000028

08008db8 <abort>:
 8008db8:	b508      	push	{r3, lr}
 8008dba:	2006      	movs	r0, #6
 8008dbc:	f000 fa00 	bl	80091c0 <raise>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f000 fadd 	bl	8009380 <_exit>

08008dc6 <__sfputc_r>:
 8008dc6:	6893      	ldr	r3, [r2, #8]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	b410      	push	{r4}
 8008dce:	6093      	str	r3, [r2, #8]
 8008dd0:	da08      	bge.n	8008de4 <__sfputc_r+0x1e>
 8008dd2:	6994      	ldr	r4, [r2, #24]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	db01      	blt.n	8008ddc <__sfputc_r+0x16>
 8008dd8:	290a      	cmp	r1, #10
 8008dda:	d103      	bne.n	8008de4 <__sfputc_r+0x1e>
 8008ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de0:	f000 b932 	b.w	8009048 <__swbuf_r>
 8008de4:	6813      	ldr	r3, [r2, #0]
 8008de6:	1c58      	adds	r0, r3, #1
 8008de8:	6010      	str	r0, [r2, #0]
 8008dea:	7019      	strb	r1, [r3, #0]
 8008dec:	4608      	mov	r0, r1
 8008dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <__sfputs_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	18d5      	adds	r5, r2, r3
 8008dfe:	42ac      	cmp	r4, r5
 8008e00:	d101      	bne.n	8008e06 <__sfputs_r+0x12>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e007      	b.n	8008e16 <__sfputs_r+0x22>
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	463a      	mov	r2, r7
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff ffda 	bl	8008dc6 <__sfputc_r>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d1f3      	bne.n	8008dfe <__sfputs_r+0xa>
 8008e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e18 <_vfiprintf_r>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	b09d      	sub	sp, #116	@ 0x74
 8008e20:	4614      	mov	r4, r2
 8008e22:	4698      	mov	r8, r3
 8008e24:	4606      	mov	r6, r0
 8008e26:	b118      	cbz	r0, 8008e30 <_vfiprintf_r+0x18>
 8008e28:	6a03      	ldr	r3, [r0, #32]
 8008e2a:	b90b      	cbnz	r3, 8008e30 <_vfiprintf_r+0x18>
 8008e2c:	f7fe fb84 	bl	8007538 <__sinit>
 8008e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e32:	07d9      	lsls	r1, r3, #31
 8008e34:	d405      	bmi.n	8008e42 <_vfiprintf_r+0x2a>
 8008e36:	89ab      	ldrh	r3, [r5, #12]
 8008e38:	059a      	lsls	r2, r3, #22
 8008e3a:	d402      	bmi.n	8008e42 <_vfiprintf_r+0x2a>
 8008e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e3e:	f7fe fc82 	bl	8007746 <__retarget_lock_acquire_recursive>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	071b      	lsls	r3, r3, #28
 8008e46:	d501      	bpl.n	8008e4c <_vfiprintf_r+0x34>
 8008e48:	692b      	ldr	r3, [r5, #16]
 8008e4a:	b99b      	cbnz	r3, 8008e74 <_vfiprintf_r+0x5c>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f000 f938 	bl	80090c4 <__swsetup_r>
 8008e54:	b170      	cbz	r0, 8008e74 <_vfiprintf_r+0x5c>
 8008e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e58:	07dc      	lsls	r4, r3, #31
 8008e5a:	d504      	bpl.n	8008e66 <_vfiprintf_r+0x4e>
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	b01d      	add	sp, #116	@ 0x74
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	0598      	lsls	r0, r3, #22
 8008e6a:	d4f7      	bmi.n	8008e5c <_vfiprintf_r+0x44>
 8008e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e6e:	f7fe fc6b 	bl	8007748 <__retarget_lock_release_recursive>
 8008e72:	e7f3      	b.n	8008e5c <_vfiprintf_r+0x44>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e78:	2320      	movs	r3, #32
 8008e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e82:	2330      	movs	r3, #48	@ 0x30
 8008e84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009034 <_vfiprintf_r+0x21c>
 8008e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e8c:	f04f 0901 	mov.w	r9, #1
 8008e90:	4623      	mov	r3, r4
 8008e92:	469a      	mov	sl, r3
 8008e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e98:	b10a      	cbz	r2, 8008e9e <_vfiprintf_r+0x86>
 8008e9a:	2a25      	cmp	r2, #37	@ 0x25
 8008e9c:	d1f9      	bne.n	8008e92 <_vfiprintf_r+0x7a>
 8008e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea2:	d00b      	beq.n	8008ebc <_vfiprintf_r+0xa4>
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ffa2 	bl	8008df4 <__sfputs_r>
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f000 80a7 	beq.w	8009004 <_vfiprintf_r+0x1ec>
 8008eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eb8:	445a      	add	r2, fp
 8008eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 809f 	beq.w	8009004 <_vfiprintf_r+0x1ec>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed0:	f10a 0a01 	add.w	sl, sl, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	9307      	str	r3, [sp, #28]
 8008ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ede:	4654      	mov	r4, sl
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee6:	4853      	ldr	r0, [pc, #332]	@ (8009034 <_vfiprintf_r+0x21c>)
 8008ee8:	f7f7 f972 	bl	80001d0 <memchr>
 8008eec:	9a04      	ldr	r2, [sp, #16]
 8008eee:	b9d8      	cbnz	r0, 8008f28 <_vfiprintf_r+0x110>
 8008ef0:	06d1      	lsls	r1, r2, #27
 8008ef2:	bf44      	itt	mi
 8008ef4:	2320      	movmi	r3, #32
 8008ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008efa:	0713      	lsls	r3, r2, #28
 8008efc:	bf44      	itt	mi
 8008efe:	232b      	movmi	r3, #43	@ 0x2b
 8008f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f04:	f89a 3000 	ldrb.w	r3, [sl]
 8008f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f0a:	d015      	beq.n	8008f38 <_vfiprintf_r+0x120>
 8008f0c:	9a07      	ldr	r2, [sp, #28]
 8008f0e:	4654      	mov	r4, sl
 8008f10:	2000      	movs	r0, #0
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4621      	mov	r1, r4
 8008f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f1c:	3b30      	subs	r3, #48	@ 0x30
 8008f1e:	2b09      	cmp	r3, #9
 8008f20:	d94b      	bls.n	8008fba <_vfiprintf_r+0x1a2>
 8008f22:	b1b0      	cbz	r0, 8008f52 <_vfiprintf_r+0x13a>
 8008f24:	9207      	str	r2, [sp, #28]
 8008f26:	e014      	b.n	8008f52 <_vfiprintf_r+0x13a>
 8008f28:	eba0 0308 	sub.w	r3, r0, r8
 8008f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f30:	4313      	orrs	r3, r2
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	46a2      	mov	sl, r4
 8008f36:	e7d2      	b.n	8008ede <_vfiprintf_r+0xc6>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	1d19      	adds	r1, r3, #4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	9103      	str	r1, [sp, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfbb      	ittet	lt
 8008f44:	425b      	neglt	r3, r3
 8008f46:	f042 0202 	orrlt.w	r2, r2, #2
 8008f4a:	9307      	strge	r3, [sp, #28]
 8008f4c:	9307      	strlt	r3, [sp, #28]
 8008f4e:	bfb8      	it	lt
 8008f50:	9204      	strlt	r2, [sp, #16]
 8008f52:	7823      	ldrb	r3, [r4, #0]
 8008f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f56:	d10a      	bne.n	8008f6e <_vfiprintf_r+0x156>
 8008f58:	7863      	ldrb	r3, [r4, #1]
 8008f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f5c:	d132      	bne.n	8008fc4 <_vfiprintf_r+0x1ac>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d1a      	adds	r2, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9203      	str	r2, [sp, #12]
 8008f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f6a:	3402      	adds	r4, #2
 8008f6c:	9305      	str	r3, [sp, #20]
 8008f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009044 <_vfiprintf_r+0x22c>
 8008f72:	7821      	ldrb	r1, [r4, #0]
 8008f74:	2203      	movs	r2, #3
 8008f76:	4650      	mov	r0, sl
 8008f78:	f7f7 f92a 	bl	80001d0 <memchr>
 8008f7c:	b138      	cbz	r0, 8008f8e <_vfiprintf_r+0x176>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	eba0 000a 	sub.w	r0, r0, sl
 8008f84:	2240      	movs	r2, #64	@ 0x40
 8008f86:	4082      	lsls	r2, r0
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	3401      	adds	r4, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	4829      	ldr	r0, [pc, #164]	@ (8009038 <_vfiprintf_r+0x220>)
 8008f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f98:	2206      	movs	r2, #6
 8008f9a:	f7f7 f919 	bl	80001d0 <memchr>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d03f      	beq.n	8009022 <_vfiprintf_r+0x20a>
 8008fa2:	4b26      	ldr	r3, [pc, #152]	@ (800903c <_vfiprintf_r+0x224>)
 8008fa4:	bb1b      	cbnz	r3, 8008fee <_vfiprintf_r+0x1d6>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	3307      	adds	r3, #7
 8008faa:	f023 0307 	bic.w	r3, r3, #7
 8008fae:	3308      	adds	r3, #8
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb4:	443b      	add	r3, r7
 8008fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fb8:	e76a      	b.n	8008e90 <_vfiprintf_r+0x78>
 8008fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	e7a8      	b.n	8008f16 <_vfiprintf_r+0xfe>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9305      	str	r3, [sp, #20]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f04f 0c0a 	mov.w	ip, #10
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd6:	3a30      	subs	r2, #48	@ 0x30
 8008fd8:	2a09      	cmp	r2, #9
 8008fda:	d903      	bls.n	8008fe4 <_vfiprintf_r+0x1cc>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0c6      	beq.n	8008f6e <_vfiprintf_r+0x156>
 8008fe0:	9105      	str	r1, [sp, #20]
 8008fe2:	e7c4      	b.n	8008f6e <_vfiprintf_r+0x156>
 8008fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe8:	4604      	mov	r4, r0
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7f0      	b.n	8008fd0 <_vfiprintf_r+0x1b8>
 8008fee:	ab03      	add	r3, sp, #12
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4b12      	ldr	r3, [pc, #72]	@ (8009040 <_vfiprintf_r+0x228>)
 8008ff6:	a904      	add	r1, sp, #16
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7fd fe59 	bl	8006cb0 <_printf_float>
 8008ffe:	4607      	mov	r7, r0
 8009000:	1c78      	adds	r0, r7, #1
 8009002:	d1d6      	bne.n	8008fb2 <_vfiprintf_r+0x19a>
 8009004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x1fe>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x1fe>
 8009010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009012:	f7fe fb99 	bl	8007748 <__retarget_lock_release_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	065b      	lsls	r3, r3, #25
 800901a:	f53f af1f 	bmi.w	8008e5c <_vfiprintf_r+0x44>
 800901e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009020:	e71e      	b.n	8008e60 <_vfiprintf_r+0x48>
 8009022:	ab03      	add	r3, sp, #12
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	462a      	mov	r2, r5
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <_vfiprintf_r+0x228>)
 800902a:	a904      	add	r1, sp, #16
 800902c:	4630      	mov	r0, r6
 800902e:	f7fe f8d7 	bl	80071e0 <_printf_i>
 8009032:	e7e4      	b.n	8008ffe <_vfiprintf_r+0x1e6>
 8009034:	0800ac37 	.word	0x0800ac37
 8009038:	0800ac41 	.word	0x0800ac41
 800903c:	08006cb1 	.word	0x08006cb1
 8009040:	08008df5 	.word	0x08008df5
 8009044:	0800ac3d 	.word	0x0800ac3d

08009048 <__swbuf_r>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	460e      	mov	r6, r1
 800904c:	4614      	mov	r4, r2
 800904e:	4605      	mov	r5, r0
 8009050:	b118      	cbz	r0, 800905a <__swbuf_r+0x12>
 8009052:	6a03      	ldr	r3, [r0, #32]
 8009054:	b90b      	cbnz	r3, 800905a <__swbuf_r+0x12>
 8009056:	f7fe fa6f 	bl	8007538 <__sinit>
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	60a3      	str	r3, [r4, #8]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	071a      	lsls	r2, r3, #28
 8009062:	d501      	bpl.n	8009068 <__swbuf_r+0x20>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	b943      	cbnz	r3, 800907a <__swbuf_r+0x32>
 8009068:	4621      	mov	r1, r4
 800906a:	4628      	mov	r0, r5
 800906c:	f000 f82a 	bl	80090c4 <__swsetup_r>
 8009070:	b118      	cbz	r0, 800907a <__swbuf_r+0x32>
 8009072:	f04f 37ff 	mov.w	r7, #4294967295
 8009076:	4638      	mov	r0, r7
 8009078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	6922      	ldr	r2, [r4, #16]
 800907e:	1a98      	subs	r0, r3, r2
 8009080:	6963      	ldr	r3, [r4, #20]
 8009082:	b2f6      	uxtb	r6, r6
 8009084:	4283      	cmp	r3, r0
 8009086:	4637      	mov	r7, r6
 8009088:	dc05      	bgt.n	8009096 <__swbuf_r+0x4e>
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff fe07 	bl	8008ca0 <_fflush_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1ed      	bne.n	8009072 <__swbuf_r+0x2a>
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	60a3      	str	r3, [r4, #8]
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	701e      	strb	r6, [r3, #0]
 80090a4:	6962      	ldr	r2, [r4, #20]
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d004      	beq.n	80090b6 <__swbuf_r+0x6e>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d5e1      	bpl.n	8009076 <__swbuf_r+0x2e>
 80090b2:	2e0a      	cmp	r6, #10
 80090b4:	d1df      	bne.n	8009076 <__swbuf_r+0x2e>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7ff fdf1 	bl	8008ca0 <_fflush_r>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d0d9      	beq.n	8009076 <__swbuf_r+0x2e>
 80090c2:	e7d6      	b.n	8009072 <__swbuf_r+0x2a>

080090c4 <__swsetup_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4b29      	ldr	r3, [pc, #164]	@ (800916c <__swsetup_r+0xa8>)
 80090c8:	4605      	mov	r5, r0
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	460c      	mov	r4, r1
 80090ce:	b118      	cbz	r0, 80090d8 <__swsetup_r+0x14>
 80090d0:	6a03      	ldr	r3, [r0, #32]
 80090d2:	b90b      	cbnz	r3, 80090d8 <__swsetup_r+0x14>
 80090d4:	f7fe fa30 	bl	8007538 <__sinit>
 80090d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090dc:	0719      	lsls	r1, r3, #28
 80090de:	d422      	bmi.n	8009126 <__swsetup_r+0x62>
 80090e0:	06da      	lsls	r2, r3, #27
 80090e2:	d407      	bmi.n	80090f4 <__swsetup_r+0x30>
 80090e4:	2209      	movs	r2, #9
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	e033      	b.n	800915c <__swsetup_r+0x98>
 80090f4:	0758      	lsls	r0, r3, #29
 80090f6:	d512      	bpl.n	800911e <__swsetup_r+0x5a>
 80090f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090fa:	b141      	cbz	r1, 800910e <__swsetup_r+0x4a>
 80090fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009100:	4299      	cmp	r1, r3
 8009102:	d002      	beq.n	800910a <__swsetup_r+0x46>
 8009104:	4628      	mov	r0, r5
 8009106:	f7ff f97b 	bl	8008400 <_free_r>
 800910a:	2300      	movs	r3, #0
 800910c:	6363      	str	r3, [r4, #52]	@ 0x34
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	2300      	movs	r3, #0
 8009118:	6063      	str	r3, [r4, #4]
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	f043 0308 	orr.w	r3, r3, #8
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	b94b      	cbnz	r3, 800913e <__swsetup_r+0x7a>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009134:	d003      	beq.n	800913e <__swsetup_r+0x7a>
 8009136:	4621      	mov	r1, r4
 8009138:	4628      	mov	r0, r5
 800913a:	f000 f883 	bl	8009244 <__smakebuf_r>
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	f013 0201 	ands.w	r2, r3, #1
 8009146:	d00a      	beq.n	800915e <__swsetup_r+0x9a>
 8009148:	2200      	movs	r2, #0
 800914a:	60a2      	str	r2, [r4, #8]
 800914c:	6962      	ldr	r2, [r4, #20]
 800914e:	4252      	negs	r2, r2
 8009150:	61a2      	str	r2, [r4, #24]
 8009152:	6922      	ldr	r2, [r4, #16]
 8009154:	b942      	cbnz	r2, 8009168 <__swsetup_r+0xa4>
 8009156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800915a:	d1c5      	bne.n	80090e8 <__swsetup_r+0x24>
 800915c:	bd38      	pop	{r3, r4, r5, pc}
 800915e:	0799      	lsls	r1, r3, #30
 8009160:	bf58      	it	pl
 8009162:	6962      	ldrpl	r2, [r4, #20]
 8009164:	60a2      	str	r2, [r4, #8]
 8009166:	e7f4      	b.n	8009152 <__swsetup_r+0x8e>
 8009168:	2000      	movs	r0, #0
 800916a:	e7f7      	b.n	800915c <__swsetup_r+0x98>
 800916c:	20000028 	.word	0x20000028

08009170 <_raise_r>:
 8009170:	291f      	cmp	r1, #31
 8009172:	b538      	push	{r3, r4, r5, lr}
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	d904      	bls.n	8009184 <_raise_r+0x14>
 800917a:	2316      	movs	r3, #22
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009186:	b112      	cbz	r2, 800918e <_raise_r+0x1e>
 8009188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800918c:	b94b      	cbnz	r3, 80091a2 <_raise_r+0x32>
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f830 	bl	80091f4 <_getpid_r>
 8009194:	4622      	mov	r2, r4
 8009196:	4601      	mov	r1, r0
 8009198:	4628      	mov	r0, r5
 800919a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800919e:	f000 b817 	b.w	80091d0 <_kill_r>
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d00a      	beq.n	80091bc <_raise_r+0x4c>
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	d103      	bne.n	80091b2 <_raise_r+0x42>
 80091aa:	2316      	movs	r3, #22
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7e7      	b.n	8009182 <_raise_r+0x12>
 80091b2:	2100      	movs	r1, #0
 80091b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091b8:	4620      	mov	r0, r4
 80091ba:	4798      	blx	r3
 80091bc:	2000      	movs	r0, #0
 80091be:	e7e0      	b.n	8009182 <_raise_r+0x12>

080091c0 <raise>:
 80091c0:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <raise+0xc>)
 80091c2:	4601      	mov	r1, r0
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	f7ff bfd3 	b.w	8009170 <_raise_r>
 80091ca:	bf00      	nop
 80091cc:	20000028 	.word	0x20000028

080091d0 <_kill_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	@ (80091f0 <_kill_r+0x20>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	f000 f8af 	bl	8009340 <_kill>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d102      	bne.n	80091ec <_kill_r+0x1c>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	b103      	cbz	r3, 80091ec <_kill_r+0x1c>
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	20000a34 	.word	0x20000a34

080091f4 <_getpid_r>:
 80091f4:	f000 b894 	b.w	8009320 <_getpid>

080091f8 <__swhatbuf_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	460c      	mov	r4, r1
 80091fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009200:	2900      	cmp	r1, #0
 8009202:	b096      	sub	sp, #88	@ 0x58
 8009204:	4615      	mov	r5, r2
 8009206:	461e      	mov	r6, r3
 8009208:	da0d      	bge.n	8009226 <__swhatbuf_r+0x2e>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009210:	f04f 0100 	mov.w	r1, #0
 8009214:	bf14      	ite	ne
 8009216:	2340      	movne	r3, #64	@ 0x40
 8009218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800921c:	2000      	movs	r0, #0
 800921e:	6031      	str	r1, [r6, #0]
 8009220:	602b      	str	r3, [r5, #0]
 8009222:	b016      	add	sp, #88	@ 0x58
 8009224:	bd70      	pop	{r4, r5, r6, pc}
 8009226:	466a      	mov	r2, sp
 8009228:	f000 f848 	bl	80092bc <_fstat_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	dbec      	blt.n	800920a <__swhatbuf_r+0x12>
 8009230:	9901      	ldr	r1, [sp, #4]
 8009232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800923a:	4259      	negs	r1, r3
 800923c:	4159      	adcs	r1, r3
 800923e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009242:	e7eb      	b.n	800921c <__swhatbuf_r+0x24>

08009244 <__smakebuf_r>:
 8009244:	898b      	ldrh	r3, [r1, #12]
 8009246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009248:	079d      	lsls	r5, r3, #30
 800924a:	4606      	mov	r6, r0
 800924c:	460c      	mov	r4, r1
 800924e:	d507      	bpl.n	8009260 <__smakebuf_r+0x1c>
 8009250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	2301      	movs	r3, #1
 800925a:	6163      	str	r3, [r4, #20]
 800925c:	b003      	add	sp, #12
 800925e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009260:	ab01      	add	r3, sp, #4
 8009262:	466a      	mov	r2, sp
 8009264:	f7ff ffc8 	bl	80091f8 <__swhatbuf_r>
 8009268:	9f00      	ldr	r7, [sp, #0]
 800926a:	4605      	mov	r5, r0
 800926c:	4639      	mov	r1, r7
 800926e:	4630      	mov	r0, r6
 8009270:	f7fd fbf2 	bl	8006a58 <_malloc_r>
 8009274:	b948      	cbnz	r0, 800928a <__smakebuf_r+0x46>
 8009276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927a:	059a      	lsls	r2, r3, #22
 800927c:	d4ee      	bmi.n	800925c <__smakebuf_r+0x18>
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0302 	orr.w	r3, r3, #2
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	e7e2      	b.n	8009250 <__smakebuf_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	6020      	str	r0, [r4, #0]
 800928e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800929a:	b15b      	cbz	r3, 80092b4 <__smakebuf_r+0x70>
 800929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f81d 	bl	80092e0 <_isatty_r>
 80092a6:	b128      	cbz	r0, 80092b4 <__smakebuf_r+0x70>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	431d      	orrs	r5, r3
 80092b8:	81a5      	strh	r5, [r4, #12]
 80092ba:	e7cf      	b.n	800925c <__smakebuf_r+0x18>

080092bc <_fstat_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d07      	ldr	r5, [pc, #28]	@ (80092dc <_fstat_r+0x20>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	4611      	mov	r1, r2
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	f000 f821 	bl	8009310 <_fstat>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d102      	bne.n	80092d8 <_fstat_r+0x1c>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	b103      	cbz	r3, 80092d8 <_fstat_r+0x1c>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
 80092da:	bf00      	nop
 80092dc:	20000a34 	.word	0x20000a34

080092e0 <_isatty_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	@ (80092fc <_isatty_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f000 f820 	bl	8009330 <_isatty>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_isatty_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_isatty_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	20000a34 	.word	0x20000a34

08009300 <_close>:
 8009300:	4b02      	ldr	r3, [pc, #8]	@ (800930c <_close+0xc>)
 8009302:	2258      	movs	r2, #88	@ 0x58
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	4770      	bx	lr
 800930c:	20000a34 	.word	0x20000a34

08009310 <_fstat>:
 8009310:	4b02      	ldr	r3, [pc, #8]	@ (800931c <_fstat+0xc>)
 8009312:	2258      	movs	r2, #88	@ 0x58
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	f04f 30ff 	mov.w	r0, #4294967295
 800931a:	4770      	bx	lr
 800931c:	20000a34 	.word	0x20000a34

08009320 <_getpid>:
 8009320:	4b02      	ldr	r3, [pc, #8]	@ (800932c <_getpid+0xc>)
 8009322:	2258      	movs	r2, #88	@ 0x58
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f04f 30ff 	mov.w	r0, #4294967295
 800932a:	4770      	bx	lr
 800932c:	20000a34 	.word	0x20000a34

08009330 <_isatty>:
 8009330:	4b02      	ldr	r3, [pc, #8]	@ (800933c <_isatty+0xc>)
 8009332:	2258      	movs	r2, #88	@ 0x58
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	2000      	movs	r0, #0
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000a34 	.word	0x20000a34

08009340 <_kill>:
 8009340:	4b02      	ldr	r3, [pc, #8]	@ (800934c <_kill+0xc>)
 8009342:	2258      	movs	r2, #88	@ 0x58
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	4770      	bx	lr
 800934c:	20000a34 	.word	0x20000a34

08009350 <_lseek>:
 8009350:	4b02      	ldr	r3, [pc, #8]	@ (800935c <_lseek+0xc>)
 8009352:	2258      	movs	r2, #88	@ 0x58
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	f04f 30ff 	mov.w	r0, #4294967295
 800935a:	4770      	bx	lr
 800935c:	20000a34 	.word	0x20000a34

08009360 <_read>:
 8009360:	4b02      	ldr	r3, [pc, #8]	@ (800936c <_read+0xc>)
 8009362:	2258      	movs	r2, #88	@ 0x58
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	4770      	bx	lr
 800936c:	20000a34 	.word	0x20000a34

08009370 <_write>:
 8009370:	4b02      	ldr	r3, [pc, #8]	@ (800937c <_write+0xc>)
 8009372:	2258      	movs	r2, #88	@ 0x58
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	4770      	bx	lr
 800937c:	20000a34 	.word	0x20000a34

08009380 <_exit>:
 8009380:	e7fe      	b.n	8009380 <_exit>
	...

08009384 <_init>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr

08009390 <_fini>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr
